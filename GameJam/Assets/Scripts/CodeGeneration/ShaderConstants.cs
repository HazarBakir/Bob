/*
* Generated by XIV.Core.Utils.ClassGenerator
*/
using UnityEngine;

public static class ShaderConstants
{
	// Inner Classes
	public static class MK4_PlantsWaving
	{
		// Members
		public const string NoiseRGB_Texture = "_NoiseRGB";
		public static readonly int NoiseRGB_TextureID = Shader.PropertyToID("_NoiseRGB");
		public const string Cutoff_Float = "_Cutoff";
		public static readonly int Cutoff_FloatID = Shader.PropertyToID("_Cutoff");
		public const string Albedo_Texture = "_Albedo";
		public static readonly int Albedo_TextureID = Shader.PropertyToID("_Albedo");
		public const string NormalMap_Texture = "_NormalMap";
		public static readonly int NormalMap_TextureID = Shader.PropertyToID("_NormalMap");
		public const string NormalScale_Range = "_NormalScale";
		public static readonly int NormalScale_RangeID = Shader.PropertyToID("_NormalScale");
		public const string Speed1_Range = "_Speed1";
		public static readonly int Speed1_RangeID = Shader.PropertyToID("_Speed1");
		public const string DistortionBlend_Range = "_DistortionBlend";
		public static readonly int DistortionBlend_RangeID = Shader.PropertyToID("_DistortionBlend");
		public const string DistortionPower_Range = "_DistortionPower";
		public static readonly int DistortionPower_RangeID = Shader.PropertyToID("_DistortionPower");
		public const string WindGloss_Texture = "_WindGloss";
		public static readonly int WindGloss_TextureID = Shader.PropertyToID("_WindGloss");
		public const string texcoord_Texture = "_texcoord";
		public static readonly int texcoord_TextureID = Shader.PropertyToID("_texcoord");
		public const string dirty_Float = "__dirty";
		public static readonly int dirty_FloatID = Shader.PropertyToID("__dirty");
		
	} // class MK4_PlantsWaving
	
	public static class MK4_PlantsWaving1sided
	{
		// Members
		public const string NoiseRGB_Texture = "_NoiseRGB";
		public static readonly int NoiseRGB_TextureID = Shader.PropertyToID("_NoiseRGB");
		public const string Cutoff_Float = "_Cutoff";
		public static readonly int Cutoff_FloatID = Shader.PropertyToID("_Cutoff");
		public const string Albedo_Texture = "_Albedo";
		public static readonly int Albedo_TextureID = Shader.PropertyToID("_Albedo");
		public const string NormalMap_Texture = "_NormalMap";
		public static readonly int NormalMap_TextureID = Shader.PropertyToID("_NormalMap");
		public const string NormalScale_Range = "_NormalScale";
		public static readonly int NormalScale_RangeID = Shader.PropertyToID("_NormalScale");
		public const string Speed1_Range = "_Speed1";
		public static readonly int Speed1_RangeID = Shader.PropertyToID("_Speed1");
		public const string DistortionBlend_Range = "_DistortionBlend";
		public static readonly int DistortionBlend_RangeID = Shader.PropertyToID("_DistortionBlend");
		public const string DistortionPower_Range = "_DistortionPower";
		public static readonly int DistortionPower_RangeID = Shader.PropertyToID("_DistortionPower");
		public const string WindGloss_Texture = "_WindGloss";
		public static readonly int WindGloss_TextureID = Shader.PropertyToID("_WindGloss");
		public const string texcoord_Texture = "_texcoord";
		public static readonly int texcoord_TextureID = Shader.PropertyToID("_texcoord");
		public const string dirty_Float = "__dirty";
		public static readonly int dirty_FloatID = Shader.PropertyToID("__dirty");
		
	} // class MK4_PlantsWaving1sided
	
	public static class MK4_Rock_cover
	{
		// Members
		public const string RockAlbedo_Texture = "_RockAlbedo";
		public static readonly int RockAlbedo_TextureID = Shader.PropertyToID("_RockAlbedo");
		public const string RockNormal_Texture = "_RockNormal";
		public static readonly int RockNormal_TextureID = Shader.PropertyToID("_RockNormal");
		public const string Normalbase_Range = "_Normalbase";
		public static readonly int Normalbase_RangeID = Shader.PropertyToID("_Normalbase");
		public const string RockSpecular_Texture = "_RockSpecular";
		public static readonly int RockSpecular_TextureID = Shader.PropertyToID("_RockSpecular");
		public const string AO_Texture = "_AO";
		public static readonly int AO_TextureID = Shader.PropertyToID("_AO");
		public const string CoverAlbedo_Texture = "_CoverAlbedo";
		public static readonly int CoverAlbedo_TextureID = Shader.PropertyToID("_CoverAlbedo");
		public const string CoverNormal_Texture = "_CoverNormal";
		public static readonly int CoverNormal_TextureID = Shader.PropertyToID("_CoverNormal");
		public const string NormalCoverPower_Range = "_NormalCoverPower";
		public static readonly int NormalCoverPower_RangeID = Shader.PropertyToID("_NormalCoverPower");
		public const string CoverSpecular_Texture = "_CoverSpecular";
		public static readonly int CoverSpecular_TextureID = Shader.PropertyToID("_CoverSpecular");
		public const string CoverAmount_Range = "_CoverAmount";
		public static readonly int CoverAmount_RangeID = Shader.PropertyToID("_CoverAmount");
		public const string CoverbyAO_Range = "_CoverbyAO";
		public static readonly int CoverbyAO_RangeID = Shader.PropertyToID("_CoverbyAO");
		public const string DetailNormal_Texture = "_DetailNormal";
		public static readonly int DetailNormal_TextureID = Shader.PropertyToID("_DetailNormal");
		public const string NormalDetail_Range = "_NormalDetail";
		public static readonly int NormalDetail_RangeID = Shader.PropertyToID("_NormalDetail");
		public const string Detail_Texture = "_Detail";
		public static readonly int Detail_TextureID = Shader.PropertyToID("_Detail");
		public const string AODetail_Texture = "_AODetail";
		public static readonly int AODetail_TextureID = Shader.PropertyToID("_AODetail");
		public const string texcoord_Texture = "_texcoord";
		public static readonly int texcoord_TextureID = Shader.PropertyToID("_texcoord");
		public const string dirty_Float = "__dirty";
		public static readonly int dirty_FloatID = Shader.PropertyToID("__dirty");
		
	} // class MK4_Rock_cover
	
	public static class MK4_Trees_Bark_Blend
	{
		// Members
		public const string Albedo_Texture = "_Albedo";
		public static readonly int Albedo_TextureID = Shader.PropertyToID("_Albedo");
		public const string Normals_Texture = "_Normals";
		public static readonly int Normals_TextureID = Shader.PropertyToID("_Normals");
		public const string NormalScale_Range = "_NormalScale";
		public static readonly int NormalScale_RangeID = Shader.PropertyToID("_NormalScale");
		public const string Gloss_ao_mask_Texture = "_Gloss_ao_mask";
		public static readonly int Gloss_ao_mask_TextureID = Shader.PropertyToID("_Gloss_ao_mask");
		public const string Moss_Texture = "_Moss";
		public static readonly int Moss_TextureID = Shader.PropertyToID("_Moss");
		public const string MossNormal_Texture = "_MossNormal";
		public static readonly int MossNormal_TextureID = Shader.PropertyToID("_MossNormal");
		public const string MossNormalBlend_Range = "_MossNormalBlend";
		public static readonly int MossNormalBlend_RangeID = Shader.PropertyToID("_MossNormalBlend");
		public const string MossNormalScale_Range = "_MossNormalScale";
		public static readonly int MossNormalScale_RangeID = Shader.PropertyToID("_MossNormalScale");
		public const string texcoord_Texture = "_texcoord";
		public static readonly int texcoord_TextureID = Shader.PropertyToID("_texcoord");
		public const string dirty_Float = "__dirty";
		public static readonly int dirty_FloatID = Shader.PropertyToID("__dirty");
		
	} // class MK4_Trees_Bark_Blend
	
	public static class MK4_Trees_two_sided
	{
		// Members
		public const string Translucency_Range = "_Translucency";
		public static readonly int Translucency_RangeID = Shader.PropertyToID("_Translucency");
		public const string TransNormalDistortion_Range = "_TransNormalDistortion";
		public static readonly int TransNormalDistortion_RangeID = Shader.PropertyToID("_TransNormalDistortion");
		public const string TransScattering_Range = "_TransScattering";
		public static readonly int TransScattering_RangeID = Shader.PropertyToID("_TransScattering");
		public const string TransDirect_Range = "_TransDirect";
		public static readonly int TransDirect_RangeID = Shader.PropertyToID("_TransDirect");
		public const string TransAmbient_Range = "_TransAmbient";
		public static readonly int TransAmbient_RangeID = Shader.PropertyToID("_TransAmbient");
		public const string TransShadow_Range = "_TransShadow";
		public static readonly int TransShadow_RangeID = Shader.PropertyToID("_TransShadow");
		public const string Cutoff_Float = "_Cutoff";
		public static readonly int Cutoff_FloatID = Shader.PropertyToID("_Cutoff");
		public const string Color_Color = "_Color";
		public static readonly int Color_ColorID = Shader.PropertyToID("_Color");
		public const string Albedo_Texture = "_Albedo";
		public static readonly int Albedo_TextureID = Shader.PropertyToID("_Albedo");
		public const string NormalMap_Texture = "_NormalMap";
		public static readonly int NormalMap_TextureID = Shader.PropertyToID("_NormalMap");
		public const string NormalScale_Range = "_NormalScale";
		public static readonly int NormalScale_RangeID = Shader.PropertyToID("_NormalScale");
		public const string WindPower_Range = "_WindPower";
		public static readonly int WindPower_RangeID = Shader.PropertyToID("_WindPower");
		public const string WindScale_Range = "_WindScale";
		public static readonly int WindScale_RangeID = Shader.PropertyToID("_WindScale");
		public const string WindNoiseTiling_Range = "_WindNoiseTiling";
		public static readonly int WindNoiseTiling_RangeID = Shader.PropertyToID("_WindNoiseTiling");
		public const string WindSpeed_Range = "_WindSpeed";
		public static readonly int WindSpeed_RangeID = Shader.PropertyToID("_WindSpeed");
		public const string TransGlossAOWind_Texture = "_TransGlossAOWind";
		public static readonly int TransGlossAOWind_TextureID = Shader.PropertyToID("_TransGlossAOWind");
		public const string WindNoise_Texture = "_WindNoise";
		public static readonly int WindNoise_TextureID = Shader.PropertyToID("_WindNoise");
		public const string texcoord_Texture = "_texcoord";
		public static readonly int texcoord_TextureID = Shader.PropertyToID("_texcoord");
		public const string dirty_Float = "__dirty";
		public static readonly int dirty_FloatID = Shader.PropertyToID("__dirty");
		
	} // class MK4_Trees_two_sided
	
	public static class MK4_Trees_two_sided_LOD
	{
		// Members
		public const string Translucency_Range = "_Translucency";
		public static readonly int Translucency_RangeID = Shader.PropertyToID("_Translucency");
		public const string TransNormalDistortion_Range = "_TransNormalDistortion";
		public static readonly int TransNormalDistortion_RangeID = Shader.PropertyToID("_TransNormalDistortion");
		public const string TransScattering_Range = "_TransScattering";
		public static readonly int TransScattering_RangeID = Shader.PropertyToID("_TransScattering");
		public const string TransDirect_Range = "_TransDirect";
		public static readonly int TransDirect_RangeID = Shader.PropertyToID("_TransDirect");
		public const string TransAmbient_Range = "_TransAmbient";
		public static readonly int TransAmbient_RangeID = Shader.PropertyToID("_TransAmbient");
		public const string TransShadow_Range = "_TransShadow";
		public static readonly int TransShadow_RangeID = Shader.PropertyToID("_TransShadow");
		public const string Cutoff_Float = "_Cutoff";
		public static readonly int Cutoff_FloatID = Shader.PropertyToID("_Cutoff");
		public const string Albedo_Texture = "_Albedo";
		public static readonly int Albedo_TextureID = Shader.PropertyToID("_Albedo");
		public const string NormalMap_Texture = "_NormalMap";
		public static readonly int NormalMap_TextureID = Shader.PropertyToID("_NormalMap");
		public const string TransGlossAOWind_Texture = "_TransGlossAOWind";
		public static readonly int TransGlossAOWind_TextureID = Shader.PropertyToID("_TransGlossAOWind");
		public const string texcoord_Texture = "_texcoord";
		public static readonly int texcoord_TextureID = Shader.PropertyToID("_texcoord");
		public const string dirty_Float = "__dirty";
		public static readonly int dirty_FloatID = Shader.PropertyToID("__dirty");
		
	} // class MK4_Trees_two_sided_LOD
	
	public static class NatureManufactureShaders_AdvancedGrass
	{
		// Members
		public const string Cutoff_Float = "_Cutoff";
		public static readonly int Cutoff_FloatID = Shader.PropertyToID("_Cutoff");
		public const string MainTex_Texture = "_MainTex";
		public static readonly int MainTex_TextureID = Shader.PropertyToID("_MainTex");
		public const string BumpMap_Texture = "_BumpMap";
		public static readonly int BumpMap_TextureID = Shader.PropertyToID("_BumpMap");
		public const string BumpScale_Range = "_BumpScale";
		public static readonly int BumpScale_RangeID = Shader.PropertyToID("_BumpScale");
		public const string AmbientOcclusionG_Texture = "_AmbientOcclusionG";
		public static readonly int AmbientOcclusionG_TextureID = Shader.PropertyToID("_AmbientOcclusionG");
		public const string AmbientOcclusionPower_Range = "_AmbientOcclusionPower";
		public static readonly int AmbientOcclusionPower_RangeID = Shader.PropertyToID("_AmbientOcclusionPower");
		public const string WindNoisetilling_Vector = "_WindNoisetilling";
		public static readonly int WindNoisetilling_VectorID = Shader.PropertyToID("_WindNoisetilling");
		public const string Color_Vector = "_Color";
		public static readonly int Color_VectorID = Shader.PropertyToID("_Color");
		public const string Wind_VertexColorR_Float = "_Wind_VertexColorR";
		public static readonly int Wind_VertexColorR_FloatID = Shader.PropertyToID("_Wind_VertexColorR");
		public const string WindColorMultiply_Vector = "_WindColorMultiply";
		public static readonly int WindColorMultiply_VectorID = Shader.PropertyToID("_WindColorMultiply");
		public const string WindNoise_Texture = "_WindNoise";
		public static readonly int WindNoise_TextureID = Shader.PropertyToID("_WindNoise");
		public const string MaxWindbending_Range = "_MaxWindbending";
		public static readonly int MaxWindbending_RangeID = Shader.PropertyToID("_MaxWindbending");
		public const string NoiseWindSpeed_Range = "_NoiseWindSpeed";
		public static readonly int NoiseWindSpeed_RangeID = Shader.PropertyToID("_NoiseWindSpeed");
		public const string WindPowerDirectionX_Range = "_WindPowerDirectionX";
		public static readonly int WindPowerDirectionX_RangeID = Shader.PropertyToID("_WindPowerDirectionX");
		public const string WindPowerDirectionZ_Range = "_WindPowerDirectionZ";
		public static readonly int WindPowerDirectionZ_RangeID = Shader.PropertyToID("_WindPowerDirectionZ");
		public const string WindNoisePower_Range = "_WindNoisePower";
		public static readonly int WindNoisePower_RangeID = Shader.PropertyToID("_WindNoisePower");
		public const string texcoord_Texture = "_texcoord";
		public static readonly int texcoord_TextureID = Shader.PropertyToID("_texcoord");
		public const string dirty_Float = "__dirty";
		public static readonly int dirty_FloatID = Shader.PropertyToID("__dirty");
		
	} // class NatureManufactureShaders_AdvancedGrass
	
	public static class NatureManufactureShaders_AdvancedGrassSnow
	{
		// Members
		public const string Cutoff_Float = "_Cutoff";
		public static readonly int Cutoff_FloatID = Shader.PropertyToID("_Cutoff");
		public const string MainTex_Texture = "_MainTex";
		public static readonly int MainTex_TextureID = Shader.PropertyToID("_MainTex");
		public const string BumpMap_Texture = "_BumpMap";
		public static readonly int BumpMap_TextureID = Shader.PropertyToID("_BumpMap");
		public const string BumpScale_Range = "_BumpScale";
		public static readonly int BumpScale_RangeID = Shader.PropertyToID("_BumpScale");
		public const string AmbientOcclusionG_Texture = "_AmbientOcclusionG";
		public static readonly int AmbientOcclusionG_TextureID = Shader.PropertyToID("_AmbientOcclusionG");
		public const string AmbientOcclusionPower_Range = "_AmbientOcclusionPower";
		public static readonly int AmbientOcclusionPower_RangeID = Shader.PropertyToID("_AmbientOcclusionPower");
		public const string Snow_Amount_Range = "_Snow_Amount";
		public static readonly int Snow_Amount_RangeID = Shader.PropertyToID("_Snow_Amount");
		public const string SnowremovesAO_Float = "_SnowremovesAO";
		public static readonly int SnowremovesAO_FloatID = Shader.PropertyToID("_SnowremovesAO");
		public const string SnowAlbedoRGB_Texture = "_SnowAlbedoRGB";
		public static readonly int SnowAlbedoRGB_TextureID = Shader.PropertyToID("_SnowAlbedoRGB");
		public const string SnowColor_Color = "_SnowColor";
		public static readonly int SnowColor_ColorID = Shader.PropertyToID("_SnowColor");
		public const string WindNoisetilling_Vector = "_WindNoisetilling";
		public static readonly int WindNoisetilling_VectorID = Shader.PropertyToID("_WindNoisetilling");
		public const string Color_Vector = "_Color";
		public static readonly int Color_VectorID = Shader.PropertyToID("_Color");
		public const string Wind_VertexColorR_Float = "_Wind_VertexColorR";
		public static readonly int Wind_VertexColorR_FloatID = Shader.PropertyToID("_Wind_VertexColorR");
		public const string WindColorMultiply_Vector = "_WindColorMultiply";
		public static readonly int WindColorMultiply_VectorID = Shader.PropertyToID("_WindColorMultiply");
		public const string WindNoise_Texture = "_WindNoise";
		public static readonly int WindNoise_TextureID = Shader.PropertyToID("_WindNoise");
		public const string MaxWindbending_Range = "_MaxWindbending";
		public static readonly int MaxWindbending_RangeID = Shader.PropertyToID("_MaxWindbending");
		public const string NoiseWindSpeed_Range = "_NoiseWindSpeed";
		public static readonly int NoiseWindSpeed_RangeID = Shader.PropertyToID("_NoiseWindSpeed");
		public const string WindPowerDirectionX_Range = "_WindPowerDirectionX";
		public static readonly int WindPowerDirectionX_RangeID = Shader.PropertyToID("_WindPowerDirectionX");
		public const string WindPowerDirectionZ_Range = "_WindPowerDirectionZ";
		public static readonly int WindPowerDirectionZ_RangeID = Shader.PropertyToID("_WindPowerDirectionZ");
		public const string WindNoisePower_Range = "_WindNoisePower";
		public static readonly int WindNoisePower_RangeID = Shader.PropertyToID("_WindNoisePower");
		public const string MaxSnowCover_Range = "_MaxSnowCover";
		public static readonly int MaxSnowCover_RangeID = Shader.PropertyToID("_MaxSnowCover");
		public const string texcoord_Texture = "_texcoord";
		public static readonly int texcoord_TextureID = Shader.PropertyToID("_texcoord");
		public const string dirty_Float = "__dirty";
		public static readonly int dirty_FloatID = Shader.PropertyToID("__dirty");
		
	} // class NatureManufactureShaders_AdvancedGrassSnow
	
	public static class NatureManufactureShaders_CrossModelShader
	{
		// Members
		public const string Cutoff_Float = "_Cutoff";
		public static readonly int Cutoff_FloatID = Shader.PropertyToID("_Cutoff");
		public const string MainTex_Texture = "_MainTex";
		public static readonly int MainTex_TextureID = Shader.PropertyToID("_MainTex");
		public const string ColorAdjustment_Vector = "_ColorAdjustment";
		public static readonly int ColorAdjustment_VectorID = Shader.PropertyToID("_ColorAdjustment");
		public const string Smooothness_Float = "_Smooothness";
		public static readonly int Smooothness_FloatID = Shader.PropertyToID("_Smooothness");
		public const string AO_Float = "_AO";
		public static readonly int AO_FloatID = Shader.PropertyToID("_AO");
		public const string Color_Color = "_Color";
		public static readonly int Color_ColorID = Shader.PropertyToID("_Color");
		public const string BumpMap_Texture = "_BumpMap";
		public static readonly int BumpMap_TextureID = Shader.PropertyToID("_BumpMap");
		public const string BumpScale_Range = "_BumpScale";
		public static readonly int BumpScale_RangeID = Shader.PropertyToID("_BumpScale");
		public const string TranslucencyColor_Color = "_TranslucencyColor";
		public static readonly int TranslucencyColor_ColorID = Shader.PropertyToID("_TranslucencyColor");
		public const string Translucency_Range = "_Translucency";
		public static readonly int Translucency_RangeID = Shader.PropertyToID("_Translucency");
		public const string TransNormalDistortion_Range = "_TransNormalDistortion";
		public static readonly int TransNormalDistortion_RangeID = Shader.PropertyToID("_TransNormalDistortion");
		public const string TransScattering_Range = "_TransScattering";
		public static readonly int TransScattering_RangeID = Shader.PropertyToID("_TransScattering");
		public const string TransDirect_Range = "_TransDirect";
		public static readonly int TransDirect_RangeID = Shader.PropertyToID("_TransDirect");
		public const string TransAmbient_Range = "_TransAmbient";
		public static readonly int TransAmbient_RangeID = Shader.PropertyToID("_TransAmbient");
		public const string WindVertexColorMainR_Float = "_WindVertexColorMainR";
		public static readonly int WindVertexColorMainR_FloatID = Shader.PropertyToID("_WindVertexColorMainR");
		public const string TransShadow_Range = "_TransShadow";
		public static readonly int TransShadow_RangeID = Shader.PropertyToID("_TransShadow");
		public const string WindPower_Range = "_WindPower";
		public static readonly int WindPower_RangeID = Shader.PropertyToID("_WindPower");
		public const string WindPowerDirectionX_Range = "_WindPowerDirectionX";
		public static readonly int WindPowerDirectionX_RangeID = Shader.PropertyToID("_WindPowerDirectionX");
		public const string WindPowerDirectionZ_Range = "_WindPowerDirectionZ";
		public static readonly int WindPowerDirectionZ_RangeID = Shader.PropertyToID("_WindPowerDirectionZ");
		public const string texcoord_Texture = "_texcoord";
		public static readonly int texcoord_TextureID = Shader.PropertyToID("_texcoord");
		public const string dirty_Float = "__dirty";
		public static readonly int dirty_FloatID = Shader.PropertyToID("__dirty");
		
	} // class NatureManufactureShaders_CrossModelShader
	
	public static class NatureManufactureShaders_CrossModelShaderSnow
	{
		// Members
		public const string Cutoff_Float = "_Cutoff";
		public static readonly int Cutoff_FloatID = Shader.PropertyToID("_Cutoff");
		public const string Snow_Amount_Range = "_Snow_Amount";
		public static readonly int Snow_Amount_RangeID = Shader.PropertyToID("_Snow_Amount");
		public const string MainTex_Texture = "_MainTex";
		public static readonly int MainTex_TextureID = Shader.PropertyToID("_MainTex");
		public const string Smooothness_Float = "_Smooothness";
		public static readonly int Smooothness_FloatID = Shader.PropertyToID("_Smooothness");
		public const string AO_Float = "_AO";
		public static readonly int AO_FloatID = Shader.PropertyToID("_AO");
		public const string Color_Color = "_Color";
		public static readonly int Color_ColorID = Shader.PropertyToID("_Color");
		public const string ColorAdjustment_Vector = "_ColorAdjustment";
		public static readonly int ColorAdjustment_VectorID = Shader.PropertyToID("_ColorAdjustment");
		public const string BumpMap_Texture = "_BumpMap";
		public static readonly int BumpMap_TextureID = Shader.PropertyToID("_BumpMap");
		public const string BumpScale_Range = "_BumpScale";
		public static readonly int BumpScale_RangeID = Shader.PropertyToID("_BumpScale");
		public const string TranslucencyColor_Color = "_TranslucencyColor";
		public static readonly int TranslucencyColor_ColorID = Shader.PropertyToID("_TranslucencyColor");
		public const string SnowMaskR_Texture = "_SnowMaskR";
		public static readonly int SnowMaskR_TextureID = Shader.PropertyToID("_SnowMaskR");
		public const string SnowAlbedoRGB_Texture = "_SnowAlbedoRGB";
		public static readonly int SnowAlbedoRGB_TextureID = Shader.PropertyToID("_SnowAlbedoRGB");
		public const string SnowNormalRGB_Texture = "_SnowNormalRGB";
		public static readonly int SnowNormalRGB_TextureID = Shader.PropertyToID("_SnowNormalRGB");
		public const string SnowBrightnessReduction_Range = "_SnowBrightnessReduction";
		public static readonly int SnowBrightnessReduction_RangeID = Shader.PropertyToID("_SnowBrightnessReduction");
		public const string Translucency_Range = "_Translucency";
		public static readonly int Translucency_RangeID = Shader.PropertyToID("_Translucency");
		public const string TransNormalDistortion_Range = "_TransNormalDistortion";
		public static readonly int TransNormalDistortion_RangeID = Shader.PropertyToID("_TransNormalDistortion");
		public const string TransScattering_Range = "_TransScattering";
		public static readonly int TransScattering_RangeID = Shader.PropertyToID("_TransScattering");
		public const string TransDirect_Range = "_TransDirect";
		public static readonly int TransDirect_RangeID = Shader.PropertyToID("_TransDirect");
		public const string TransAmbient_Range = "_TransAmbient";
		public static readonly int TransAmbient_RangeID = Shader.PropertyToID("_TransAmbient");
		public const string WindVertexColorMainR_Float = "_WindVertexColorMainR";
		public static readonly int WindVertexColorMainR_FloatID = Shader.PropertyToID("_WindVertexColorMainR");
		public const string TransShadow_Range = "_TransShadow";
		public static readonly int TransShadow_RangeID = Shader.PropertyToID("_TransShadow");
		public const string WindPower_Range = "_WindPower";
		public static readonly int WindPower_RangeID = Shader.PropertyToID("_WindPower");
		public const string WindPowerDirectionX_Range = "_WindPowerDirectionX";
		public static readonly int WindPowerDirectionX_RangeID = Shader.PropertyToID("_WindPowerDirectionX");
		public const string WindPowerDirectionZ_Range = "_WindPowerDirectionZ";
		public static readonly int WindPowerDirectionZ_RangeID = Shader.PropertyToID("_WindPowerDirectionZ");
		public const string texcoord_Texture = "_texcoord";
		public static readonly int texcoord_TextureID = Shader.PropertyToID("_texcoord");
		public const string dirty_Float = "__dirty";
		public static readonly int dirty_FloatID = Shader.PropertyToID("__dirty");
		
	} // class NatureManufactureShaders_CrossModelShaderSnow
	
	public static class NatureManufactureShaders_Grass
	{
		// Members
		public const string dirty_Float = "__dirty";
		public static readonly int dirty_FloatID = Shader.PropertyToID("__dirty");
		public const string MaskClipValue_Float = "_MaskClipValue";
		public static readonly int MaskClipValue_FloatID = Shader.PropertyToID("_MaskClipValue");
		public const string AmbientOcclusionG_Texture = "_AmbientOcclusionG";
		public static readonly int AmbientOcclusionG_TextureID = Shader.PropertyToID("_AmbientOcclusionG");
		public const string NormalRGB_Texture = "_NormalRGB";
		public static readonly int NormalRGB_TextureID = Shader.PropertyToID("_NormalRGB");
		public const string AlbedoRGBAlphaA_Texture = "_AlbedoRGBAlphaA";
		public static readonly int AlbedoRGBAlphaA_TextureID = Shader.PropertyToID("_AlbedoRGBAlphaA");
		public const string Translucency_Range = "_Translucency";
		public static readonly int Translucency_RangeID = Shader.PropertyToID("_Translucency");
		public const string TransNormalDistortion_Range = "_TransNormalDistortion";
		public static readonly int TransNormalDistortion_RangeID = Shader.PropertyToID("_TransNormalDistortion");
		public const string TransScattering_Range = "_TransScattering";
		public static readonly int TransScattering_RangeID = Shader.PropertyToID("_TransScattering");
		public const string TransDirect_Range = "_TransDirect";
		public static readonly int TransDirect_RangeID = Shader.PropertyToID("_TransDirect");
		public const string TransAmbient_Range = "_TransAmbient";
		public static readonly int TransAmbient_RangeID = Shader.PropertyToID("_TransAmbient");
		public const string TransShadow_Range = "_TransShadow";
		public static readonly int TransShadow_RangeID = Shader.PropertyToID("_TransShadow");
		
	} // class NatureManufactureShaders_Grass
	
	public static class Hidden_TerrainEngine_Details_WavingDoublePass
	{
		// Members
		public const string WavingTint_Color = "_WavingTint";
		public static readonly int WavingTint_ColorID = Shader.PropertyToID("_WavingTint");
		public const string MainTex_Texture = "_MainTex";
		public static readonly int MainTex_TextureID = Shader.PropertyToID("_MainTex");
		public const string WaveAndDistance_Vector = "_WaveAndDistance";
		public static readonly int WaveAndDistance_VectorID = Shader.PropertyToID("_WaveAndDistance");
		public const string Cutoff_Float = "_Cutoff";
		public static readonly int Cutoff_FloatID = Shader.PropertyToID("_Cutoff");
		
	} // class Hidden_TerrainEngine_Details_WavingDoublePass
	
	public static class Hidden_TerrainEngine_Details_BillboardWavingDoublePass
	{
		// Members
		public const string WavingTint_Color = "_WavingTint";
		public static readonly int WavingTint_ColorID = Shader.PropertyToID("_WavingTint");
		public const string MainTex_Texture = "_MainTex";
		public static readonly int MainTex_TextureID = Shader.PropertyToID("_MainTex");
		public const string WaveAndDistance_Vector = "_WaveAndDistance";
		public static readonly int WaveAndDistance_VectorID = Shader.PropertyToID("_WaveAndDistance");
		public const string Cutoff_Float = "_Cutoff";
		public static readonly int Cutoff_FloatID = Shader.PropertyToID("_Cutoff");
		
	} // class Hidden_TerrainEngine_Details_BillboardWavingDoublePass
	
	public static class NatureManufactureShaders_StandardMetalicSnow
	{
		// Members
		public const string MainTex_Texture = "_MainTex";
		public static readonly int MainTex_TextureID = Shader.PropertyToID("_MainTex");
		public const string Color_Color = "_Color";
		public static readonly int Color_ColorID = Shader.PropertyToID("_Color");
		public const string BumpMap_Texture = "_BumpMap";
		public static readonly int BumpMap_TextureID = Shader.PropertyToID("_BumpMap");
		public const string BumpScale_Range = "_BumpScale";
		public static readonly int BumpScale_RangeID = Shader.PropertyToID("_BumpScale");
		public const string MetalicRAmbientOcclusionGSmoothnessA_Texture = "_MetalicRAmbientOcclusionGSmoothnessA";
		public static readonly int MetalicRAmbientOcclusionGSmoothnessA_TextureID = Shader.PropertyToID("_MetalicRAmbientOcclusionGSmoothnessA");
		public const string MetalicPower_Range = "_MetalicPower";
		public static readonly int MetalicPower_RangeID = Shader.PropertyToID("_MetalicPower");
		public const string AmbientOcclusionPower_Range = "_AmbientOcclusionPower";
		public static readonly int AmbientOcclusionPower_RangeID = Shader.PropertyToID("_AmbientOcclusionPower");
		public const string SmothnessPower_Range = "_SmothnessPower";
		public static readonly int SmothnessPower_RangeID = Shader.PropertyToID("_SmothnessPower");
		public const string DetailAlbedoMap_Texture = "_DetailAlbedoMap";
		public static readonly int DetailAlbedoMap_TextureID = Shader.PropertyToID("_DetailAlbedoMap");
		public const string DetailMapTiling_Range = "_DetailMapTiling";
		public static readonly int DetailMapTiling_RangeID = Shader.PropertyToID("_DetailMapTiling");
		public const string DetailNormalMap_Texture = "_DetailNormalMap";
		public static readonly int DetailNormalMap_TextureID = Shader.PropertyToID("_DetailNormalMap");
		public const string DetailNormalMapScale_Range = "_DetailNormalMapScale";
		public static readonly int DetailNormalMapScale_RangeID = Shader.PropertyToID("_DetailNormalMapScale");
		public const string Snow_Amount_Range = "_Snow_Amount";
		public static readonly int Snow_Amount_RangeID = Shader.PropertyToID("_Snow_Amount");
		public const string TriplanarCoverFalloff_Range = "_TriplanarCoverFalloff";
		public static readonly int TriplanarCoverFalloff_RangeID = Shader.PropertyToID("_TriplanarCoverFalloff");
		public const string SnowAlbedoRGB_Texture = "_SnowAlbedoRGB";
		public static readonly int SnowAlbedoRGB_TextureID = Shader.PropertyToID("_SnowAlbedoRGB");
		public const string SnowTiling_Range = "_SnowTiling";
		public static readonly int SnowTiling_RangeID = Shader.PropertyToID("_SnowTiling");
		public const string SnowAlbedoColor_Color = "_SnowAlbedoColor";
		public static readonly int SnowAlbedoColor_ColorID = Shader.PropertyToID("_SnowAlbedoColor");
		public const string SnowNormalRGB_Texture = "_SnowNormalRGB";
		public static readonly int SnowNormalRGB_TextureID = Shader.PropertyToID("_SnowNormalRGB");
		public const string SnowMetalicRAmbientOcclusionGSmothnessA_Texture = "_SnowMetalicRAmbientOcclusionGSmothnessA";
		public static readonly int SnowMetalicRAmbientOcclusionGSmothnessA_TextureID = Shader.PropertyToID("_SnowMetalicRAmbientOcclusionGSmothnessA");
		public const string SnowNormalScale_Range = "_SnowNormalScale";
		public static readonly int SnowNormalScale_RangeID = Shader.PropertyToID("_SnowNormalScale");
		public const string SnowNormalCoverHardness_Range = "_SnowNormalCoverHardness";
		public static readonly int SnowNormalCoverHardness_RangeID = Shader.PropertyToID("_SnowNormalCoverHardness");
		public const string SnowMetalicPower_Range = "_SnowMetalicPower";
		public static readonly int SnowMetalicPower_RangeID = Shader.PropertyToID("_SnowMetalicPower");
		public const string SnowAmbientOcclusionPower_Range = "_SnowAmbientOcclusionPower";
		public static readonly int SnowAmbientOcclusionPower_RangeID = Shader.PropertyToID("_SnowAmbientOcclusionPower");
		public const string SnowSmoothnessPower_Range = "_SnowSmoothnessPower";
		public static readonly int SnowSmoothnessPower_RangeID = Shader.PropertyToID("_SnowSmoothnessPower");
		public const string SnowMaxAngle_Range = "_SnowMaxAngle";
		public static readonly int SnowMaxAngle_RangeID = Shader.PropertyToID("_SnowMaxAngle");
		public const string SnowHardness_Range = "_SnowHardness";
		public static readonly int SnowHardness_RangeID = Shader.PropertyToID("_SnowHardness");
		public const string Snow_Min_Height_Range = "_Snow_Min_Height";
		public static readonly int Snow_Min_Height_RangeID = Shader.PropertyToID("_Snow_Min_Height");
		public const string Snow_Min_Height_Blending_Range = "_Snow_Min_Height_Blending";
		public static readonly int Snow_Min_Height_Blending_RangeID = Shader.PropertyToID("_Snow_Min_Height_Blending");
		public const string SnowHeightG_Texture = "_SnowHeightG";
		public static readonly int SnowHeightG_TextureID = Shader.PropertyToID("_SnowHeightG");
		public const string SnowHeightSharpness_Range = "_SnowHeightSharpness";
		public static readonly int SnowHeightSharpness_RangeID = Shader.PropertyToID("_SnowHeightSharpness");
		public const string texcoord_Texture = "_texcoord";
		public static readonly int texcoord_TextureID = Shader.PropertyToID("_texcoord");
		public const string dirty_Float = "__dirty";
		public static readonly int dirty_FloatID = Shader.PropertyToID("__dirty");
		
	} // class NatureManufactureShaders_StandardMetalicSnow
	
	public static class NatureManufactureShaders_StandardMetalicUVFree
	{
		// Members
		public const string Color_Color = "_Color";
		public static readonly int Color_ColorID = Shader.PropertyToID("_Color");
		public const string Tiling_Range = "_Tiling";
		public static readonly int Tiling_RangeID = Shader.PropertyToID("_Tiling");
		public const string BumpMap_Texture = "_BumpMap";
		public static readonly int BumpMap_TextureID = Shader.PropertyToID("_BumpMap");
		public const string BumpScale_Range = "_BumpScale";
		public static readonly int BumpScale_RangeID = Shader.PropertyToID("_BumpScale");
		public const string ShapeAmbientOcclusionG_Texture = "_ShapeAmbientOcclusionG";
		public static readonly int ShapeAmbientOcclusionG_TextureID = Shader.PropertyToID("_ShapeAmbientOcclusionG");
		public const string ShapeAmbientOcclusionPower_Range = "_ShapeAmbientOcclusionPower";
		public static readonly int ShapeAmbientOcclusionPower_RangeID = Shader.PropertyToID("_ShapeAmbientOcclusionPower");
		public const string TriplanarFallOff_Range = "_TriplanarFallOff";
		public static readonly int TriplanarFallOff_RangeID = Shader.PropertyToID("_TriplanarFallOff");
		public const string DetailAlbedoMap_Texture = "_DetailAlbedoMap";
		public static readonly int DetailAlbedoMap_TextureID = Shader.PropertyToID("_DetailAlbedoMap");
		public const string DetailNormalMap_Texture = "_DetailNormalMap";
		public static readonly int DetailNormalMap_TextureID = Shader.PropertyToID("_DetailNormalMap");
		public const string DetailNormalMapScale_Range = "_DetailNormalMapScale";
		public static readonly int DetailNormalMapScale_RangeID = Shader.PropertyToID("_DetailNormalMapScale");
		public const string MetalicRAmbientOcclusionGSmoothnessA_Texture = "_MetalicRAmbientOcclusionGSmoothnessA";
		public static readonly int MetalicRAmbientOcclusionGSmoothnessA_TextureID = Shader.PropertyToID("_MetalicRAmbientOcclusionGSmoothnessA");
		public const string MetalicPower_Range = "_MetalicPower";
		public static readonly int MetalicPower_RangeID = Shader.PropertyToID("_MetalicPower");
		public const string AmbientOcclusionPower_Range = "_AmbientOcclusionPower";
		public static readonly int AmbientOcclusionPower_RangeID = Shader.PropertyToID("_AmbientOcclusionPower");
		public const string SmoothnessPower_Range = "_SmoothnessPower";
		public static readonly int SmoothnessPower_RangeID = Shader.PropertyToID("_SmoothnessPower");
		public const string texcoord_Texture = "_texcoord";
		public static readonly int texcoord_TextureID = Shader.PropertyToID("_texcoord");
		public const string dirty_Float = "__dirty";
		public static readonly int dirty_FloatID = Shader.PropertyToID("__dirty");
		
	} // class NatureManufactureShaders_StandardMetalicUVFree
	
	public static class NatureManufactureShaders_StandardMetalicUVFreeFaces
	{
		// Members
		public const string TopAlbedo_Texture = "_TopAlbedo";
		public static readonly int TopAlbedo_TextureID = Shader.PropertyToID("_TopAlbedo");
		public const string TopNormal_Texture = "_TopNormal";
		public static readonly int TopNormal_TextureID = Shader.PropertyToID("_TopNormal");
		public const string TopMetalicRAmbientOcclusionGSmoothnessA_Texture = "_TopMetalicRAmbientOcclusionGSmoothnessA";
		public static readonly int TopMetalicRAmbientOcclusionGSmoothnessA_TextureID = Shader.PropertyToID("_TopMetalicRAmbientOcclusionGSmoothnessA");
		public const string BottomAlbedo_Texture = "_BottomAlbedo";
		public static readonly int BottomAlbedo_TextureID = Shader.PropertyToID("_BottomAlbedo");
		public const string BottomNormal_Texture = "_BottomNormal";
		public static readonly int BottomNormal_TextureID = Shader.PropertyToID("_BottomNormal");
		public const string BottomMetalicRAmbientOcclusionGSmoothnessA_Texture = "_BottomMetalicRAmbientOcclusionGSmoothnessA";
		public static readonly int BottomMetalicRAmbientOcclusionGSmoothnessA_TextureID = Shader.PropertyToID("_BottomMetalicRAmbientOcclusionGSmoothnessA");
		public const string MetalicPower_Range = "_MetalicPower";
		public static readonly int MetalicPower_RangeID = Shader.PropertyToID("_MetalicPower");
		public const string AmbientOcclusionPower_Range = "_AmbientOcclusionPower";
		public static readonly int AmbientOcclusionPower_RangeID = Shader.PropertyToID("_AmbientOcclusionPower");
		public const string SmothnessPower_Range = "_SmothnessPower";
		public static readonly int SmothnessPower_RangeID = Shader.PropertyToID("_SmothnessPower");
		public const string Tiling_Range = "_Tiling";
		public static readonly int Tiling_RangeID = Shader.PropertyToID("_Tiling");
		public const string Falloff_Range = "_Falloff";
		public static readonly int Falloff_RangeID = Shader.PropertyToID("_Falloff");
		public const string dirty_Float = "__dirty";
		public static readonly int dirty_FloatID = Shader.PropertyToID("__dirty");
		
	} // class NatureManufactureShaders_StandardMetalicUVFreeFaces
	
	public static class NatureManufactureShaders_StandardMetalicUVFreeSnow
	{
		// Members
		public const string Color_Color = "_Color";
		public static readonly int Color_ColorID = Shader.PropertyToID("_Color");
		public const string DetailAlbedoMap_Texture = "_DetailAlbedoMap";
		public static readonly int DetailAlbedoMap_TextureID = Shader.PropertyToID("_DetailAlbedoMap");
		public const string Tiling_Range = "_Tiling";
		public static readonly int Tiling_RangeID = Shader.PropertyToID("_Tiling");
		public const string SnowMetalicRAmbientOcclusionGSmoothnessA_Texture = "_SnowMetalicRAmbientOcclusionGSmoothnessA";
		public static readonly int SnowMetalicRAmbientOcclusionGSmoothnessA_TextureID = Shader.PropertyToID("_SnowMetalicRAmbientOcclusionGSmoothnessA");
		public const string TriplanarFalloff_Range = "_TriplanarFalloff";
		public static readonly int TriplanarFalloff_RangeID = Shader.PropertyToID("_TriplanarFalloff");
		public const string DetailNormalMap_Texture = "_DetailNormalMap";
		public static readonly int DetailNormalMap_TextureID = Shader.PropertyToID("_DetailNormalMap");
		public const string DetailNormalMapScale_Range = "_DetailNormalMapScale";
		public static readonly int DetailNormalMapScale_RangeID = Shader.PropertyToID("_DetailNormalMapScale");
		public const string BumpMap_Texture = "_BumpMap";
		public static readonly int BumpMap_TextureID = Shader.PropertyToID("_BumpMap");
		public const string BumpScale_Range = "_BumpScale";
		public static readonly int BumpScale_RangeID = Shader.PropertyToID("_BumpScale");
		public const string ShapeAmbientOcclusionG_Texture = "_ShapeAmbientOcclusionG";
		public static readonly int ShapeAmbientOcclusionG_TextureID = Shader.PropertyToID("_ShapeAmbientOcclusionG");
		public const string ShapeAmbientOcclusionPower_Range = "_ShapeAmbientOcclusionPower";
		public static readonly int ShapeAmbientOcclusionPower_RangeID = Shader.PropertyToID("_ShapeAmbientOcclusionPower");
		public const string MetalicRAmbientOcclusionGSmoothnessA_Texture = "_MetalicRAmbientOcclusionGSmoothnessA";
		public static readonly int MetalicRAmbientOcclusionGSmoothnessA_TextureID = Shader.PropertyToID("_MetalicRAmbientOcclusionGSmoothnessA");
		public const string MetalicPower_Range = "_MetalicPower";
		public static readonly int MetalicPower_RangeID = Shader.PropertyToID("_MetalicPower");
		public const string AmbientOcclusionPower_Range = "_AmbientOcclusionPower";
		public static readonly int AmbientOcclusionPower_RangeID = Shader.PropertyToID("_AmbientOcclusionPower");
		public const string SmoothnessPower_Range = "_SmoothnessPower";
		public static readonly int SmoothnessPower_RangeID = Shader.PropertyToID("_SmoothnessPower");
		public const string SnowAlbedoRGB_Texture = "_SnowAlbedoRGB";
		public static readonly int SnowAlbedoRGB_TextureID = Shader.PropertyToID("_SnowAlbedoRGB");
		public const string SnowAlbedoColor_Color = "_SnowAlbedoColor";
		public static readonly int SnowAlbedoColor_ColorID = Shader.PropertyToID("_SnowAlbedoColor");
		public const string SnowTiling_Range = "_SnowTiling";
		public static readonly int SnowTiling_RangeID = Shader.PropertyToID("_SnowTiling");
		public const string SnowTriplanarFalloff_Range = "_SnowTriplanarFalloff";
		public static readonly int SnowTriplanarFalloff_RangeID = Shader.PropertyToID("_SnowTriplanarFalloff");
		public const string SnowNormalRGB_Texture = "_SnowNormalRGB";
		public static readonly int SnowNormalRGB_TextureID = Shader.PropertyToID("_SnowNormalRGB");
		public const string SnowNormalScale_Range = "_SnowNormalScale";
		public static readonly int SnowNormalScale_RangeID = Shader.PropertyToID("_SnowNormalScale");
		public const string SnowMetalicPower_Range = "_SnowMetalicPower";
		public static readonly int SnowMetalicPower_RangeID = Shader.PropertyToID("_SnowMetalicPower");
		public const string SnowAmbientOcclusionPower_Range = "_SnowAmbientOcclusionPower";
		public static readonly int SnowAmbientOcclusionPower_RangeID = Shader.PropertyToID("_SnowAmbientOcclusionPower");
		public const string SnowSmoothnessPower_Range = "_SnowSmoothnessPower";
		public static readonly int SnowSmoothnessPower_RangeID = Shader.PropertyToID("_SnowSmoothnessPower");
		public const string Snow_Amount_Range = "_Snow_Amount";
		public static readonly int Snow_Amount_RangeID = Shader.PropertyToID("_Snow_Amount");
		public const string SnowHardness_Range = "_SnowHardness";
		public static readonly int SnowHardness_RangeID = Shader.PropertyToID("_SnowHardness");
		public const string SnowMaxAngle_Range = "_SnowMaxAngle";
		public static readonly int SnowMaxAngle_RangeID = Shader.PropertyToID("_SnowMaxAngle");
		public const string Snow_Min_Height_Range = "_Snow_Min_Height";
		public static readonly int Snow_Min_Height_RangeID = Shader.PropertyToID("_Snow_Min_Height");
		public const string Snow_Min_Height_Blending_Range = "_Snow_Min_Height_Blending";
		public static readonly int Snow_Min_Height_Blending_RangeID = Shader.PropertyToID("_Snow_Min_Height_Blending");
		public const string texcoord_Texture = "_texcoord";
		public static readonly int texcoord_TextureID = Shader.PropertyToID("_texcoord");
		public const string dirty_Float = "__dirty";
		public static readonly int dirty_FloatID = Shader.PropertyToID("__dirty");
		
	} // class NatureManufactureShaders_StandardMetalicUVFreeSnow
	
	public static class NatureManufactureShaders_StandardSpecularSnow
	{
		// Members
		public const string MainTex_Texture = "_MainTex";
		public static readonly int MainTex_TextureID = Shader.PropertyToID("_MainTex");
		public const string Color_Color = "_Color";
		public static readonly int Color_ColorID = Shader.PropertyToID("_Color");
		public const string BumpMap_Texture = "_BumpMap";
		public static readonly int BumpMap_TextureID = Shader.PropertyToID("_BumpMap");
		public const string BumpScale_Range = "_BumpScale";
		public static readonly int BumpScale_RangeID = Shader.PropertyToID("_BumpScale");
		public const string SpecularRGBSmoothnesA_Texture = "_SpecularRGBSmoothnesA";
		public static readonly int SpecularRGBSmoothnesA_TextureID = Shader.PropertyToID("_SpecularRGBSmoothnesA");
		public const string SpecularPower_Range = "_SpecularPower";
		public static readonly int SpecularPower_RangeID = Shader.PropertyToID("_SpecularPower");
		public const string SmoothnessPower_Range = "_SmoothnessPower";
		public static readonly int SmoothnessPower_RangeID = Shader.PropertyToID("_SmoothnessPower");
		public const string AmbientOcclusionG_Texture = "_AmbientOcclusionG";
		public static readonly int AmbientOcclusionG_TextureID = Shader.PropertyToID("_AmbientOcclusionG");
		public const string AmbientOcclusionPower_Range = "_AmbientOcclusionPower";
		public static readonly int AmbientOcclusionPower_RangeID = Shader.PropertyToID("_AmbientOcclusionPower");
		public const string DetailAlbedoMap_Texture = "_DetailAlbedoMap";
		public static readonly int DetailAlbedoMap_TextureID = Shader.PropertyToID("_DetailAlbedoMap");
		public const string DetailMapTiling_Range = "_DetailMapTiling";
		public static readonly int DetailMapTiling_RangeID = Shader.PropertyToID("_DetailMapTiling");
		public const string DetailNormalMapScale_Range = "_DetailNormalMapScale";
		public static readonly int DetailNormalMapScale_RangeID = Shader.PropertyToID("_DetailNormalMapScale");
		public const string DetailNormalMap_Texture = "_DetailNormalMap";
		public static readonly int DetailNormalMap_TextureID = Shader.PropertyToID("_DetailNormalMap");
		public const string Snow_Amount_Range = "_Snow_Amount";
		public static readonly int Snow_Amount_RangeID = Shader.PropertyToID("_Snow_Amount");
		public const string TriplanarCoverFalloff_Range = "_TriplanarCoverFalloff";
		public static readonly int TriplanarCoverFalloff_RangeID = Shader.PropertyToID("_TriplanarCoverFalloff");
		public const string SnowAlbedoRGB_Texture = "_SnowAlbedoRGB";
		public static readonly int SnowAlbedoRGB_TextureID = Shader.PropertyToID("_SnowAlbedoRGB");
		public const string SnowTiling_Range = "_SnowTiling";
		public static readonly int SnowTiling_RangeID = Shader.PropertyToID("_SnowTiling");
		public const string SnowAlbedoColor_Color = "_SnowAlbedoColor";
		public static readonly int SnowAlbedoColor_ColorID = Shader.PropertyToID("_SnowAlbedoColor");
		public const string SnowNormalRGB_Texture = "_SnowNormalRGB";
		public static readonly int SnowNormalRGB_TextureID = Shader.PropertyToID("_SnowNormalRGB");
		public const string SnowNormalScale_Range = "_SnowNormalScale";
		public static readonly int SnowNormalScale_RangeID = Shader.PropertyToID("_SnowNormalScale");
		public const string SnowNormalCoverHardness_Range = "_SnowNormalCoverHardness";
		public static readonly int SnowNormalCoverHardness_RangeID = Shader.PropertyToID("_SnowNormalCoverHardness");
		public const string Snow_SpecularRGBSmoothnessA_Texture = "_Snow_SpecularRGBSmoothnessA";
		public static readonly int Snow_SpecularRGBSmoothnessA_TextureID = Shader.PropertyToID("_Snow_SpecularRGBSmoothnessA");
		public const string SnowSpecularPower_Range = "_SnowSpecularPower";
		public static readonly int SnowSpecularPower_RangeID = Shader.PropertyToID("_SnowSpecularPower");
		public const string SnowSmoothnessPower_Range = "_SnowSmoothnessPower";
		public static readonly int SnowSmoothnessPower_RangeID = Shader.PropertyToID("_SnowSmoothnessPower");
		public const string SnowAmbientOcclusionG_Texture = "_SnowAmbientOcclusionG";
		public static readonly int SnowAmbientOcclusionG_TextureID = Shader.PropertyToID("_SnowAmbientOcclusionG");
		public const string SnowAmbientOcclusionPower_Range = "_SnowAmbientOcclusionPower";
		public static readonly int SnowAmbientOcclusionPower_RangeID = Shader.PropertyToID("_SnowAmbientOcclusionPower");
		public const string SnowMaxAngle_Range = "_SnowMaxAngle";
		public static readonly int SnowMaxAngle_RangeID = Shader.PropertyToID("_SnowMaxAngle");
		public const string SnowHardness_Range = "_SnowHardness";
		public static readonly int SnowHardness_RangeID = Shader.PropertyToID("_SnowHardness");
		public const string Snow_Min_Height_Range = "_Snow_Min_Height";
		public static readonly int Snow_Min_Height_RangeID = Shader.PropertyToID("_Snow_Min_Height");
		public const string SnowHeightG_Texture = "_SnowHeightG";
		public static readonly int SnowHeightG_TextureID = Shader.PropertyToID("_SnowHeightG");
		public const string SnowHeightSharpness_Range = "_SnowHeightSharpness";
		public static readonly int SnowHeightSharpness_RangeID = Shader.PropertyToID("_SnowHeightSharpness");
		public const string Snow_Min_Height_Blending_Range = "_Snow_Min_Height_Blending";
		public static readonly int Snow_Min_Height_Blending_RangeID = Shader.PropertyToID("_Snow_Min_Height_Blending");
		public const string texcoord_Texture = "_texcoord";
		public static readonly int texcoord_TextureID = Shader.PropertyToID("_texcoord");
		public const string dirty_Float = "__dirty";
		public static readonly int dirty_FloatID = Shader.PropertyToID("__dirty");
		
	} // class NatureManufactureShaders_StandardSpecularSnow
	
	public static class NatureManufactureShaders_StandardSpecularUVFree
	{
		// Members
		public const string DetailNormalMap_Texture = "_DetailNormalMap";
		public static readonly int DetailNormalMap_TextureID = Shader.PropertyToID("_DetailNormalMap");
		public const string SpecularRGBSmoothnessA_Texture = "_SpecularRGBSmoothnessA";
		public static readonly int SpecularRGBSmoothnessA_TextureID = Shader.PropertyToID("_SpecularRGBSmoothnessA");
		public const string AmbientOcclusionG_Texture = "_AmbientOcclusionG";
		public static readonly int AmbientOcclusionG_TextureID = Shader.PropertyToID("_AmbientOcclusionG");
		public const string TopTexture0_Texture = "_TopTexture0";
		public static readonly int TopTexture0_TextureID = Shader.PropertyToID("_TopTexture0");
		public const string Color_Color = "_Color";
		public static readonly int Color_ColorID = Shader.PropertyToID("_Color");
		public const string TriplanarFalloff_Range = "_TriplanarFalloff";
		public static readonly int TriplanarFalloff_RangeID = Shader.PropertyToID("_TriplanarFalloff");
		public const string Tiling_Range = "_Tiling";
		public static readonly int Tiling_RangeID = Shader.PropertyToID("_Tiling");
		public const string DetailNormalMapScale_Range = "_DetailNormalMapScale";
		public static readonly int DetailNormalMapScale_RangeID = Shader.PropertyToID("_DetailNormalMapScale");
		public const string SpecularPower_Range = "_SpecularPower";
		public static readonly int SpecularPower_RangeID = Shader.PropertyToID("_SpecularPower");
		public const string Smoothness_Range = "_Smoothness";
		public static readonly int Smoothness_RangeID = Shader.PropertyToID("_Smoothness");
		public const string AmbientOcclusionPower_Range = "_AmbientOcclusionPower";
		public static readonly int AmbientOcclusionPower_RangeID = Shader.PropertyToID("_AmbientOcclusionPower");
		public const string BumpMap_Texture = "_BumpMap";
		public static readonly int BumpMap_TextureID = Shader.PropertyToID("_BumpMap");
		public const string BumpScale_Range = "_BumpScale";
		public static readonly int BumpScale_RangeID = Shader.PropertyToID("_BumpScale");
		public const string ShapeAmbientOcclusionG_Texture = "_ShapeAmbientOcclusionG";
		public static readonly int ShapeAmbientOcclusionG_TextureID = Shader.PropertyToID("_ShapeAmbientOcclusionG");
		public const string ShapeAmbientOcclusionPower_Range = "_ShapeAmbientOcclusionPower";
		public static readonly int ShapeAmbientOcclusionPower_RangeID = Shader.PropertyToID("_ShapeAmbientOcclusionPower");
		public const string texcoord_Texture = "_texcoord";
		public static readonly int texcoord_TextureID = Shader.PropertyToID("_texcoord");
		public const string dirty_Float = "__dirty";
		public static readonly int dirty_FloatID = Shader.PropertyToID("__dirty");
		
	} // class NatureManufactureShaders_StandardSpecularUVFree
	
	public static class NatureManufactureShaders_StandardSpecularUVFreeSnow
	{
		// Members
		public const string DetailAlbedoMap_Texture = "_DetailAlbedoMap";
		public static readonly int DetailAlbedoMap_TextureID = Shader.PropertyToID("_DetailAlbedoMap");
		public const string TopTexture0_Texture = "_TopTexture0";
		public static readonly int TopTexture0_TextureID = Shader.PropertyToID("_TopTexture0");
		public const string SnowAmbientOcclusionG_Texture = "_SnowAmbientOcclusionG";
		public static readonly int SnowAmbientOcclusionG_TextureID = Shader.PropertyToID("_SnowAmbientOcclusionG");
		public const string AmbientOcclusionG_Texture = "_AmbientOcclusionG";
		public static readonly int AmbientOcclusionG_TextureID = Shader.PropertyToID("_AmbientOcclusionG");
		public const string AlbedoColor_Color = "_AlbedoColor";
		public static readonly int AlbedoColor_ColorID = Shader.PropertyToID("_AlbedoColor");
		public const string Tiling_Range = "_Tiling";
		public static readonly int Tiling_RangeID = Shader.PropertyToID("_Tiling");
		public const string TriplanarFalloff_Range = "_TriplanarFalloff";
		public static readonly int TriplanarFalloff_RangeID = Shader.PropertyToID("_TriplanarFalloff");
		public const string DetailNormalMapScale_Range = "_DetailNormalMapScale";
		public static readonly int DetailNormalMapScale_RangeID = Shader.PropertyToID("_DetailNormalMapScale");
		public const string SpecularPower_Range = "_SpecularPower";
		public static readonly int SpecularPower_RangeID = Shader.PropertyToID("_SpecularPower");
		public const string SmoothnessPower_Range = "_SmoothnessPower";
		public static readonly int SmoothnessPower_RangeID = Shader.PropertyToID("_SmoothnessPower");
		public const string AmbientOcclusionPower_Range = "_AmbientOcclusionPower";
		public static readonly int AmbientOcclusionPower_RangeID = Shader.PropertyToID("_AmbientOcclusionPower");
		public const string BumpMap_Texture = "_BumpMap";
		public static readonly int BumpMap_TextureID = Shader.PropertyToID("_BumpMap");
		public const string BumpScale_Range = "_BumpScale";
		public static readonly int BumpScale_RangeID = Shader.PropertyToID("_BumpScale");
		public const string ShapeAmbientOcclusionG_Texture = "_ShapeAmbientOcclusionG";
		public static readonly int ShapeAmbientOcclusionG_TextureID = Shader.PropertyToID("_ShapeAmbientOcclusionG");
		public const string ShapeAmbientOcclusionPower_Range = "_ShapeAmbientOcclusionPower";
		public static readonly int ShapeAmbientOcclusionPower_RangeID = Shader.PropertyToID("_ShapeAmbientOcclusionPower");
		public const string SnowAlbedoRGB_Texture = "_SnowAlbedoRGB";
		public static readonly int SnowAlbedoRGB_TextureID = Shader.PropertyToID("_SnowAlbedoRGB");
		public const string SnowTiling_Range = "_SnowTiling";
		public static readonly int SnowTiling_RangeID = Shader.PropertyToID("_SnowTiling");
		public const string SnowAlbedoColor_Color = "_SnowAlbedoColor";
		public static readonly int SnowAlbedoColor_ColorID = Shader.PropertyToID("_SnowAlbedoColor");
		public const string SnowTriplanarFalloff_Range = "_SnowTriplanarFalloff";
		public static readonly int SnowTriplanarFalloff_RangeID = Shader.PropertyToID("_SnowTriplanarFalloff");
		public const string SnowNormalRGB_Texture = "_SnowNormalRGB";
		public static readonly int SnowNormalRGB_TextureID = Shader.PropertyToID("_SnowNormalRGB");
		public const string SnowNormalScale_Range = "_SnowNormalScale";
		public static readonly int SnowNormalScale_RangeID = Shader.PropertyToID("_SnowNormalScale");
		public const string SnowSpecularRGBSmoothnessA_Texture = "_SnowSpecularRGBSmoothnessA";
		public static readonly int SnowSpecularRGBSmoothnessA_TextureID = Shader.PropertyToID("_SnowSpecularRGBSmoothnessA");
		public const string SnowSpecularPower_Range = "_SnowSpecularPower";
		public static readonly int SnowSpecularPower_RangeID = Shader.PropertyToID("_SnowSpecularPower");
		public const string SnowSmoothnessPower_Range = "_SnowSmoothnessPower";
		public static readonly int SnowSmoothnessPower_RangeID = Shader.PropertyToID("_SnowSmoothnessPower");
		public const string SnowAmbientOcclusionPower_Range = "_SnowAmbientOcclusionPower";
		public static readonly int SnowAmbientOcclusionPower_RangeID = Shader.PropertyToID("_SnowAmbientOcclusionPower");
		public const string Snow_Amount_Range = "_Snow_Amount";
		public static readonly int Snow_Amount_RangeID = Shader.PropertyToID("_Snow_Amount");
		public const string SnowMaxAngle_Float = "_SnowMaxAngle";
		public static readonly int SnowMaxAngle_FloatID = Shader.PropertyToID("_SnowMaxAngle");
		public const string SnowHardness_Float = "_SnowHardness";
		public static readonly int SnowHardness_FloatID = Shader.PropertyToID("_SnowHardness");
		public const string Snow_Min_Height_Float = "_Snow_Min_Height";
		public static readonly int Snow_Min_Height_FloatID = Shader.PropertyToID("_Snow_Min_Height");
		public const string Snow_Min_Height_Blending_Float = "_Snow_Min_Height_Blending";
		public static readonly int Snow_Min_Height_Blending_FloatID = Shader.PropertyToID("_Snow_Min_Height_Blending");
		public const string texcoord_Texture = "_texcoord";
		public static readonly int texcoord_TextureID = Shader.PropertyToID("_texcoord");
		public const string dirty_Float = "__dirty";
		public static readonly int dirty_FloatID = Shader.PropertyToID("__dirty");
		
	} // class NatureManufactureShaders_StandardSpecularUVFreeSnow
	
	public static class NatureManufactureShaders_TerrainSnowCover
	{
		// Members
		public const string Snow_Amount_Range = "_Snow_Amount";
		public static readonly int Snow_Amount_RangeID = Shader.PropertyToID("_Snow_Amount");
		public const string SnowMaxAngle_Range = "_SnowMaxAngle";
		public static readonly int SnowMaxAngle_RangeID = Shader.PropertyToID("_SnowMaxAngle");
		public const string SnowAngleHardness_Range = "_SnowAngleHardness";
		public static readonly int SnowAngleHardness_RangeID = Shader.PropertyToID("_SnowAngleHardness");
		public const string Smoothness_Range = "_Smoothness";
		public static readonly int Smoothness_RangeID = Shader.PropertyToID("_Smoothness");
		public const string SpecularPower_Range = "_SpecularPower";
		public static readonly int SpecularPower_RangeID = Shader.PropertyToID("_SpecularPower");
		public const string Albedo_1RGBSmothnessA_Texture = "_Albedo_1RGBSmothnessA";
		public static readonly int Albedo_1RGBSmothnessA_TextureID = Shader.PropertyToID("_Albedo_1RGBSmothnessA");
		public const string Normal_1RGB_Texture = "_Normal_1RGB";
		public static readonly int Normal_1RGB_TextureID = Shader.PropertyToID("_Normal_1RGB");
		public const string Normal1Power_Range = "_Normal1Power";
		public static readonly int Normal1Power_RangeID = Shader.PropertyToID("_Normal1Power");
		public const string Albedo1SnowReduction_Range = "_Albedo1SnowReduction";
		public static readonly int Albedo1SnowReduction_RangeID = Shader.PropertyToID("_Albedo1SnowReduction");
		public const string Albedo_2RGBSmothnessA_Texture = "_Albedo_2RGBSmothnessA";
		public static readonly int Albedo_2RGBSmothnessA_TextureID = Shader.PropertyToID("_Albedo_2RGBSmothnessA");
		public const string Normal_2RGB_Texture = "_Normal_2RGB";
		public static readonly int Normal_2RGB_TextureID = Shader.PropertyToID("_Normal_2RGB");
		public const string Normal2Power_Range = "_Normal2Power";
		public static readonly int Normal2Power_RangeID = Shader.PropertyToID("_Normal2Power");
		public const string Albedo2SnowReduction_Range = "_Albedo2SnowReduction";
		public static readonly int Albedo2SnowReduction_RangeID = Shader.PropertyToID("_Albedo2SnowReduction");
		public const string Albedo_3RGBSmothnessA_Texture = "_Albedo_3RGBSmothnessA";
		public static readonly int Albedo_3RGBSmothnessA_TextureID = Shader.PropertyToID("_Albedo_3RGBSmothnessA");
		public const string Normal_3RGB_Texture = "_Normal_3RGB";
		public static readonly int Normal_3RGB_TextureID = Shader.PropertyToID("_Normal_3RGB");
		public const string Normal3Power_Range = "_Normal3Power";
		public static readonly int Normal3Power_RangeID = Shader.PropertyToID("_Normal3Power");
		public const string Albedo3SnowReduction_Range = "_Albedo3SnowReduction";
		public static readonly int Albedo3SnowReduction_RangeID = Shader.PropertyToID("_Albedo3SnowReduction");
		public const string Albedo_4RGBSmothnessA_Texture = "_Albedo_4RGBSmothnessA";
		public static readonly int Albedo_4RGBSmothnessA_TextureID = Shader.PropertyToID("_Albedo_4RGBSmothnessA");
		public const string Normal_4RGB_Texture = "_Normal_4RGB";
		public static readonly int Normal_4RGB_TextureID = Shader.PropertyToID("_Normal_4RGB");
		public const string Normal4Power_Range = "_Normal4Power";
		public static readonly int Normal4Power_RangeID = Shader.PropertyToID("_Normal4Power");
		public const string Albedo4SnowReduction_Range = "_Albedo4SnowReduction";
		public static readonly int Albedo4SnowReduction_RangeID = Shader.PropertyToID("_Albedo4SnowReduction");
		public const string Splat_Map_1_Texture = "_Splat_Map_1";
		public static readonly int Splat_Map_1_TextureID = Shader.PropertyToID("_Splat_Map_1");
		public const string SnowNoiseCover_Texture = "_SnowNoiseCover";
		public static readonly int SnowNoiseCover_TextureID = Shader.PropertyToID("_SnowNoiseCover");
		public const string SnowAlbedoRGBSpecularA_Texture = "_SnowAlbedoRGBSpecularA";
		public static readonly int SnowAlbedoRGBSpecularA_TextureID = Shader.PropertyToID("_SnowAlbedoRGBSpecularA");
		public const string SnowTilling_Range = "_SnowTilling";
		public static readonly int SnowTilling_RangeID = Shader.PropertyToID("_SnowTilling");
		public const string SnowSpecularPower_Range = "_SnowSpecularPower";
		public static readonly int SnowSpecularPower_RangeID = Shader.PropertyToID("_SnowSpecularPower");
		public const string SnowSmoothness_Range = "_SnowSmoothness";
		public static readonly int SnowSmoothness_RangeID = Shader.PropertyToID("_SnowSmoothness");
		public const string SnowNormalRGB_Texture = "_SnowNormalRGB";
		public static readonly int SnowNormalRGB_TextureID = Shader.PropertyToID("_SnowNormalRGB");
		public const string SnowNormalPower_Range = "_SnowNormalPower";
		public static readonly int SnowNormalPower_RangeID = Shader.PropertyToID("_SnowNormalPower");
		public const string SnowNoiseTilling_Range = "_SnowNoiseTilling";
		public static readonly int SnowNoiseTilling_RangeID = Shader.PropertyToID("_SnowNoiseTilling");
		public const string SnowCoverMix_2_Vector = "_SnowCoverMix_2";
		public static readonly int SnowCoverMix_2_VectorID = Shader.PropertyToID("_SnowCoverMix_2");
		public const string SnowCoverMix_1_Vector = "_SnowCoverMix_1";
		public static readonly int SnowCoverMix_1_VectorID = Shader.PropertyToID("_SnowCoverMix_1");
		public const string texcoord_Texture = "_texcoord";
		public static readonly int texcoord_TextureID = Shader.PropertyToID("_texcoord");
		public const string dirty_Float = "__dirty";
		public static readonly int dirty_FloatID = Shader.PropertyToID("__dirty");
		
	} // class NatureManufactureShaders_TerrainSnowCover
	
	public static class NatureManufactureShaders_TerrainSnowCoverWorldMapped
	{
		// Members
		public const string SnowAmount_Range = "_SnowAmount";
		public static readonly int SnowAmount_RangeID = Shader.PropertyToID("_SnowAmount");
		public const string SnowAngleHardness_Range = "_SnowAngleHardness";
		public static readonly int SnowAngleHardness_RangeID = Shader.PropertyToID("_SnowAngleHardness");
		public const string SnowMaxAngle_Range = "_SnowMaxAngle";
		public static readonly int SnowMaxAngle_RangeID = Shader.PropertyToID("_SnowMaxAngle");
		public const string Smoothness_Range = "_Smoothness";
		public static readonly int Smoothness_RangeID = Shader.PropertyToID("_Smoothness");
		public const string SpecularPower_Range = "_SpecularPower";
		public static readonly int SpecularPower_RangeID = Shader.PropertyToID("_SpecularPower");
		public const string Albedo_1RGBSmothnessA_Texture = "_Albedo_1RGBSmothnessA";
		public static readonly int Albedo_1RGBSmothnessA_TextureID = Shader.PropertyToID("_Albedo_1RGBSmothnessA");
		public const string Albedo1SnowReduction_Range = "_Albedo1SnowReduction";
		public static readonly int Albedo1SnowReduction_RangeID = Shader.PropertyToID("_Albedo1SnowReduction");
		public const string Texture1Tilling_Range = "_Texture1Tilling";
		public static readonly int Texture1Tilling_RangeID = Shader.PropertyToID("_Texture1Tilling");
		public const string Normal_1RGB_Texture = "_Normal_1RGB";
		public static readonly int Normal_1RGB_TextureID = Shader.PropertyToID("_Normal_1RGB");
		public const string Normal1Power_Range = "_Normal1Power";
		public static readonly int Normal1Power_RangeID = Shader.PropertyToID("_Normal1Power");
		public const string Albedo_2RGBSmothnessA_Texture = "_Albedo_2RGBSmothnessA";
		public static readonly int Albedo_2RGBSmothnessA_TextureID = Shader.PropertyToID("_Albedo_2RGBSmothnessA");
		public const string Texture2Tilling_Range = "_Texture2Tilling";
		public static readonly int Texture2Tilling_RangeID = Shader.PropertyToID("_Texture2Tilling");
		public const string Albedo2SnowReduction_Range = "_Albedo2SnowReduction";
		public static readonly int Albedo2SnowReduction_RangeID = Shader.PropertyToID("_Albedo2SnowReduction");
		public const string Normal_2RGB_Texture = "_Normal_2RGB";
		public static readonly int Normal_2RGB_TextureID = Shader.PropertyToID("_Normal_2RGB");
		public const string Normal2Power_Range = "_Normal2Power";
		public static readonly int Normal2Power_RangeID = Shader.PropertyToID("_Normal2Power");
		public const string Albedo_3RGBSmothnessA_Texture = "_Albedo_3RGBSmothnessA";
		public static readonly int Albedo_3RGBSmothnessA_TextureID = Shader.PropertyToID("_Albedo_3RGBSmothnessA");
		public const string Albedo3SnowReduction_Range = "_Albedo3SnowReduction";
		public static readonly int Albedo3SnowReduction_RangeID = Shader.PropertyToID("_Albedo3SnowReduction");
		public const string Texture3Tilling_Range = "_Texture3Tilling";
		public static readonly int Texture3Tilling_RangeID = Shader.PropertyToID("_Texture3Tilling");
		public const string Normal_3RGB_Texture = "_Normal_3RGB";
		public static readonly int Normal_3RGB_TextureID = Shader.PropertyToID("_Normal_3RGB");
		public const string Normal3Power_Range = "_Normal3Power";
		public static readonly int Normal3Power_RangeID = Shader.PropertyToID("_Normal3Power");
		public const string Albedo_4RGBSmothnessA_Texture = "_Albedo_4RGBSmothnessA";
		public static readonly int Albedo_4RGBSmothnessA_TextureID = Shader.PropertyToID("_Albedo_4RGBSmothnessA");
		public const string Texture4Tilling_Range = "_Texture4Tilling";
		public static readonly int Texture4Tilling_RangeID = Shader.PropertyToID("_Texture4Tilling");
		public const string Albedo4SnowReduction_Range = "_Albedo4SnowReduction";
		public static readonly int Albedo4SnowReduction_RangeID = Shader.PropertyToID("_Albedo4SnowReduction");
		public const string Normal_4RGB_Texture = "_Normal_4RGB";
		public static readonly int Normal_4RGB_TextureID = Shader.PropertyToID("_Normal_4RGB");
		public const string Normal4Power_Range = "_Normal4Power";
		public static readonly int Normal4Power_RangeID = Shader.PropertyToID("_Normal4Power");
		public const string Splat_Map_1_Texture = "_Splat_Map_1";
		public static readonly int Splat_Map_1_TextureID = Shader.PropertyToID("_Splat_Map_1");
		public const string SnowAlbedoRGBSpecularA_Texture = "_SnowAlbedoRGBSpecularA";
		public static readonly int SnowAlbedoRGBSpecularA_TextureID = Shader.PropertyToID("_SnowAlbedoRGBSpecularA");
		public const string SnowTextureTilling_Range = "_SnowTextureTilling";
		public static readonly int SnowTextureTilling_RangeID = Shader.PropertyToID("_SnowTextureTilling");
		public const string SnowSpecularPower_Range = "_SnowSpecularPower";
		public static readonly int SnowSpecularPower_RangeID = Shader.PropertyToID("_SnowSpecularPower");
		public const string SnowSmoothness_Range = "_SnowSmoothness";
		public static readonly int SnowSmoothness_RangeID = Shader.PropertyToID("_SnowSmoothness");
		public const string SnowNormalRGB_Texture = "_SnowNormalRGB";
		public static readonly int SnowNormalRGB_TextureID = Shader.PropertyToID("_SnowNormalRGB");
		public const string SnowNormalPower_Range = "_SnowNormalPower";
		public static readonly int SnowNormalPower_RangeID = Shader.PropertyToID("_SnowNormalPower");
		public const string SnowNoiseCover_Texture = "_SnowNoiseCover";
		public static readonly int SnowNoiseCover_TextureID = Shader.PropertyToID("_SnowNoiseCover");
		public const string SnowNoiseTilling_Range = "_SnowNoiseTilling";
		public static readonly int SnowNoiseTilling_RangeID = Shader.PropertyToID("_SnowNoiseTilling");
		public const string SnowCoverMix_1_Vector = "_SnowCoverMix_1";
		public static readonly int SnowCoverMix_1_VectorID = Shader.PropertyToID("_SnowCoverMix_1");
		public const string SnowCoverMix_2_Vector = "_SnowCoverMix_2";
		public static readonly int SnowCoverMix_2_VectorID = Shader.PropertyToID("_SnowCoverMix_2");
		public const string dirty_Float = "__dirty";
		public static readonly int dirty_FloatID = Shader.PropertyToID("__dirty");
		
	} // class NatureManufactureShaders_TerrainSnowCoverWorldMapped
	
	public static class NatureManufactureShaders_TerrainSnowCoverWorldMappeduvFree
	{
		// Members
		public const string Splat_Map_1_Texture = "_Splat_Map_1";
		public static readonly int Splat_Map_1_TextureID = Shader.PropertyToID("_Splat_Map_1");
		public const string SpecularPower_Range = "_SpecularPower";
		public static readonly int SpecularPower_RangeID = Shader.PropertyToID("_SpecularPower");
		public const string Smoothness_Range = "_Smoothness";
		public static readonly int Smoothness_RangeID = Shader.PropertyToID("_Smoothness");
		public const string Texture1_AlbedoRGB_Smoothness_A_Texture = "_Texture1_AlbedoRGB_Smoothness_A";
		public static readonly int Texture1_AlbedoRGB_Smoothness_A_TextureID = Shader.PropertyToID("_Texture1_AlbedoRGB_Smoothness_A");
		public const string Texture1Tiling_Range = "_Texture1Tiling";
		public static readonly int Texture1Tiling_RangeID = Shader.PropertyToID("_Texture1Tiling");
		public const string Texture1_NormalRGB_Texture = "_Texture1_NormalRGB";
		public static readonly int Texture1_NormalRGB_TextureID = Shader.PropertyToID("_Texture1_NormalRGB");
		public const string Texture1TriplanarFalloff_Range = "_Texture1TriplanarFalloff";
		public static readonly int Texture1TriplanarFalloff_RangeID = Shader.PropertyToID("_Texture1TriplanarFalloff");
		public const string Texture2_AlbedoRGB_Smoothness_A_Texture = "_Texture2_AlbedoRGB_Smoothness_A";
		public static readonly int Texture2_AlbedoRGB_Smoothness_A_TextureID = Shader.PropertyToID("_Texture2_AlbedoRGB_Smoothness_A");
		public const string Texture2Tiling_Range = "_Texture2Tiling";
		public static readonly int Texture2Tiling_RangeID = Shader.PropertyToID("_Texture2Tiling");
		public const string Texture2TriplanarFalloff_Range = "_Texture2TriplanarFalloff";
		public static readonly int Texture2TriplanarFalloff_RangeID = Shader.PropertyToID("_Texture2TriplanarFalloff");
		public const string Texture2_NormalRGB_Texture = "_Texture2_NormalRGB";
		public static readonly int Texture2_NormalRGB_TextureID = Shader.PropertyToID("_Texture2_NormalRGB");
		public const string Texture3_AlbedoRGB_Smoothness_A_Texture = "_Texture3_AlbedoRGB_Smoothness_A";
		public static readonly int Texture3_AlbedoRGB_Smoothness_A_TextureID = Shader.PropertyToID("_Texture3_AlbedoRGB_Smoothness_A");
		public const string Texture3Tiling_Range = "_Texture3Tiling";
		public static readonly int Texture3Tiling_RangeID = Shader.PropertyToID("_Texture3Tiling");
		public const string Texture3TriplanarFalloff_Range = "_Texture3TriplanarFalloff";
		public static readonly int Texture3TriplanarFalloff_RangeID = Shader.PropertyToID("_Texture3TriplanarFalloff");
		public const string Texture3_NormalRGB_Texture = "_Texture3_NormalRGB";
		public static readonly int Texture3_NormalRGB_TextureID = Shader.PropertyToID("_Texture3_NormalRGB");
		public const string Texture4_AlbedoRGB_Smoothness_A_Texture = "_Texture4_AlbedoRGB_Smoothness_A";
		public static readonly int Texture4_AlbedoRGB_Smoothness_A_TextureID = Shader.PropertyToID("_Texture4_AlbedoRGB_Smoothness_A");
		public const string Texture4Tiling_Range = "_Texture4Tiling";
		public static readonly int Texture4Tiling_RangeID = Shader.PropertyToID("_Texture4Tiling");
		public const string Texture4TriplanarFalloff_Range = "_Texture4TriplanarFalloff";
		public static readonly int Texture4TriplanarFalloff_RangeID = Shader.PropertyToID("_Texture4TriplanarFalloff");
		public const string Texture4_NormalRGB_Texture = "_Texture4_NormalRGB";
		public static readonly int Texture4_NormalRGB_TextureID = Shader.PropertyToID("_Texture4_NormalRGB");
		public const string Snow_Amount_Range = "_Snow_Amount";
		public static readonly int Snow_Amount_RangeID = Shader.PropertyToID("_Snow_Amount");
		public const string SnowSmoothness_Range = "_SnowSmoothness";
		public static readonly int SnowSmoothness_RangeID = Shader.PropertyToID("_SnowSmoothness");
		public const string SnowSpecularPower_Range = "_SnowSpecularPower";
		public static readonly int SnowSpecularPower_RangeID = Shader.PropertyToID("_SnowSpecularPower");
		public const string SnowMaxAngle_Range = "_SnowMaxAngle";
		public static readonly int SnowMaxAngle_RangeID = Shader.PropertyToID("_SnowMaxAngle");
		public const string SnowAngleHardness_Range = "_SnowAngleHardness";
		public static readonly int SnowAngleHardness_RangeID = Shader.PropertyToID("_SnowAngleHardness");
		public const string SnowAlbedoRGBSpecularA_Texture = "_SnowAlbedoRGBSpecularA";
		public static readonly int SnowAlbedoRGBSpecularA_TextureID = Shader.PropertyToID("_SnowAlbedoRGBSpecularA");
		public const string SnowTiling_Range = "_SnowTiling";
		public static readonly int SnowTiling_RangeID = Shader.PropertyToID("_SnowTiling");
		public const string SnowTriplanarFalloff_Range = "_SnowTriplanarFalloff";
		public static readonly int SnowTriplanarFalloff_RangeID = Shader.PropertyToID("_SnowTriplanarFalloff");
		public const string SnowNormalRGB_Texture = "_SnowNormalRGB";
		public static readonly int SnowNormalRGB_TextureID = Shader.PropertyToID("_SnowNormalRGB");
		public const string Albedo1SnowReduction_Range = "_Albedo1SnowReduction";
		public static readonly int Albedo1SnowReduction_RangeID = Shader.PropertyToID("_Albedo1SnowReduction");
		public const string Albedo2SnowReduction_Range = "_Albedo2SnowReduction";
		public static readonly int Albedo2SnowReduction_RangeID = Shader.PropertyToID("_Albedo2SnowReduction");
		public const string Albedo3SnowReduction_Range = "_Albedo3SnowReduction";
		public static readonly int Albedo3SnowReduction_RangeID = Shader.PropertyToID("_Albedo3SnowReduction");
		public const string Albedo4SnowReduction_Range = "_Albedo4SnowReduction";
		public static readonly int Albedo4SnowReduction_RangeID = Shader.PropertyToID("_Albedo4SnowReduction");
		public const string SnowNoiseCover_Texture = "_SnowNoiseCover";
		public static readonly int SnowNoiseCover_TextureID = Shader.PropertyToID("_SnowNoiseCover");
		public const string SnowNoiseTiling_Range = "_SnowNoiseTiling";
		public static readonly int SnowNoiseTiling_RangeID = Shader.PropertyToID("_SnowNoiseTiling");
		public const string SnowCoverMix_1_Vector = "_SnowCoverMix_1";
		public static readonly int SnowCoverMix_1_VectorID = Shader.PropertyToID("_SnowCoverMix_1");
		public const string SnowCoverMix_2_Vector = "_SnowCoverMix_2";
		public static readonly int SnowCoverMix_2_VectorID = Shader.PropertyToID("_SnowCoverMix_2");
		public const string texcoord_Texture = "_texcoord";
		public static readonly int texcoord_TextureID = Shader.PropertyToID("_texcoord");
		public const string dirty_Float = "__dirty";
		public static readonly int dirty_FloatID = Shader.PropertyToID("__dirty");
		
	} // class NatureManufactureShaders_TerrainSnowCoverWorldMappeduvFree
	
	public static class NatureManufactureShaders_TreeBarkMetalic
	{
		// Members
		public const string Color_Color = "_Color";
		public static readonly int Color_ColorID = Shader.PropertyToID("_Color");
		public const string MainTex_Texture = "_MainTex";
		public static readonly int MainTex_TextureID = Shader.PropertyToID("_MainTex");
		public const string BumpMap_Texture = "_BumpMap";
		public static readonly int BumpMap_TextureID = Shader.PropertyToID("_BumpMap");
		public const string BumpScale_Range = "_BumpScale";
		public static readonly int BumpScale_RangeID = Shader.PropertyToID("_BumpScale");
		public const string MetalicRAOGSmothnessA_Texture = "_MetalicRAOGSmothnessA";
		public static readonly int MetalicRAOGSmothnessA_TextureID = Shader.PropertyToID("_MetalicRAOGSmothnessA");
		public const string MetalicPower_Range = "_MetalicPower";
		public static readonly int MetalicPower_RangeID = Shader.PropertyToID("_MetalicPower");
		public const string AmbientOcclusionPower_Range = "_AmbientOcclusionPower";
		public static readonly int AmbientOcclusionPower_RangeID = Shader.PropertyToID("_AmbientOcclusionPower");
		public const string SmothnessPower_Range = "_SmothnessPower";
		public static readonly int SmothnessPower_RangeID = Shader.PropertyToID("_SmothnessPower");
		public const string DetailMask_Texture = "_DetailMask";
		public static readonly int DetailMask_TextureID = Shader.PropertyToID("_DetailMask");
		public const string DetailAlbedoMap_Texture = "_DetailAlbedoMap";
		public static readonly int DetailAlbedoMap_TextureID = Shader.PropertyToID("_DetailAlbedoMap");
		public const string DetailNormalMap_Texture = "_DetailNormalMap";
		public static readonly int DetailNormalMap_TextureID = Shader.PropertyToID("_DetailNormalMap");
		public const string DetailNormalMapScale_Range = "_DetailNormalMapScale";
		public static readonly int DetailNormalMapScale_RangeID = Shader.PropertyToID("_DetailNormalMapScale");
		public const string DetailMetalicRAOGSmothnessA_Texture = "_DetailMetalicRAOGSmothnessA";
		public static readonly int DetailMetalicRAOGSmothnessA_TextureID = Shader.PropertyToID("_DetailMetalicRAOGSmothnessA");
		public const string WindVertexColorMainR_Float = "_WindVertexColorMainR";
		public static readonly int WindVertexColorMainR_FloatID = Shader.PropertyToID("_WindVertexColorMainR");
		public const string WindPower_Range = "_WindPower";
		public static readonly int WindPower_RangeID = Shader.PropertyToID("_WindPower");
		public const string WindPowerDirectionX_Range = "_WindPowerDirectionX";
		public static readonly int WindPowerDirectionX_RangeID = Shader.PropertyToID("_WindPowerDirectionX");
		public const string WindPowerDirectionZ_Range = "_WindPowerDirectionZ";
		public static readonly int WindPowerDirectionZ_RangeID = Shader.PropertyToID("_WindPowerDirectionZ");
		public const string texcoord_Texture = "_texcoord";
		public static readonly int texcoord_TextureID = Shader.PropertyToID("_texcoord");
		public const string dirty_Float = "__dirty";
		public static readonly int dirty_FloatID = Shader.PropertyToID("__dirty");
		
	} // class NatureManufactureShaders_TreeBarkMetalic
	
	public static class NatureManufactureShaders_TreeBarkMetalicSnow
	{
		// Members
		public const string Snow_Amount_Range = "_Snow_Amount";
		public static readonly int Snow_Amount_RangeID = Shader.PropertyToID("_Snow_Amount");
		public const string Color_Color = "_Color";
		public static readonly int Color_ColorID = Shader.PropertyToID("_Color");
		public const string MainTex_Texture = "_MainTex";
		public static readonly int MainTex_TextureID = Shader.PropertyToID("_MainTex");
		public const string BumpMap_Texture = "_BumpMap";
		public static readonly int BumpMap_TextureID = Shader.PropertyToID("_BumpMap");
		public const string BumpScale_Range = "_BumpScale";
		public static readonly int BumpScale_RangeID = Shader.PropertyToID("_BumpScale");
		public const string MetalicRAOGSmothnessA_Texture = "_MetalicRAOGSmothnessA";
		public static readonly int MetalicRAOGSmothnessA_TextureID = Shader.PropertyToID("_MetalicRAOGSmothnessA");
		public const string MetalicPower_Range = "_MetalicPower";
		public static readonly int MetalicPower_RangeID = Shader.PropertyToID("_MetalicPower");
		public const string AmbientOcclusionPower_Range = "_AmbientOcclusionPower";
		public static readonly int AmbientOcclusionPower_RangeID = Shader.PropertyToID("_AmbientOcclusionPower");
		public const string SmothnessPower_Range = "_SmothnessPower";
		public static readonly int SmothnessPower_RangeID = Shader.PropertyToID("_SmothnessPower");
		public const string SnowCover_Texture = "_SnowCover";
		public static readonly int SnowCover_TextureID = Shader.PropertyToID("_SnowCover");
		public const string SnowCoverNormal_Texture = "_SnowCoverNormal";
		public static readonly int SnowCoverNormal_TextureID = Shader.PropertyToID("_SnowCoverNormal");
		public const string SnowCoverMetalicRAOGSmothnessA_Texture = "_SnowCoverMetalicRAOGSmothnessA";
		public static readonly int SnowCoverMetalicRAOGSmothnessA_TextureID = Shader.PropertyToID("_SnowCoverMetalicRAOGSmothnessA");
		public const string SnowSmothnessPower_Range = "_SnowSmothnessPower";
		public static readonly int SnowSmothnessPower_RangeID = Shader.PropertyToID("_SnowSmothnessPower");
		public const string SnowAmbientOcclusionPower_Range = "_SnowAmbientOcclusionPower";
		public static readonly int SnowAmbientOcclusionPower_RangeID = Shader.PropertyToID("_SnowAmbientOcclusionPower");
		public const string SnowMetalicPower_Range = "_SnowMetalicPower";
		public static readonly int SnowMetalicPower_RangeID = Shader.PropertyToID("_SnowMetalicPower");
		public const string DetailMask_Texture = "_DetailMask";
		public static readonly int DetailMask_TextureID = Shader.PropertyToID("_DetailMask");
		public const string DetailAlbedoMap_Texture = "_DetailAlbedoMap";
		public static readonly int DetailAlbedoMap_TextureID = Shader.PropertyToID("_DetailAlbedoMap");
		public const string DetailNormalMap_Texture = "_DetailNormalMap";
		public static readonly int DetailNormalMap_TextureID = Shader.PropertyToID("_DetailNormalMap");
		public const string DetailNormalMapScale_Range = "_DetailNormalMapScale";
		public static readonly int DetailNormalMapScale_RangeID = Shader.PropertyToID("_DetailNormalMapScale");
		public const string DetailMetalicRAOGSmothnessA_Texture = "_DetailMetalicRAOGSmothnessA";
		public static readonly int DetailMetalicRAOGSmothnessA_TextureID = Shader.PropertyToID("_DetailMetalicRAOGSmothnessA");
		public const string WindVertexColorMainR_Float = "_WindVertexColorMainR";
		public static readonly int WindVertexColorMainR_FloatID = Shader.PropertyToID("_WindVertexColorMainR");
		public const string WindPower_Range = "_WindPower";
		public static readonly int WindPower_RangeID = Shader.PropertyToID("_WindPower");
		public const string WindPowerDirectionX_Range = "_WindPowerDirectionX";
		public static readonly int WindPowerDirectionX_RangeID = Shader.PropertyToID("_WindPowerDirectionX");
		public const string WindPowerDirectionZ_Range = "_WindPowerDirectionZ";
		public static readonly int WindPowerDirectionZ_RangeID = Shader.PropertyToID("_WindPowerDirectionZ");
		public const string texcoord_Texture = "_texcoord";
		public static readonly int texcoord_TextureID = Shader.PropertyToID("_texcoord");
		public const string dirty_Float = "__dirty";
		public static readonly int dirty_FloatID = Shader.PropertyToID("__dirty");
		
	} // class NatureManufactureShaders_TreeBarkMetalicSnow
	
	public static class NatureManufactureShaders_TreeBarkSpecular
	{
		// Members
		public const string Color_Color = "_Color";
		public static readonly int Color_ColorID = Shader.PropertyToID("_Color");
		public const string MainTex_Texture = "_MainTex";
		public static readonly int MainTex_TextureID = Shader.PropertyToID("_MainTex");
		public const string BumpMap_Texture = "_BumpMap";
		public static readonly int BumpMap_TextureID = Shader.PropertyToID("_BumpMap");
		public const string BumpScale_Range = "_BumpScale";
		public static readonly int BumpScale_RangeID = Shader.PropertyToID("_BumpScale");
		public const string SpecularRGBSmothnessA_Texture = "_SpecularRGBSmothnessA";
		public static readonly int SpecularRGBSmothnessA_TextureID = Shader.PropertyToID("_SpecularRGBSmothnessA");
		public const string SpecularPower_Range = "_SpecularPower";
		public static readonly int SpecularPower_RangeID = Shader.PropertyToID("_SpecularPower");
		public const string SmothnessPower_Range = "_SmothnessPower";
		public static readonly int SmothnessPower_RangeID = Shader.PropertyToID("_SmothnessPower");
		public const string AmbientOcclusionG_Texture = "_AmbientOcclusionG";
		public static readonly int AmbientOcclusionG_TextureID = Shader.PropertyToID("_AmbientOcclusionG");
		public const string AmbientOcclusionPower_Range = "_AmbientOcclusionPower";
		public static readonly int AmbientOcclusionPower_RangeID = Shader.PropertyToID("_AmbientOcclusionPower");
		public const string DetailMask_Texture = "_DetailMask";
		public static readonly int DetailMask_TextureID = Shader.PropertyToID("_DetailMask");
		public const string DetailAlbedoMap_Texture = "_DetailAlbedoMap";
		public static readonly int DetailAlbedoMap_TextureID = Shader.PropertyToID("_DetailAlbedoMap");
		public const string DetailNormal_Texture = "_DetailNormal";
		public static readonly int DetailNormal_TextureID = Shader.PropertyToID("_DetailNormal");
		public const string DetailNormalMapScale_Range = "_DetailNormalMapScale";
		public static readonly int DetailNormalMapScale_RangeID = Shader.PropertyToID("_DetailNormalMapScale");
		public const string DetailSpecularRGBSmothnessA_Texture = "_DetailSpecularRGBSmothnessA";
		public static readonly int DetailSpecularRGBSmothnessA_TextureID = Shader.PropertyToID("_DetailSpecularRGBSmothnessA");
		public const string WindPowerDirectionX_Range = "_WindPowerDirectionX";
		public static readonly int WindPowerDirectionX_RangeID = Shader.PropertyToID("_WindPowerDirectionX");
		public const string DetailAmbientOcclusionG_Texture = "_DetailAmbientOcclusionG";
		public static readonly int DetailAmbientOcclusionG_TextureID = Shader.PropertyToID("_DetailAmbientOcclusionG");
		public const string WindPowerDirectionZX_Range = "_WindPowerDirectionZX";
		public static readonly int WindPowerDirectionZX_RangeID = Shader.PropertyToID("_WindPowerDirectionZX");
		public const string WindPower_Range = "_WindPower";
		public static readonly int WindPower_RangeID = Shader.PropertyToID("_WindPower");
		public const string WindVertexColorMainR_Float = "_WindVertexColorMainR";
		public static readonly int WindVertexColorMainR_FloatID = Shader.PropertyToID("_WindVertexColorMainR");
		public const string texcoord_Texture = "_texcoord";
		public static readonly int texcoord_TextureID = Shader.PropertyToID("_texcoord");
		public const string dirty_Float = "__dirty";
		public static readonly int dirty_FloatID = Shader.PropertyToID("__dirty");
		
	} // class NatureManufactureShaders_TreeBarkSpecular
	
	public static class NatureManufactureShaders_TreeBarkSpecularSnow
	{
		// Members
		public const string Snow_Amount_Range = "_Snow_Amount";
		public static readonly int Snow_Amount_RangeID = Shader.PropertyToID("_Snow_Amount");
		public const string Color_Color = "_Color";
		public static readonly int Color_ColorID = Shader.PropertyToID("_Color");
		public const string MainTex_Texture = "_MainTex";
		public static readonly int MainTex_TextureID = Shader.PropertyToID("_MainTex");
		public const string BumpMap_Texture = "_BumpMap";
		public static readonly int BumpMap_TextureID = Shader.PropertyToID("_BumpMap");
		public const string BumpScale_Range = "_BumpScale";
		public static readonly int BumpScale_RangeID = Shader.PropertyToID("_BumpScale");
		public const string SpecularRGBSmothnessA_Texture = "_SpecularRGBSmothnessA";
		public static readonly int SpecularRGBSmothnessA_TextureID = Shader.PropertyToID("_SpecularRGBSmothnessA");
		public const string SpecularPower_Range = "_SpecularPower";
		public static readonly int SpecularPower_RangeID = Shader.PropertyToID("_SpecularPower");
		public const string SmothnessPower_Range = "_SmothnessPower";
		public static readonly int SmothnessPower_RangeID = Shader.PropertyToID("_SmothnessPower");
		public const string AmbientOcclusionA_Texture = "_AmbientOcclusionA";
		public static readonly int AmbientOcclusionA_TextureID = Shader.PropertyToID("_AmbientOcclusionA");
		public const string AmbientOcclusionPower_Range = "_AmbientOcclusionPower";
		public static readonly int AmbientOcclusionPower_RangeID = Shader.PropertyToID("_AmbientOcclusionPower");
		public const string DetailMask_Texture = "_DetailMask";
		public static readonly int DetailMask_TextureID = Shader.PropertyToID("_DetailMask");
		public const string DetailAlbedoMap_Texture = "_DetailAlbedoMap";
		public static readonly int DetailAlbedoMap_TextureID = Shader.PropertyToID("_DetailAlbedoMap");
		public const string DetailNormalMap_Texture = "_DetailNormalMap";
		public static readonly int DetailNormalMap_TextureID = Shader.PropertyToID("_DetailNormalMap");
		public const string DetailNormalMapScale_Range = "_DetailNormalMapScale";
		public static readonly int DetailNormalMapScale_RangeID = Shader.PropertyToID("_DetailNormalMapScale");
		public const string DetailAmbientOcclusionG_Texture = "_DetailAmbientOcclusionG";
		public static readonly int DetailAmbientOcclusionG_TextureID = Shader.PropertyToID("_DetailAmbientOcclusionG");
		public const string DetailAmbientOcclusionPower_Range = "_DetailAmbientOcclusionPower";
		public static readonly int DetailAmbientOcclusionPower_RangeID = Shader.PropertyToID("_DetailAmbientOcclusionPower");
		public const string DetailSpecularRGBSmothnessA_Texture = "_DetailSpecularRGBSmothnessA";
		public static readonly int DetailSpecularRGBSmothnessA_TextureID = Shader.PropertyToID("_DetailSpecularRGBSmothnessA");
		public const string SnowCover_Texture = "_SnowCover";
		public static readonly int SnowCover_TextureID = Shader.PropertyToID("_SnowCover");
		public const string SnowCoverNormal_Texture = "_SnowCoverNormal";
		public static readonly int SnowCoverNormal_TextureID = Shader.PropertyToID("_SnowCoverNormal");
		public const string SnowCoverSpecularRGBSmothnessA_Texture = "_SnowCoverSpecularRGBSmothnessA";
		public static readonly int SnowCoverSpecularRGBSmothnessA_TextureID = Shader.PropertyToID("_SnowCoverSpecularRGBSmothnessA");
		public const string SnowSpecularPower_Range = "_SnowSpecularPower";
		public static readonly int SnowSpecularPower_RangeID = Shader.PropertyToID("_SnowSpecularPower");
		public const string SnowSmothnessPower_Range = "_SnowSmothnessPower";
		public static readonly int SnowSmothnessPower_RangeID = Shader.PropertyToID("_SnowSmothnessPower");
		public const string SnowCoverAmbientOcclusionG_Texture = "_SnowCoverAmbientOcclusionG";
		public static readonly int SnowCoverAmbientOcclusionG_TextureID = Shader.PropertyToID("_SnowCoverAmbientOcclusionG");
		public const string SnowAmbientOcclusionPower_Range = "_SnowAmbientOcclusionPower";
		public static readonly int SnowAmbientOcclusionPower_RangeID = Shader.PropertyToID("_SnowAmbientOcclusionPower");
		public const string WindVertexColorMainR_Float = "_WindVertexColorMainR";
		public static readonly int WindVertexColorMainR_FloatID = Shader.PropertyToID("_WindVertexColorMainR");
		public const string WindPower_Range = "_WindPower";
		public static readonly int WindPower_RangeID = Shader.PropertyToID("_WindPower");
		public const string WindPowerDirectionX_Range = "_WindPowerDirectionX";
		public static readonly int WindPowerDirectionX_RangeID = Shader.PropertyToID("_WindPowerDirectionX");
		public const string WindPowerDirectionZ_Range = "_WindPowerDirectionZ";
		public static readonly int WindPowerDirectionZ_RangeID = Shader.PropertyToID("_WindPowerDirectionZ");
		public const string texcoord_Texture = "_texcoord";
		public static readonly int texcoord_TextureID = Shader.PropertyToID("_texcoord");
		public const string dirty_Float = "__dirty";
		public static readonly int dirty_FloatID = Shader.PropertyToID("__dirty");
		
	} // class NatureManufactureShaders_TreeBarkSpecularSnow
	
	public static class NatureManufactureShaders_TreeLeavesMetalic
	{
		// Members
		public const string Translucency_Range = "_Translucency";
		public static readonly int Translucency_RangeID = Shader.PropertyToID("_Translucency");
		public const string TransNormalDistortion_Range = "_TransNormalDistortion";
		public static readonly int TransNormalDistortion_RangeID = Shader.PropertyToID("_TransNormalDistortion");
		public const string TransScattering_Range = "_TransScattering";
		public static readonly int TransScattering_RangeID = Shader.PropertyToID("_TransScattering");
		public const string TransDirect_Range = "_TransDirect";
		public static readonly int TransDirect_RangeID = Shader.PropertyToID("_TransDirect");
		public const string TransAmbient_Range = "_TransAmbient";
		public static readonly int TransAmbient_RangeID = Shader.PropertyToID("_TransAmbient");
		public const string TransShadow_Range = "_TransShadow";
		public static readonly int TransShadow_RangeID = Shader.PropertyToID("_TransShadow");
		public const string TranslucencyColor_Color = "_TranslucencyColor";
		public static readonly int TranslucencyColor_ColorID = Shader.PropertyToID("_TranslucencyColor");
		public const string Cutoff_Float = "_Cutoff";
		public static readonly int Cutoff_FloatID = Shader.PropertyToID("_Cutoff");
		public const string Color_Color = "_Color";
		public static readonly int Color_ColorID = Shader.PropertyToID("_Color");
		public const string MainTex_Texture = "_MainTex";
		public static readonly int MainTex_TextureID = Shader.PropertyToID("_MainTex");
		public const string BumpMap_Texture = "_BumpMap";
		public static readonly int BumpMap_TextureID = Shader.PropertyToID("_BumpMap");
		public const string BumpScale_Range = "_BumpScale";
		public static readonly int BumpScale_RangeID = Shader.PropertyToID("_BumpScale");
		public const string MetalicRAOGSmothnessA_Texture = "_MetalicRAOGSmothnessA";
		public static readonly int MetalicRAOGSmothnessA_TextureID = Shader.PropertyToID("_MetalicRAOGSmothnessA");
		public const string MetalicPower_Range = "_MetalicPower";
		public static readonly int MetalicPower_RangeID = Shader.PropertyToID("_MetalicPower");
		public const string AmbientOcclusionPower_Range = "_AmbientOcclusionPower";
		public static readonly int AmbientOcclusionPower_RangeID = Shader.PropertyToID("_AmbientOcclusionPower");
		public const string SmothnessPower_Range = "_SmothnessPower";
		public static readonly int SmothnessPower_RangeID = Shader.PropertyToID("_SmothnessPower");
		public const string WindVertexColorMainRNoiseB_Float = "_WindVertexColorMainRNoiseB";
		public static readonly int WindVertexColorMainRNoiseB_FloatID = Shader.PropertyToID("_WindVertexColorMainRNoiseB");
		public const string WindColorMultiply_Vector = "_WindColorMultiply";
		public static readonly int WindColorMultiply_VectorID = Shader.PropertyToID("_WindColorMultiply");
		public const string WindPower_Range = "_WindPower";
		public static readonly int WindPower_RangeID = Shader.PropertyToID("_WindPower");
		public const string WindPowerDirectionX_Range = "_WindPowerDirectionX";
		public static readonly int WindPowerDirectionX_RangeID = Shader.PropertyToID("_WindPowerDirectionX");
		public const string WindPowerDirectionZ_Range = "_WindPowerDirectionZ";
		public static readonly int WindPowerDirectionZ_RangeID = Shader.PropertyToID("_WindPowerDirectionZ");
		public const string WindNoiseSpeed_Float = "_WindNoiseSpeed";
		public static readonly int WindNoiseSpeed_FloatID = Shader.PropertyToID("_WindNoiseSpeed");
		public const string WindNoisePower_Range = "_WindNoisePower";
		public static readonly int WindNoisePower_RangeID = Shader.PropertyToID("_WindNoisePower");
		public const string texcoord_Texture = "_texcoord";
		public static readonly int texcoord_TextureID = Shader.PropertyToID("_texcoord");
		public const string dirty_Float = "__dirty";
		public static readonly int dirty_FloatID = Shader.PropertyToID("__dirty");
		
	} // class NatureManufactureShaders_TreeLeavesMetalic
	
	public static class NatureManufactureShaders_TreeLeavesMetalicSnow
	{
		// Members
		public const string Cutoff_Float = "_Cutoff";
		public static readonly int Cutoff_FloatID = Shader.PropertyToID("_Cutoff");
		public const string MainTex_Texture = "_MainTex";
		public static readonly int MainTex_TextureID = Shader.PropertyToID("_MainTex");
		public const string Color_Color = "_Color";
		public static readonly int Color_ColorID = Shader.PropertyToID("_Color");
		public const string BumpMap_Texture = "_BumpMap";
		public static readonly int BumpMap_TextureID = Shader.PropertyToID("_BumpMap");
		public const string BumpScale_Range = "_BumpScale";
		public static readonly int BumpScale_RangeID = Shader.PropertyToID("_BumpScale");
		public const string MetalicRAOGSmothnessA_Texture = "_MetalicRAOGSmothnessA";
		public static readonly int MetalicRAOGSmothnessA_TextureID = Shader.PropertyToID("_MetalicRAOGSmothnessA");
		public const string MetalicPower_Range = "_MetalicPower";
		public static readonly int MetalicPower_RangeID = Shader.PropertyToID("_MetalicPower");
		public const string AmbientOcclusionPower_Range = "_AmbientOcclusionPower";
		public static readonly int AmbientOcclusionPower_RangeID = Shader.PropertyToID("_AmbientOcclusionPower");
		public const string SmothnessPower_Range = "_SmothnessPower";
		public static readonly int SmothnessPower_RangeID = Shader.PropertyToID("_SmothnessPower");
		public const string SnowAlbedoRGB_Texture = "_SnowAlbedoRGB";
		public static readonly int SnowAlbedoRGB_TextureID = Shader.PropertyToID("_SnowAlbedoRGB");
		public const string SnowBrightnessReduction_Range = "_SnowBrightnessReduction";
		public static readonly int SnowBrightnessReduction_RangeID = Shader.PropertyToID("_SnowBrightnessReduction");
		public const string SnowNormalRGB_Texture = "_SnowNormalRGB";
		public static readonly int SnowNormalRGB_TextureID = Shader.PropertyToID("_SnowNormalRGB");
		public const string SnowMetalicRAOGSmothnessA_Texture = "_SnowMetalicRAOGSmothnessA";
		public static readonly int SnowMetalicRAOGSmothnessA_TextureID = Shader.PropertyToID("_SnowMetalicRAOGSmothnessA");
		public const string SnowAmbientOcclusionPower_Range = "_SnowAmbientOcclusionPower";
		public static readonly int SnowAmbientOcclusionPower_RangeID = Shader.PropertyToID("_SnowAmbientOcclusionPower");
		public const string Snow_Amount_Range = "_Snow_Amount";
		public static readonly int Snow_Amount_RangeID = Shader.PropertyToID("_Snow_Amount");
		public const string SnowAngleOverlay_Range = "_SnowAngleOverlay";
		public static readonly int SnowAngleOverlay_RangeID = Shader.PropertyToID("_SnowAngleOverlay");
		public const string WindVertexColorMainRNoiseB_Float = "_WindVertexColorMainRNoiseB";
		public static readonly int WindVertexColorMainRNoiseB_FloatID = Shader.PropertyToID("_WindVertexColorMainRNoiseB");
		public const string WindColorMultiply_Vector = "_WindColorMultiply";
		public static readonly int WindColorMultiply_VectorID = Shader.PropertyToID("_WindColorMultiply");
		public const string WindPower_Range = "_WindPower";
		public static readonly int WindPower_RangeID = Shader.PropertyToID("_WindPower");
		public const string WindPowerDirectionX_Range = "_WindPowerDirectionX";
		public static readonly int WindPowerDirectionX_RangeID = Shader.PropertyToID("_WindPowerDirectionX");
		public const string WindPowerDirectionZ_Range = "_WindPowerDirectionZ";
		public static readonly int WindPowerDirectionZ_RangeID = Shader.PropertyToID("_WindPowerDirectionZ");
		public const string WindNoiseSpeed_Float = "_WindNoiseSpeed";
		public static readonly int WindNoiseSpeed_FloatID = Shader.PropertyToID("_WindNoiseSpeed");
		public const string WindNoisePower_Range = "_WindNoisePower";
		public static readonly int WindNoisePower_RangeID = Shader.PropertyToID("_WindNoisePower");
		public const string TranslucencyColor_Color = "_TranslucencyColor";
		public static readonly int TranslucencyColor_ColorID = Shader.PropertyToID("_TranslucencyColor");
		public const string Translucency_Range = "_Translucency";
		public static readonly int Translucency_RangeID = Shader.PropertyToID("_Translucency");
		public const string TransNormalDistortion_Range = "_TransNormalDistortion";
		public static readonly int TransNormalDistortion_RangeID = Shader.PropertyToID("_TransNormalDistortion");
		public const string TransScattering_Range = "_TransScattering";
		public static readonly int TransScattering_RangeID = Shader.PropertyToID("_TransScattering");
		public const string TransDirect_Range = "_TransDirect";
		public static readonly int TransDirect_RangeID = Shader.PropertyToID("_TransDirect");
		public const string TransAmbient_Range = "_TransAmbient";
		public static readonly int TransAmbient_RangeID = Shader.PropertyToID("_TransAmbient");
		public const string TransShadow_Range = "_TransShadow";
		public static readonly int TransShadow_RangeID = Shader.PropertyToID("_TransShadow");
		public const string texcoord_Texture = "_texcoord";
		public static readonly int texcoord_TextureID = Shader.PropertyToID("_texcoord");
		public const string dirty_Float = "__dirty";
		public static readonly int dirty_FloatID = Shader.PropertyToID("__dirty");
		
	} // class NatureManufactureShaders_TreeLeavesMetalicSnow
	
	public static class NatureManufactureShaders_TreeLeavesSpecular
	{
		// Members
		public const string Translucency_Range = "_Translucency";
		public static readonly int Translucency_RangeID = Shader.PropertyToID("_Translucency");
		public const string TransNormalDistortion_Range = "_TransNormalDistortion";
		public static readonly int TransNormalDistortion_RangeID = Shader.PropertyToID("_TransNormalDistortion");
		public const string TransScattering_Range = "_TransScattering";
		public static readonly int TransScattering_RangeID = Shader.PropertyToID("_TransScattering");
		public const string TransDirect_Range = "_TransDirect";
		public static readonly int TransDirect_RangeID = Shader.PropertyToID("_TransDirect");
		public const string TransAmbient_Range = "_TransAmbient";
		public static readonly int TransAmbient_RangeID = Shader.PropertyToID("_TransAmbient");
		public const string TransShadow_Range = "_TransShadow";
		public static readonly int TransShadow_RangeID = Shader.PropertyToID("_TransShadow");
		public const string TranslucencyColor_Color = "_TranslucencyColor";
		public static readonly int TranslucencyColor_ColorID = Shader.PropertyToID("_TranslucencyColor");
		public const string Cutoff_Float = "_Cutoff";
		public static readonly int Cutoff_FloatID = Shader.PropertyToID("_Cutoff");
		public const string MainTex_Texture = "_MainTex";
		public static readonly int MainTex_TextureID = Shader.PropertyToID("_MainTex");
		public const string Color_Color = "_Color";
		public static readonly int Color_ColorID = Shader.PropertyToID("_Color");
		public const string BumpMap_Texture = "_BumpMap";
		public static readonly int BumpMap_TextureID = Shader.PropertyToID("_BumpMap");
		public const string BumpScale_Range = "_BumpScale";
		public static readonly int BumpScale_RangeID = Shader.PropertyToID("_BumpScale");
		public const string SpecularPower_Range = "_SpecularPower";
		public static readonly int SpecularPower_RangeID = Shader.PropertyToID("_SpecularPower");
		public const string SmoothnessPower_Range = "_SmoothnessPower";
		public static readonly int SmoothnessPower_RangeID = Shader.PropertyToID("_SmoothnessPower");
		public const string AmbientOcclusionGSmoothnessA_Texture = "_AmbientOcclusionGSmoothnessA";
		public static readonly int AmbientOcclusionGSmoothnessA_TextureID = Shader.PropertyToID("_AmbientOcclusionGSmoothnessA");
		public const string AmbientOcclusionPower_Range = "_AmbientOcclusionPower";
		public static readonly int AmbientOcclusionPower_RangeID = Shader.PropertyToID("_AmbientOcclusionPower");
		public const string WindVertexColorMainRNoiseB_Float = "_WindVertexColorMainRNoiseB";
		public static readonly int WindVertexColorMainRNoiseB_FloatID = Shader.PropertyToID("_WindVertexColorMainRNoiseB");
		public const string WindColorMultiply_Vector = "_WindColorMultiply";
		public static readonly int WindColorMultiply_VectorID = Shader.PropertyToID("_WindColorMultiply");
		public const string WindPower_Range = "_WindPower";
		public static readonly int WindPower_RangeID = Shader.PropertyToID("_WindPower");
		public const string WindPowerDirectionX_Range = "_WindPowerDirectionX";
		public static readonly int WindPowerDirectionX_RangeID = Shader.PropertyToID("_WindPowerDirectionX");
		public const string WindPowerDirectionZ_Range = "_WindPowerDirectionZ";
		public static readonly int WindPowerDirectionZ_RangeID = Shader.PropertyToID("_WindPowerDirectionZ");
		public const string WindNoiseSpeed_Float = "_WindNoiseSpeed";
		public static readonly int WindNoiseSpeed_FloatID = Shader.PropertyToID("_WindNoiseSpeed");
		public const string WindNoisePower_Range = "_WindNoisePower";
		public static readonly int WindNoisePower_RangeID = Shader.PropertyToID("_WindNoisePower");
		public const string texcoord_Texture = "_texcoord";
		public static readonly int texcoord_TextureID = Shader.PropertyToID("_texcoord");
		public const string dirty_Float = "__dirty";
		public static readonly int dirty_FloatID = Shader.PropertyToID("__dirty");
		
	} // class NatureManufactureShaders_TreeLeavesSpecular
	
	public static class NatureManufactureShaders_TreeLeavesSpecularSnowSeason
	{
		// Members
		public const string Translucency_Range = "_Translucency";
		public static readonly int Translucency_RangeID = Shader.PropertyToID("_Translucency");
		public const string TransNormalDistortion_Range = "_TransNormalDistortion";
		public static readonly int TransNormalDistortion_RangeID = Shader.PropertyToID("_TransNormalDistortion");
		public const string TransScattering_Range = "_TransScattering";
		public static readonly int TransScattering_RangeID = Shader.PropertyToID("_TransScattering");
		public const string TransDirect_Range = "_TransDirect";
		public static readonly int TransDirect_RangeID = Shader.PropertyToID("_TransDirect");
		public const string TransAmbient_Range = "_TransAmbient";
		public static readonly int TransAmbient_RangeID = Shader.PropertyToID("_TransAmbient");
		public const string TranslucencyColor_Color = "_TranslucencyColor";
		public static readonly int TranslucencyColor_ColorID = Shader.PropertyToID("_TranslucencyColor");
		public const string TransShadow_Range = "_TransShadow";
		public static readonly int TransShadow_RangeID = Shader.PropertyToID("_TransShadow");
		public const string Cutoff_Float = "_Cutoff";
		public static readonly int Cutoff_FloatID = Shader.PropertyToID("_Cutoff");
		public const string Season_Range = "_Season";
		public static readonly int Season_RangeID = Shader.PropertyToID("_Season");
		public const string Snow_Amount_Range = "_Snow_Amount";
		public static readonly int Snow_Amount_RangeID = Shader.PropertyToID("_Snow_Amount");
		public const string SnowAngleOverlay_Range = "_SnowAngleOverlay";
		public static readonly int SnowAngleOverlay_RangeID = Shader.PropertyToID("_SnowAngleOverlay");
		public const string SnowBrightnessReduction_Range = "_SnowBrightnessReduction";
		public static readonly int SnowBrightnessReduction_RangeID = Shader.PropertyToID("_SnowBrightnessReduction");
		public const string MainTex_Texture = "_MainTex";
		public static readonly int MainTex_TextureID = Shader.PropertyToID("_MainTex");
		public const string Color_Color = "_Color";
		public static readonly int Color_ColorID = Shader.PropertyToID("_Color");
		public const string BumpMap_Texture = "_BumpMap";
		public static readonly int BumpMap_TextureID = Shader.PropertyToID("_BumpMap");
		public const string BumpScale_Range = "_BumpScale";
		public static readonly int BumpScale_RangeID = Shader.PropertyToID("_BumpScale");
		public const string SpecularRGBSmothnessA_Texture = "_SpecularRGBSmothnessA";
		public static readonly int SpecularRGBSmothnessA_TextureID = Shader.PropertyToID("_SpecularRGBSmothnessA");
		public const string SmothnessPower_Range = "_SmothnessPower";
		public static readonly int SmothnessPower_RangeID = Shader.PropertyToID("_SmothnessPower");
		public const string AmbientOcclusionG_Texture = "_AmbientOcclusionG";
		public static readonly int AmbientOcclusionG_TextureID = Shader.PropertyToID("_AmbientOcclusionG");
		public const string AmbientOcclusionPower_Range = "_AmbientOcclusionPower";
		public static readonly int AmbientOcclusionPower_RangeID = Shader.PropertyToID("_AmbientOcclusionPower");
		public const string AlbedoAutumnRGB_Texture = "_AlbedoAutumnRGB";
		public static readonly int AlbedoAutumnRGB_TextureID = Shader.PropertyToID("_AlbedoAutumnRGB");
		public const string SpecularPower_Range = "_SpecularPower";
		public static readonly int SpecularPower_RangeID = Shader.PropertyToID("_SpecularPower");
		public const string SnowAlbedoRGB_Texture = "_SnowAlbedoRGB";
		public static readonly int SnowAlbedoRGB_TextureID = Shader.PropertyToID("_SnowAlbedoRGB");
		public const string SnowNormalRGB_Texture = "_SnowNormalRGB";
		public static readonly int SnowNormalRGB_TextureID = Shader.PropertyToID("_SnowNormalRGB");
		public const string SnowSpecularRGBSmothnessA_Texture = "_SnowSpecularRGBSmothnessA";
		public static readonly int SnowSpecularRGBSmothnessA_TextureID = Shader.PropertyToID("_SnowSpecularRGBSmothnessA");
		public const string SnowSpecularPower_Range = "_SnowSpecularPower";
		public static readonly int SnowSpecularPower_RangeID = Shader.PropertyToID("_SnowSpecularPower");
		public const string SnowSmothnessPower_Range = "_SnowSmothnessPower";
		public static readonly int SnowSmothnessPower_RangeID = Shader.PropertyToID("_SnowSmothnessPower");
		public const string SnowAmbientOcclusionG_Texture = "_SnowAmbientOcclusionG";
		public static readonly int SnowAmbientOcclusionG_TextureID = Shader.PropertyToID("_SnowAmbientOcclusionG");
		public const string SnowAmbientOcclusionPower_Range = "_SnowAmbientOcclusionPower";
		public static readonly int SnowAmbientOcclusionPower_RangeID = Shader.PropertyToID("_SnowAmbientOcclusionPower");
		public const string WindVertexColorMainRNoiseB_Float = "_WindVertexColorMainRNoiseB";
		public static readonly int WindVertexColorMainRNoiseB_FloatID = Shader.PropertyToID("_WindVertexColorMainRNoiseB");
		public const string WindColorMultiply_Vector = "_WindColorMultiply";
		public static readonly int WindColorMultiply_VectorID = Shader.PropertyToID("_WindColorMultiply");
		public const string WindPower_Range = "_WindPower";
		public static readonly int WindPower_RangeID = Shader.PropertyToID("_WindPower");
		public const string WindPowerDirectionZ_Range = "_WindPowerDirectionZ";
		public static readonly int WindPowerDirectionZ_RangeID = Shader.PropertyToID("_WindPowerDirectionZ");
		public const string WindPowerDirectionX_Range = "_WindPowerDirectionX";
		public static readonly int WindPowerDirectionX_RangeID = Shader.PropertyToID("_WindPowerDirectionX");
		public const string WindNoiseSpeed_Float = "_WindNoiseSpeed";
		public static readonly int WindNoiseSpeed_FloatID = Shader.PropertyToID("_WindNoiseSpeed");
		public const string WindNoisePower_Range = "_WindNoisePower";
		public static readonly int WindNoisePower_RangeID = Shader.PropertyToID("_WindNoisePower");
		public const string texcoord_Texture = "_texcoord";
		public static readonly int texcoord_TextureID = Shader.PropertyToID("_texcoord");
		public const string dirty_Float = "__dirty";
		public static readonly int dirty_FloatID = Shader.PropertyToID("__dirty");
		
	} // class NatureManufactureShaders_TreeLeavesSpecularSnowSeason
	
	public static class NatureManufactureShaders_Tree_Leaves_Specular
	{
		// Members
		public const string Cutoff_Float = "_Cutoff";
		public static readonly int Cutoff_FloatID = Shader.PropertyToID("_Cutoff");
		public const string MainTex_Texture = "_MainTex";
		public static readonly int MainTex_TextureID = Shader.PropertyToID("_MainTex");
		public const string Color_Color = "_Color";
		public static readonly int Color_ColorID = Shader.PropertyToID("_Color");
		public const string BumpMap_Texture = "_BumpMap";
		public static readonly int BumpMap_TextureID = Shader.PropertyToID("_BumpMap");
		public const string BumpScale_Range = "_BumpScale";
		public static readonly int BumpScale_RangeID = Shader.PropertyToID("_BumpScale");
		public const string SpecularPower_Range = "_SpecularPower";
		public static readonly int SpecularPower_RangeID = Shader.PropertyToID("_SpecularPower");
		public const string SmoothnessPower_Range = "_SmoothnessPower";
		public static readonly int SmoothnessPower_RangeID = Shader.PropertyToID("_SmoothnessPower");
		public const string AmbientOcclusionGSmoothnessA_Texture = "_AmbientOcclusionGSmoothnessA";
		public static readonly int AmbientOcclusionGSmoothnessA_TextureID = Shader.PropertyToID("_AmbientOcclusionGSmoothnessA");
		public const string AmbientOcclusionPower_Range = "_AmbientOcclusionPower";
		public static readonly int AmbientOcclusionPower_RangeID = Shader.PropertyToID("_AmbientOcclusionPower");
		public const string WindVertexColorMainRNoiseB_Float = "_WindVertexColorMainRNoiseB";
		public static readonly int WindVertexColorMainRNoiseB_FloatID = Shader.PropertyToID("_WindVertexColorMainRNoiseB");
		public const string WindColorMultiply_Vector = "_WindColorMultiply";
		public static readonly int WindColorMultiply_VectorID = Shader.PropertyToID("_WindColorMultiply");
		public const string WindPower_Range = "_WindPower";
		public static readonly int WindPower_RangeID = Shader.PropertyToID("_WindPower");
		public const string WindPowerDirectionX_Range = "_WindPowerDirectionX";
		public static readonly int WindPowerDirectionX_RangeID = Shader.PropertyToID("_WindPowerDirectionX");
		public const string WindPowerDirectionZ_Range = "_WindPowerDirectionZ";
		public static readonly int WindPowerDirectionZ_RangeID = Shader.PropertyToID("_WindPowerDirectionZ");
		public const string WindNoiseSpeed_Float = "_WindNoiseSpeed";
		public static readonly int WindNoiseSpeed_FloatID = Shader.PropertyToID("_WindNoiseSpeed");
		public const string WindNoisePower_Range = "_WindNoisePower";
		public static readonly int WindNoisePower_RangeID = Shader.PropertyToID("_WindNoisePower");
		public const string texcoord_Texture = "_texcoord";
		public static readonly int texcoord_TextureID = Shader.PropertyToID("_texcoord");
		public const string dirty_Float = "__dirty";
		public static readonly int dirty_FloatID = Shader.PropertyToID("__dirty");
		
	} // class NatureManufactureShaders_Tree_Leaves_Specular
	
	public static class NatureManufactureShaders_TreeLeavesSpecularSnow
	{
		// Members
		public const string Cutoff_Float = "_Cutoff";
		public static readonly int Cutoff_FloatID = Shader.PropertyToID("_Cutoff");
		public const string Snow_Amount_Range = "_Snow_Amount";
		public static readonly int Snow_Amount_RangeID = Shader.PropertyToID("_Snow_Amount");
		public const string SnowBrightnessReduction_Range = "_SnowBrightnessReduction";
		public static readonly int SnowBrightnessReduction_RangeID = Shader.PropertyToID("_SnowBrightnessReduction");
		public const string SnowMaskTreshold_Range = "_SnowMaskTreshold";
		public static readonly int SnowMaskTreshold_RangeID = Shader.PropertyToID("_SnowMaskTreshold");
		public const string SnowAngleOverlay_Range = "_SnowAngleOverlay";
		public static readonly int SnowAngleOverlay_RangeID = Shader.PropertyToID("_SnowAngleOverlay");
		public const string MainTex_Texture = "_MainTex";
		public static readonly int MainTex_TextureID = Shader.PropertyToID("_MainTex");
		public const string Color_Color = "_Color";
		public static readonly int Color_ColorID = Shader.PropertyToID("_Color");
		public const string BumpMap_Texture = "_BumpMap";
		public static readonly int BumpMap_TextureID = Shader.PropertyToID("_BumpMap");
		public const string BumpScale_Range = "_BumpScale";
		public static readonly int BumpScale_RangeID = Shader.PropertyToID("_BumpScale");
		public const string SpecularRGBSmothnessA_Texture = "_SpecularRGBSmothnessA";
		public static readonly int SpecularRGBSmothnessA_TextureID = Shader.PropertyToID("_SpecularRGBSmothnessA");
		public const string SpecularPower_Range = "_SpecularPower";
		public static readonly int SpecularPower_RangeID = Shader.PropertyToID("_SpecularPower");
		public const string SmothnessPower_Range = "_SmothnessPower";
		public static readonly int SmothnessPower_RangeID = Shader.PropertyToID("_SmothnessPower");
		public const string AmbientOcclusionG_Texture = "_AmbientOcclusionG";
		public static readonly int AmbientOcclusionG_TextureID = Shader.PropertyToID("_AmbientOcclusionG");
		public const string AmbientOcclusionPower_Range = "_AmbientOcclusionPower";
		public static readonly int AmbientOcclusionPower_RangeID = Shader.PropertyToID("_AmbientOcclusionPower");
		public const string SnowAlbedoRGB_Texture = "_SnowAlbedoRGB";
		public static readonly int SnowAlbedoRGB_TextureID = Shader.PropertyToID("_SnowAlbedoRGB");
		public const string SnowNormalRGB_Texture = "_SnowNormalRGB";
		public static readonly int SnowNormalRGB_TextureID = Shader.PropertyToID("_SnowNormalRGB");
		public const string SnowSpecularRGBSmothnessA_Texture = "_SnowSpecularRGBSmothnessA";
		public static readonly int SnowSpecularRGBSmothnessA_TextureID = Shader.PropertyToID("_SnowSpecularRGBSmothnessA");
		public const string SnowSpecularPower_Range = "_SnowSpecularPower";
		public static readonly int SnowSpecularPower_RangeID = Shader.PropertyToID("_SnowSpecularPower");
		public const string SnowSmothnessPower_Range = "_SnowSmothnessPower";
		public static readonly int SnowSmothnessPower_RangeID = Shader.PropertyToID("_SnowSmothnessPower");
		public const string SnowAmbientOcclusionG_Texture = "_SnowAmbientOcclusionG";
		public static readonly int SnowAmbientOcclusionG_TextureID = Shader.PropertyToID("_SnowAmbientOcclusionG");
		public const string SnowAmbientOcclusionPower_Range = "_SnowAmbientOcclusionPower";
		public static readonly int SnowAmbientOcclusionPower_RangeID = Shader.PropertyToID("_SnowAmbientOcclusionPower");
		public const string WindVertexColorMainRNoiseB_Float = "_WindVertexColorMainRNoiseB";
		public static readonly int WindVertexColorMainRNoiseB_FloatID = Shader.PropertyToID("_WindVertexColorMainRNoiseB");
		public const string WindPower_Range = "_WindPower";
		public static readonly int WindPower_RangeID = Shader.PropertyToID("_WindPower");
		public const string WindPowerDirectionX_Range = "_WindPowerDirectionX";
		public static readonly int WindPowerDirectionX_RangeID = Shader.PropertyToID("_WindPowerDirectionX");
		public const string WindPowerDirectionZ_Range = "_WindPowerDirectionZ";
		public static readonly int WindPowerDirectionZ_RangeID = Shader.PropertyToID("_WindPowerDirectionZ");
		public const string WindNoiseSpeed_Float = "_WindNoiseSpeed";
		public static readonly int WindNoiseSpeed_FloatID = Shader.PropertyToID("_WindNoiseSpeed");
		public const string WindNoisePower_Range = "_WindNoisePower";
		public static readonly int WindNoisePower_RangeID = Shader.PropertyToID("_WindNoisePower");
		public const string texcoord_Texture = "_texcoord";
		public static readonly int texcoord_TextureID = Shader.PropertyToID("_texcoord");
		public const string dirty_Float = "__dirty";
		public static readonly int dirty_FloatID = Shader.PropertyToID("__dirty");
		
	} // class NatureManufactureShaders_TreeLeavesSpecularSnow
	
	public static class NatureManufacture_URP_Foliage_Bark
	{
		// Members
		public const string TrunkBaseColor_Color = "_TrunkBaseColor";
		public static readonly int TrunkBaseColor_ColorID = Shader.PropertyToID("_TrunkBaseColor");
		public const string TrunkBaseColorMap_Texture = "_TrunkBaseColorMap";
		public static readonly int TrunkBaseColorMap_TextureID = Shader.PropertyToID("_TrunkBaseColorMap");
		public const string TrunkTilingOffset_Vector = "_TrunkTilingOffset";
		public static readonly int TrunkTilingOffset_VectorID = Shader.PropertyToID("_TrunkTilingOffset");
		public const string TrunkNormalMap_Texture = "_TrunkNormalMap";
		public static readonly int TrunkNormalMap_TextureID = Shader.PropertyToID("_TrunkNormalMap");
		public const string TrunkNormalScale_Range = "_TrunkNormalScale";
		public static readonly int TrunkNormalScale_RangeID = Shader.PropertyToID("_TrunkNormalScale");
		public const string TrunkMaskMap_Texture = "_TrunkMaskMap";
		public static readonly int TrunkMaskMap_TextureID = Shader.PropertyToID("_TrunkMaskMap");
		public const string TrunkMetallic_Range = "_TrunkMetallic";
		public static readonly int TrunkMetallic_RangeID = Shader.PropertyToID("_TrunkMetallic");
		public const string TrunkAORemapMin_Range = "_TrunkAORemapMin";
		public static readonly int TrunkAORemapMin_RangeID = Shader.PropertyToID("_TrunkAORemapMin");
		public const string TrunkAORemapMax_Range = "_TrunkAORemapMax";
		public static readonly int TrunkAORemapMax_RangeID = Shader.PropertyToID("_TrunkAORemapMax");
		public const string TrunkSmoothnessRemapMin_Range = "_TrunkSmoothnessRemapMin";
		public static readonly int TrunkSmoothnessRemapMin_RangeID = Shader.PropertyToID("_TrunkSmoothnessRemapMin");
		public const string TrunkSmoothnessRemapMax_Range = "_TrunkSmoothnessRemapMax";
		public static readonly int TrunkSmoothnessRemapMax_RangeID = Shader.PropertyToID("_TrunkSmoothnessRemapMax");
		public const string LayerMask_Texture = "_LayerMask";
		public static readonly int LayerMask_TextureID = Shader.PropertyToID("_LayerMask");
		public const string BarkBlendMaskTilingOffset_Vector = "_BarkBlendMaskTilingOffset";
		public static readonly int BarkBlendMaskTilingOffset_VectorID = Shader.PropertyToID("_BarkBlendMaskTilingOffset");
		public const string BarkBaseColor_Color = "_BarkBaseColor";
		public static readonly int BarkBaseColor_ColorID = Shader.PropertyToID("_BarkBaseColor");
		public const string BarkBaseColorMap_Texture = "_BarkBaseColorMap";
		public static readonly int BarkBaseColorMap_TextureID = Shader.PropertyToID("_BarkBaseColorMap");
		public const string BarkUseUV3_Float = "_BarkUseUV3";
		public static readonly int BarkUseUV3_FloatID = Shader.PropertyToID("_BarkUseUV3");
		public const string BarkTilingOffset_Vector = "_BarkTilingOffset";
		public static readonly int BarkTilingOffset_VectorID = Shader.PropertyToID("_BarkTilingOffset");
		public const string BarkNormalMap_Texture = "_BarkNormalMap";
		public static readonly int BarkNormalMap_TextureID = Shader.PropertyToID("_BarkNormalMap");
		public const string BarkNormalScale_Range = "_BarkNormalScale";
		public static readonly int BarkNormalScale_RangeID = Shader.PropertyToID("_BarkNormalScale");
		public const string BarkMaskMap_Texture = "_BarkMaskMap";
		public static readonly int BarkMaskMap_TextureID = Shader.PropertyToID("_BarkMaskMap");
		public const string BarkMetallic_Range = "_BarkMetallic";
		public static readonly int BarkMetallic_RangeID = Shader.PropertyToID("_BarkMetallic");
		public const string BarkSmoothnessRemapMin_Range = "_BarkSmoothnessRemapMin";
		public static readonly int BarkSmoothnessRemapMin_RangeID = Shader.PropertyToID("_BarkSmoothnessRemapMin");
		public const string BarkSmoothnessRemapMax_Range = "_BarkSmoothnessRemapMax";
		public static readonly int BarkSmoothnessRemapMax_RangeID = Shader.PropertyToID("_BarkSmoothnessRemapMax");
		public const string BarkAORemapMin_Range = "_BarkAORemapMin";
		public static readonly int BarkAORemapMin_RangeID = Shader.PropertyToID("_BarkAORemapMin");
		public const string BarkAORemapMax_Range = "_BarkAORemapMax";
		public static readonly int BarkAORemapMax_RangeID = Shader.PropertyToID("_BarkAORemapMax");
		public const string Stiffness_Float = "_Stiffness";
		public static readonly int Stiffness_FloatID = Shader.PropertyToID("_Stiffness");
		public const string InitialBend_Float = "_InitialBend";
		public static readonly int InitialBend_FloatID = Shader.PropertyToID("_InitialBend");
		public const string Drag_Float = "_Drag";
		public static readonly int Drag_FloatID = Shader.PropertyToID("_Drag");
		public const string HeightDrag_Float = "_HeightDrag";
		public static readonly int HeightDrag_FloatID = Shader.PropertyToID("_HeightDrag");
		public const string NewNormal_Vector = "_NewNormal";
		public static readonly int NewNormal_VectorID = Shader.PropertyToID("_NewNormal");
		public const string QueueOffset_Float = "_QueueOffset";
		public static readonly int QueueOffset_FloatID = Shader.PropertyToID("_QueueOffset");
		public const string QueueControl_Float = "_QueueControl";
		public static readonly int QueueControl_FloatID = Shader.PropertyToID("_QueueControl");
		public const string unity_Lightmaps_Texture = "unity_Lightmaps";
		public static readonly int unity_Lightmaps_TextureID = Shader.PropertyToID("unity_Lightmaps");
		public const string unity_LightmapsInd_Texture = "unity_LightmapsInd";
		public static readonly int unity_LightmapsInd_TextureID = Shader.PropertyToID("unity_LightmapsInd");
		public const string unity_ShadowMasks_Texture = "unity_ShadowMasks";
		public static readonly int unity_ShadowMasks_TextureID = Shader.PropertyToID("unity_ShadowMasks");
		
	} // class NatureManufacture_URP_Foliage_Bark
	
	public static class NatureManufacture_URP_Foliage_BarkSnow
	{
		// Members
		public const string TrunkBaseColor_Color = "_TrunkBaseColor";
		public static readonly int TrunkBaseColor_ColorID = Shader.PropertyToID("_TrunkBaseColor");
		public const string TrunkBaseColorMap_Texture = "_TrunkBaseColorMap";
		public static readonly int TrunkBaseColorMap_TextureID = Shader.PropertyToID("_TrunkBaseColorMap");
		public const string TrunkTilingOffset_Vector = "_TrunkTilingOffset";
		public static readonly int TrunkTilingOffset_VectorID = Shader.PropertyToID("_TrunkTilingOffset");
		public const string TrunkNormalMap_Texture = "_TrunkNormalMap";
		public static readonly int TrunkNormalMap_TextureID = Shader.PropertyToID("_TrunkNormalMap");
		public const string TrunkNormalScale_Range = "_TrunkNormalScale";
		public static readonly int TrunkNormalScale_RangeID = Shader.PropertyToID("_TrunkNormalScale");
		public const string TrunkMaskMap_Texture = "_TrunkMaskMap";
		public static readonly int TrunkMaskMap_TextureID = Shader.PropertyToID("_TrunkMaskMap");
		public const string TrunkMetallic_Range = "_TrunkMetallic";
		public static readonly int TrunkMetallic_RangeID = Shader.PropertyToID("_TrunkMetallic");
		public const string TrunkAORemapMin_Range = "_TrunkAORemapMin";
		public static readonly int TrunkAORemapMin_RangeID = Shader.PropertyToID("_TrunkAORemapMin");
		public const string TrunkAORemapMax_Range = "_TrunkAORemapMax";
		public static readonly int TrunkAORemapMax_RangeID = Shader.PropertyToID("_TrunkAORemapMax");
		public const string TrunkSmoothnessRemapMin_Range = "_TrunkSmoothnessRemapMin";
		public static readonly int TrunkSmoothnessRemapMin_RangeID = Shader.PropertyToID("_TrunkSmoothnessRemapMin");
		public const string TrunkSmoothnessRemapMax_Range = "_TrunkSmoothnessRemapMax";
		public static readonly int TrunkSmoothnessRemapMax_RangeID = Shader.PropertyToID("_TrunkSmoothnessRemapMax");
		public const string LayerMask_Texture = "_LayerMask";
		public static readonly int LayerMask_TextureID = Shader.PropertyToID("_LayerMask");
		public const string BarkBlendMaskTilingOffset_Vector = "_BarkBlendMaskTilingOffset";
		public static readonly int BarkBlendMaskTilingOffset_VectorID = Shader.PropertyToID("_BarkBlendMaskTilingOffset");
		public const string BarkBaseColor_Color = "_BarkBaseColor";
		public static readonly int BarkBaseColor_ColorID = Shader.PropertyToID("_BarkBaseColor");
		public const string BarkBaseColorMap_Texture = "_BarkBaseColorMap";
		public static readonly int BarkBaseColorMap_TextureID = Shader.PropertyToID("_BarkBaseColorMap");
		public const string BarkUseUV3_Float = "_BarkUseUV3";
		public static readonly int BarkUseUV3_FloatID = Shader.PropertyToID("_BarkUseUV3");
		public const string BarkTilingOffset_Vector = "_BarkTilingOffset";
		public static readonly int BarkTilingOffset_VectorID = Shader.PropertyToID("_BarkTilingOffset");
		public const string BarkNormalMap_Texture = "_BarkNormalMap";
		public static readonly int BarkNormalMap_TextureID = Shader.PropertyToID("_BarkNormalMap");
		public const string BarkNormalScale_Range = "_BarkNormalScale";
		public static readonly int BarkNormalScale_RangeID = Shader.PropertyToID("_BarkNormalScale");
		public const string BarkMaskMap_Texture = "_BarkMaskMap";
		public static readonly int BarkMaskMap_TextureID = Shader.PropertyToID("_BarkMaskMap");
		public const string BarkMetallic_Range = "_BarkMetallic";
		public static readonly int BarkMetallic_RangeID = Shader.PropertyToID("_BarkMetallic");
		public const string BarkSmoothnessRemapMin_Range = "_BarkSmoothnessRemapMin";
		public static readonly int BarkSmoothnessRemapMin_RangeID = Shader.PropertyToID("_BarkSmoothnessRemapMin");
		public const string BarkSmoothnessRemapMax_Range = "_BarkSmoothnessRemapMax";
		public static readonly int BarkSmoothnessRemapMax_RangeID = Shader.PropertyToID("_BarkSmoothnessRemapMax");
		public const string BarkAORemapMin_Range = "_BarkAORemapMin";
		public static readonly int BarkAORemapMin_RangeID = Shader.PropertyToID("_BarkAORemapMin");
		public const string BarkAORemapMax_Range = "_BarkAORemapMax";
		public static readonly int BarkAORemapMax_RangeID = Shader.PropertyToID("_BarkAORemapMax");
		public const string Snow_Amount_Range = "_Snow_Amount";
		public static readonly int Snow_Amount_RangeID = Shader.PropertyToID("_Snow_Amount");
		public const string SnowBaseColor_Color = "_SnowBaseColor";
		public static readonly int SnowBaseColor_ColorID = Shader.PropertyToID("_SnowBaseColor");
		public const string SnowBaseColorMap_Texture = "_SnowBaseColorMap";
		public static readonly int SnowBaseColorMap_TextureID = Shader.PropertyToID("_SnowBaseColorMap");
		public const string SnowTilingOffset_Vector = "_SnowTilingOffset";
		public static readonly int SnowTilingOffset_VectorID = Shader.PropertyToID("_SnowTilingOffset");
		public const string SnowUseUv3_Float = "_SnowUseUv3";
		public static readonly int SnowUseUv3_FloatID = Shader.PropertyToID("_SnowUseUv3");
		public const string SnowNormalMap_Texture = "_SnowNormalMap";
		public static readonly int SnowNormalMap_TextureID = Shader.PropertyToID("_SnowNormalMap");
		public const string SnowNormalScale_Range = "_SnowNormalScale";
		public static readonly int SnowNormalScale_RangeID = Shader.PropertyToID("_SnowNormalScale");
		public const string SnowBlendHardness_Range = "_SnowBlendHardness";
		public static readonly int SnowBlendHardness_RangeID = Shader.PropertyToID("_SnowBlendHardness");
		public const string SnowMaskMap_Texture = "_SnowMaskMap";
		public static readonly int SnowMaskMap_TextureID = Shader.PropertyToID("_SnowMaskMap");
		public const string SnowMetallic_Range = "_SnowMetallic";
		public static readonly int SnowMetallic_RangeID = Shader.PropertyToID("_SnowMetallic");
		public const string SnowAORemapMin_Range = "_SnowAORemapMin";
		public static readonly int SnowAORemapMin_RangeID = Shader.PropertyToID("_SnowAORemapMin");
		public const string SnowAORemapMax_Range = "_SnowAORemapMax";
		public static readonly int SnowAORemapMax_RangeID = Shader.PropertyToID("_SnowAORemapMax");
		public const string SnowSmoothnessRemapMin_Range = "_SnowSmoothnessRemapMin";
		public static readonly int SnowSmoothnessRemapMin_RangeID = Shader.PropertyToID("_SnowSmoothnessRemapMin");
		public const string SnowSmoothnessRemapMax_Range = "_SnowSmoothnessRemapMax";
		public static readonly int SnowSmoothnessRemapMax_RangeID = Shader.PropertyToID("_SnowSmoothnessRemapMax");
		public const string Stiffness_Float = "_Stiffness";
		public static readonly int Stiffness_FloatID = Shader.PropertyToID("_Stiffness");
		public const string InitialBend_Float = "_InitialBend";
		public static readonly int InitialBend_FloatID = Shader.PropertyToID("_InitialBend");
		public const string Drag_Float = "_Drag";
		public static readonly int Drag_FloatID = Shader.PropertyToID("_Drag");
		public const string HeightDrag_Float = "_HeightDrag";
		public static readonly int HeightDrag_FloatID = Shader.PropertyToID("_HeightDrag");
		public const string NewNormal_Vector = "_NewNormal";
		public static readonly int NewNormal_VectorID = Shader.PropertyToID("_NewNormal");
		public const string QueueOffset_Float = "_QueueOffset";
		public static readonly int QueueOffset_FloatID = Shader.PropertyToID("_QueueOffset");
		public const string QueueControl_Float = "_QueueControl";
		public static readonly int QueueControl_FloatID = Shader.PropertyToID("_QueueControl");
		public const string unity_Lightmaps_Texture = "unity_Lightmaps";
		public static readonly int unity_Lightmaps_TextureID = Shader.PropertyToID("unity_Lightmaps");
		public const string unity_LightmapsInd_Texture = "unity_LightmapsInd";
		public static readonly int unity_LightmapsInd_TextureID = Shader.PropertyToID("unity_LightmapsInd");
		public const string unity_ShadowMasks_Texture = "unity_ShadowMasks";
		public static readonly int unity_ShadowMasks_TextureID = Shader.PropertyToID("unity_ShadowMasks");
		
	} // class NatureManufacture_URP_Foliage_BarkSnow
	
	public static class NatureManufacture_URP_Foliage_Cross
	{
		// Members
		public const string AlphaCutoff_Float = "_AlphaCutoff";
		public static readonly int AlphaCutoff_FloatID = Shader.PropertyToID("_AlphaCutoff");
		public const string BaseColorMap_Texture = "_BaseColorMap";
		public static readonly int BaseColorMap_TextureID = Shader.PropertyToID("_BaseColorMap");
		public const string TilingOffset_Vector = "_TilingOffset";
		public static readonly int TilingOffset_VectorID = Shader.PropertyToID("_TilingOffset");
		public const string HealthyColor_Color = "_HealthyColor";
		public static readonly int HealthyColor_ColorID = Shader.PropertyToID("_HealthyColor");
		public const string DryColor_Color = "_DryColor";
		public static readonly int DryColor_ColorID = Shader.PropertyToID("_DryColor");
		public const string ColorNoiseSpread_Float = "_ColorNoiseSpread";
		public static readonly int ColorNoiseSpread_FloatID = Shader.PropertyToID("_ColorNoiseSpread");
		public const string NormalMap_Texture = "_NormalMap";
		public static readonly int NormalMap_TextureID = Shader.PropertyToID("_NormalMap");
		public const string NormalScale_Range = "_NormalScale";
		public static readonly int NormalScale_RangeID = Shader.PropertyToID("_NormalScale");
		public const string AORemapMax_Range = "_AORemapMax";
		public static readonly int AORemapMax_RangeID = Shader.PropertyToID("_AORemapMax");
		public const string SmoothnessRemapMax_Range = "_SmoothnessRemapMax";
		public static readonly int SmoothnessRemapMax_RangeID = Shader.PropertyToID("_SmoothnessRemapMax");
		public const string Specular_Range = "_Specular";
		public static readonly int Specular_RangeID = Shader.PropertyToID("_Specular");
		public const string Stiffness_Float = "_Stiffness";
		public static readonly int Stiffness_FloatID = Shader.PropertyToID("_Stiffness");
		public const string InitialBend_Float = "_InitialBend";
		public static readonly int InitialBend_FloatID = Shader.PropertyToID("_InitialBend");
		public const string Drag_Float = "_Drag";
		public static readonly int Drag_FloatID = Shader.PropertyToID("_Drag");
		public const string HeightDrag_Float = "_HeightDrag";
		public static readonly int HeightDrag_FloatID = Shader.PropertyToID("_HeightDrag");
		public const string NewNormal_Vector = "_NewNormal";
		public static readonly int NewNormal_VectorID = Shader.PropertyToID("_NewNormal");
		public const string QueueOffset_Float = "_QueueOffset";
		public static readonly int QueueOffset_FloatID = Shader.PropertyToID("_QueueOffset");
		public const string QueueControl_Float = "_QueueControl";
		public static readonly int QueueControl_FloatID = Shader.PropertyToID("_QueueControl");
		public const string unity_Lightmaps_Texture = "unity_Lightmaps";
		public static readonly int unity_Lightmaps_TextureID = Shader.PropertyToID("unity_Lightmaps");
		public const string unity_LightmapsInd_Texture = "unity_LightmapsInd";
		public static readonly int unity_LightmapsInd_TextureID = Shader.PropertyToID("unity_LightmapsInd");
		public const string unity_ShadowMasks_Texture = "unity_ShadowMasks";
		public static readonly int unity_ShadowMasks_TextureID = Shader.PropertyToID("unity_ShadowMasks");
		
	} // class NatureManufacture_URP_Foliage_Cross
	
	public static class NatureManufacture_URP_Foliage_CrossSnow
	{
		// Members
		public const string AlphaCutoff_Float = "_AlphaCutoff";
		public static readonly int AlphaCutoff_FloatID = Shader.PropertyToID("_AlphaCutoff");
		public const string BaseColorMap_Texture = "_BaseColorMap";
		public static readonly int BaseColorMap_TextureID = Shader.PropertyToID("_BaseColorMap");
		public const string TilingOffset_Vector = "_TilingOffset";
		public static readonly int TilingOffset_VectorID = Shader.PropertyToID("_TilingOffset");
		public const string HealthyColor_Color = "_HealthyColor";
		public static readonly int HealthyColor_ColorID = Shader.PropertyToID("_HealthyColor");
		public const string DryColor_Color = "_DryColor";
		public static readonly int DryColor_ColorID = Shader.PropertyToID("_DryColor");
		public const string ColorNoiseSpread_Float = "_ColorNoiseSpread";
		public static readonly int ColorNoiseSpread_FloatID = Shader.PropertyToID("_ColorNoiseSpread");
		public const string NormalMap_Texture = "_NormalMap";
		public static readonly int NormalMap_TextureID = Shader.PropertyToID("_NormalMap");
		public const string NormalScale_Range = "_NormalScale";
		public static readonly int NormalScale_RangeID = Shader.PropertyToID("_NormalScale");
		public const string AORemapMax_Range = "_AORemapMax";
		public static readonly int AORemapMax_RangeID = Shader.PropertyToID("_AORemapMax");
		public const string SmoothnessRemapMax_Range = "_SmoothnessRemapMax";
		public static readonly int SmoothnessRemapMax_RangeID = Shader.PropertyToID("_SmoothnessRemapMax");
		public const string Specular_Range = "_Specular";
		public static readonly int Specular_RangeID = Shader.PropertyToID("_Specular");
		public const string Snow_Amount_Range = "_Snow_Amount";
		public static readonly int Snow_Amount_RangeID = Shader.PropertyToID("_Snow_Amount");
		public const string SnowBaseColor_Color = "_SnowBaseColor";
		public static readonly int SnowBaseColor_ColorID = Shader.PropertyToID("_SnowBaseColor");
		public const string SnowMaskA_Texture = "_SnowMaskA";
		public static readonly int SnowMaskA_TextureID = Shader.PropertyToID("_SnowMaskA");
		public const string SnowMaskTreshold_Range = "_SnowMaskTreshold";
		public static readonly int SnowMaskTreshold_RangeID = Shader.PropertyToID("_SnowMaskTreshold");
		public const string InvertSnowMask_Float = "_InvertSnowMask";
		public static readonly int InvertSnowMask_FloatID = Shader.PropertyToID("_InvertSnowMask");
		public const string SnowBaseColorMap_Texture = "_SnowBaseColorMap";
		public static readonly int SnowBaseColorMap_TextureID = Shader.PropertyToID("_SnowBaseColorMap");
		public const string SnowTilingOffset_Vector = "_SnowTilingOffset";
		public static readonly int SnowTilingOffset_VectorID = Shader.PropertyToID("_SnowTilingOffset");
		public const string SnowBlendHardness_Range = "_SnowBlendHardness";
		public static readonly int SnowBlendHardness_RangeID = Shader.PropertyToID("_SnowBlendHardness");
		public const string SnowAORemapMax_Range = "_SnowAORemapMax";
		public static readonly int SnowAORemapMax_RangeID = Shader.PropertyToID("_SnowAORemapMax");
		public const string SnowSmoothnessRemapMax_Range = "_SnowSmoothnessRemapMax";
		public static readonly int SnowSmoothnessRemapMax_RangeID = Shader.PropertyToID("_SnowSmoothnessRemapMax");
		public const string SnowSpecular_Range = "_SnowSpecular";
		public static readonly int SnowSpecular_RangeID = Shader.PropertyToID("_SnowSpecular");
		public const string Stiffness_Float = "_Stiffness";
		public static readonly int Stiffness_FloatID = Shader.PropertyToID("_Stiffness");
		public const string InitialBend_Float = "_InitialBend";
		public static readonly int InitialBend_FloatID = Shader.PropertyToID("_InitialBend");
		public const string Drag_Float = "_Drag";
		public static readonly int Drag_FloatID = Shader.PropertyToID("_Drag");
		public const string HeightDrag_Float = "_HeightDrag";
		public static readonly int HeightDrag_FloatID = Shader.PropertyToID("_HeightDrag");
		public const string NewNormal_Vector = "_NewNormal";
		public static readonly int NewNormal_VectorID = Shader.PropertyToID("_NewNormal");
		public const string QueueOffset_Float = "_QueueOffset";
		public static readonly int QueueOffset_FloatID = Shader.PropertyToID("_QueueOffset");
		public const string QueueControl_Float = "_QueueControl";
		public static readonly int QueueControl_FloatID = Shader.PropertyToID("_QueueControl");
		public const string unity_Lightmaps_Texture = "unity_Lightmaps";
		public static readonly int unity_Lightmaps_TextureID = Shader.PropertyToID("unity_Lightmaps");
		public const string unity_LightmapsInd_Texture = "unity_LightmapsInd";
		public static readonly int unity_LightmapsInd_TextureID = Shader.PropertyToID("unity_LightmapsInd");
		public const string unity_ShadowMasks_Texture = "unity_ShadowMasks";
		public static readonly int unity_ShadowMasks_TextureID = Shader.PropertyToID("unity_ShadowMasks");
		
	} // class NatureManufacture_URP_Foliage_CrossSnow
	
	public static class NatureManufacture_URP_Foliage_Foliage
	{
		// Members
		public const string AlphaCutoff_Float = "_AlphaCutoff";
		public static readonly int AlphaCutoff_FloatID = Shader.PropertyToID("_AlphaCutoff");
		public const string BaseColorMap_Texture = "_BaseColorMap";
		public static readonly int BaseColorMap_TextureID = Shader.PropertyToID("_BaseColorMap");
		public const string Tiling_and_Offset_Vector = "_Tiling_and_Offset";
		public static readonly int Tiling_and_Offset_VectorID = Shader.PropertyToID("_Tiling_and_Offset");
		public const string HealthyColor_Color = "_HealthyColor";
		public static readonly int HealthyColor_ColorID = Shader.PropertyToID("_HealthyColor");
		public const string DryColor_Color = "_DryColor";
		public static readonly int DryColor_ColorID = Shader.PropertyToID("_DryColor");
		public const string ColorNoiseSpread_Float = "_ColorNoiseSpread";
		public static readonly int ColorNoiseSpread_FloatID = Shader.PropertyToID("_ColorNoiseSpread");
		public const string NormalMap_Texture = "_NormalMap";
		public static readonly int NormalMap_TextureID = Shader.PropertyToID("_NormalMap");
		public const string InvertBackfaceNormal_Float = "_InvertBackfaceNormal";
		public static readonly int InvertBackfaceNormal_FloatID = Shader.PropertyToID("_InvertBackfaceNormal");
		public const string NormalScale_Range = "_NormalScale";
		public static readonly int NormalScale_RangeID = Shader.PropertyToID("_NormalScale");
		public const string MaskMap_Texture = "_MaskMap";
		public static readonly int MaskMap_TextureID = Shader.PropertyToID("_MaskMap");
		public const string AORemapMin_Range = "_AORemapMin";
		public static readonly int AORemapMin_RangeID = Shader.PropertyToID("_AORemapMin");
		public const string AORemapMax_Range = "_AORemapMax";
		public static readonly int AORemapMax_RangeID = Shader.PropertyToID("_AORemapMax");
		public const string SmoothnessRemapMin_Range = "_SmoothnessRemapMin";
		public static readonly int SmoothnessRemapMin_RangeID = Shader.PropertyToID("_SmoothnessRemapMin");
		public const string SmoothnessRemapMax_Range = "_SmoothnessRemapMax";
		public static readonly int SmoothnessRemapMax_RangeID = Shader.PropertyToID("_SmoothnessRemapMax");
		public const string Specular_Range = "_Specular";
		public static readonly int Specular_RangeID = Shader.PropertyToID("_Specular");
		public const string Stiffness_Float = "_Stiffness";
		public static readonly int Stiffness_FloatID = Shader.PropertyToID("_Stiffness");
		public const string InitialBend_Float = "_InitialBend";
		public static readonly int InitialBend_FloatID = Shader.PropertyToID("_InitialBend");
		public const string AlphaDrag_Float = "_AlphaDrag";
		public static readonly int AlphaDrag_FloatID = Shader.PropertyToID("_AlphaDrag");
		public const string Drag_Float = "_Drag";
		public static readonly int Drag_FloatID = Shader.PropertyToID("_Drag");
		public const string HeightDrag_Float = "_HeightDrag";
		public static readonly int HeightDrag_FloatID = Shader.PropertyToID("_HeightDrag");
		public const string ShiverDrag_Float = "_ShiverDrag";
		public static readonly int ShiverDrag_FloatID = Shader.PropertyToID("_ShiverDrag");
		public const string ShiverDirectionality_Float = "_ShiverDirectionality";
		public static readonly int ShiverDirectionality_FloatID = Shader.PropertyToID("_ShiverDirectionality");
		public const string WindColorMix_Float = "_WindColorMix";
		public static readonly int WindColorMix_FloatID = Shader.PropertyToID("_WindColorMix");
		public const string WindColorInfluence_Vector = "_WindColorInfluence";
		public static readonly int WindColorInfluence_VectorID = Shader.PropertyToID("_WindColorInfluence");
		public const string WindColorThreshold_Range = "_WindColorThreshold";
		public static readonly int WindColorThreshold_RangeID = Shader.PropertyToID("_WindColorThreshold");
		public const string NewNormal_Vector = "_NewNormal";
		public static readonly int NewNormal_VectorID = Shader.PropertyToID("_NewNormal");
		public const string CullFarStart_Float = "_CullFarStart";
		public static readonly int CullFarStart_FloatID = Shader.PropertyToID("_CullFarStart");
		public const string CullFarDistance_Float = "_CullFarDistance";
		public static readonly int CullFarDistance_FloatID = Shader.PropertyToID("_CullFarDistance");
		public const string WINDCOLORMIX_Float = "_WINDCOLORMIX";
		public static readonly int WINDCOLORMIX_FloatID = Shader.PropertyToID("_WINDCOLORMIX");
		public const string DISTANCEBLEND_Float = "_DISTANCEBLEND";
		public static readonly int DISTANCEBLEND_FloatID = Shader.PropertyToID("_DISTANCEBLEND");
		public const string QueueOffset_Float = "_QueueOffset";
		public static readonly int QueueOffset_FloatID = Shader.PropertyToID("_QueueOffset");
		public const string QueueControl_Float = "_QueueControl";
		public static readonly int QueueControl_FloatID = Shader.PropertyToID("_QueueControl");
		public const string unity_Lightmaps_Texture = "unity_Lightmaps";
		public static readonly int unity_Lightmaps_TextureID = Shader.PropertyToID("unity_Lightmaps");
		public const string unity_LightmapsInd_Texture = "unity_LightmapsInd";
		public static readonly int unity_LightmapsInd_TextureID = Shader.PropertyToID("unity_LightmapsInd");
		public const string unity_ShadowMasks_Texture = "unity_ShadowMasks";
		public static readonly int unity_ShadowMasks_TextureID = Shader.PropertyToID("unity_ShadowMasks");
		
	} // class NatureManufacture_URP_Foliage_Foliage
	
	public static class NatureManufacture_URP_Foliage_FoliageSnow
	{
		// Members
		public const string AlphaCutoff_Float = "_AlphaCutoff";
		public static readonly int AlphaCutoff_FloatID = Shader.PropertyToID("_AlphaCutoff");
		public const string BaseColorMap_Texture = "_BaseColorMap";
		public static readonly int BaseColorMap_TextureID = Shader.PropertyToID("_BaseColorMap");
		public const string TilingOffset_Vector = "_TilingOffset";
		public static readonly int TilingOffset_VectorID = Shader.PropertyToID("_TilingOffset");
		public const string HealthyColor_Color = "_HealthyColor";
		public static readonly int HealthyColor_ColorID = Shader.PropertyToID("_HealthyColor");
		public const string DryColor_Color = "_DryColor";
		public static readonly int DryColor_ColorID = Shader.PropertyToID("_DryColor");
		public const string ColorNoiseSpread_Float = "_ColorNoiseSpread";
		public static readonly int ColorNoiseSpread_FloatID = Shader.PropertyToID("_ColorNoiseSpread");
		public const string NormalMap_Texture = "_NormalMap";
		public static readonly int NormalMap_TextureID = Shader.PropertyToID("_NormalMap");
		public const string InvertBackfaceNormal_Float = "_InvertBackfaceNormal";
		public static readonly int InvertBackfaceNormal_FloatID = Shader.PropertyToID("_InvertBackfaceNormal");
		public const string NormalScale_Range = "_NormalScale";
		public static readonly int NormalScale_RangeID = Shader.PropertyToID("_NormalScale");
		public const string MaskMap_Texture = "_MaskMap";
		public static readonly int MaskMap_TextureID = Shader.PropertyToID("_MaskMap");
		public const string AORemapMin_Range = "_AORemapMin";
		public static readonly int AORemapMin_RangeID = Shader.PropertyToID("_AORemapMin");
		public const string AORemapMax_Range = "_AORemapMax";
		public static readonly int AORemapMax_RangeID = Shader.PropertyToID("_AORemapMax");
		public const string SmoothnessRemapMin_Range = "_SmoothnessRemapMin";
		public static readonly int SmoothnessRemapMin_RangeID = Shader.PropertyToID("_SmoothnessRemapMin");
		public const string SmoothnessRemapMax_Range = "_SmoothnessRemapMax";
		public static readonly int SmoothnessRemapMax_RangeID = Shader.PropertyToID("_SmoothnessRemapMax");
		public const string Specular_Range = "_Specular";
		public static readonly int Specular_RangeID = Shader.PropertyToID("_Specular");
		public const string Snow_Amount_Range = "_Snow_Amount";
		public static readonly int Snow_Amount_RangeID = Shader.PropertyToID("_Snow_Amount");
		public const string SnowMaskTreshold_Range = "_SnowMaskTreshold";
		public static readonly int SnowMaskTreshold_RangeID = Shader.PropertyToID("_SnowMaskTreshold");
		public const string SnowAngleOverlay_Range = "_SnowAngleOverlay";
		public static readonly int SnowAngleOverlay_RangeID = Shader.PropertyToID("_SnowAngleOverlay");
		public const string SnowBaseColor_Color = "_SnowBaseColor";
		public static readonly int SnowBaseColor_ColorID = Shader.PropertyToID("_SnowBaseColor");
		public const string SnowBaseColorMap_Texture = "_SnowBaseColorMap";
		public static readonly int SnowBaseColorMap_TextureID = Shader.PropertyToID("_SnowBaseColorMap");
		public const string SnowTilingOffset_Vector = "_SnowTilingOffset";
		public static readonly int SnowTilingOffset_VectorID = Shader.PropertyToID("_SnowTilingOffset");
		public const string SnowBlendHardness_Range = "_SnowBlendHardness";
		public static readonly int SnowBlendHardness_RangeID = Shader.PropertyToID("_SnowBlendHardness");
		public const string SnowNormalScale_Range = "_SnowNormalScale";
		public static readonly int SnowNormalScale_RangeID = Shader.PropertyToID("_SnowNormalScale");
		public const string SnowAORemapMax_Range = "_SnowAORemapMax";
		public static readonly int SnowAORemapMax_RangeID = Shader.PropertyToID("_SnowAORemapMax");
		public const string SnowSmoothnessRemapMax_Range = "_SnowSmoothnessRemapMax";
		public static readonly int SnowSmoothnessRemapMax_RangeID = Shader.PropertyToID("_SnowSmoothnessRemapMax");
		public const string SnowSpecular_Range = "_SnowSpecular";
		public static readonly int SnowSpecular_RangeID = Shader.PropertyToID("_SnowSpecular");
		public const string Stiffness_Float = "_Stiffness";
		public static readonly int Stiffness_FloatID = Shader.PropertyToID("_Stiffness");
		public const string InitialBend_Float = "_InitialBend";
		public static readonly int InitialBend_FloatID = Shader.PropertyToID("_InitialBend");
		public const string AlphaDrag_Float = "_AlphaDrag";
		public static readonly int AlphaDrag_FloatID = Shader.PropertyToID("_AlphaDrag");
		public const string Drag_Float = "_Drag";
		public static readonly int Drag_FloatID = Shader.PropertyToID("_Drag");
		public const string HeightDrag_Float = "_HeightDrag";
		public static readonly int HeightDrag_FloatID = Shader.PropertyToID("_HeightDrag");
		public const string ShiverDrag_Float = "_ShiverDrag";
		public static readonly int ShiverDrag_FloatID = Shader.PropertyToID("_ShiverDrag");
		public const string ShiverDirectionality_Float = "_ShiverDirectionality";
		public static readonly int ShiverDirectionality_FloatID = Shader.PropertyToID("_ShiverDirectionality");
		public const string WindColorThreshold_Range = "_WindColorThreshold";
		public static readonly int WindColorThreshold_RangeID = Shader.PropertyToID("_WindColorThreshold");
		public const string WindColorInfluence_Vector = "_WindColorInfluence";
		public static readonly int WindColorInfluence_VectorID = Shader.PropertyToID("_WindColorInfluence");
		public const string NewNormal_Vector = "_NewNormal";
		public static readonly int NewNormal_VectorID = Shader.PropertyToID("_NewNormal");
		public const string CullFarStart_Float = "_CullFarStart";
		public static readonly int CullFarStart_FloatID = Shader.PropertyToID("_CullFarStart");
		public const string CullFarDistance_Float = "_CullFarDistance";
		public static readonly int CullFarDistance_FloatID = Shader.PropertyToID("_CullFarDistance");
		public const string WINDCOLORMIX_Float = "_WINDCOLORMIX";
		public static readonly int WINDCOLORMIX_FloatID = Shader.PropertyToID("_WINDCOLORMIX");
		public const string DISTANCEBLEND_Float = "_DISTANCEBLEND";
		public static readonly int DISTANCEBLEND_FloatID = Shader.PropertyToID("_DISTANCEBLEND");
		public const string QueueOffset_Float = "_QueueOffset";
		public static readonly int QueueOffset_FloatID = Shader.PropertyToID("_QueueOffset");
		public const string QueueControl_Float = "_QueueControl";
		public static readonly int QueueControl_FloatID = Shader.PropertyToID("_QueueControl");
		public const string unity_Lightmaps_Texture = "unity_Lightmaps";
		public static readonly int unity_Lightmaps_TextureID = Shader.PropertyToID("unity_Lightmaps");
		public const string unity_LightmapsInd_Texture = "unity_LightmapsInd";
		public static readonly int unity_LightmapsInd_TextureID = Shader.PropertyToID("unity_LightmapsInd");
		public const string unity_ShadowMasks_Texture = "unity_ShadowMasks";
		public static readonly int unity_ShadowMasks_TextureID = Shader.PropertyToID("unity_ShadowMasks");
		
	} // class NatureManufacture_URP_Foliage_FoliageSnow
	
	public static class ShaderGraphs_TerrainGrass
	{
		// Members
		public const string Texture2D_E1B0D043_Texture = "Texture2D_E1B0D043";
		public static readonly int Texture2D_E1B0D043_TextureID = Shader.PropertyToID("Texture2D_E1B0D043");
		public const string Texture2D_9DCAAA49_Texture = "Texture2D_9DCAAA49";
		public static readonly int Texture2D_9DCAAA49_TextureID = Shader.PropertyToID("Texture2D_9DCAAA49");
		public const string Vector1_a6983181c8dc4691ba6a28a34c4223a6_Range = "Vector1_a6983181c8dc4691ba6a28a34c4223a6";
		public static readonly int Vector1_a6983181c8dc4691ba6a28a34c4223a6_RangeID = Shader.PropertyToID("Vector1_a6983181c8dc4691ba6a28a34c4223a6");
		public const string Texture2D_A5E0646_Texture = "Texture2D_A5E0646";
		public static readonly int Texture2D_A5E0646_TextureID = Shader.PropertyToID("Texture2D_A5E0646");
		public const string Vector1_8651797e3e304e108dbd25f9d5a426ba_Range = "Vector1_8651797e3e304e108dbd25f9d5a426ba";
		public static readonly int Vector1_8651797e3e304e108dbd25f9d5a426ba_RangeID = Shader.PropertyToID("Vector1_8651797e3e304e108dbd25f9d5a426ba");
		public const string Vector1_593c5cea6c4a42e993ed03ced4685732_Range = "Vector1_593c5cea6c4a42e993ed03ced4685732";
		public static readonly int Vector1_593c5cea6c4a42e993ed03ced4685732_RangeID = Shader.PropertyToID("Vector1_593c5cea6c4a42e993ed03ced4685732");
		public const string Vector1_a5b8b09028ce49a39f4d090894c89e22_Range = "Vector1_a5b8b09028ce49a39f4d090894c89e22";
		public static readonly int Vector1_a5b8b09028ce49a39f4d090894c89e22_RangeID = Shader.PropertyToID("Vector1_a5b8b09028ce49a39f4d090894c89e22");
		public const string Distance_Fade_Start_Float = "Distance_Fade_Start";
		public static readonly int Distance_Fade_Start_FloatID = Shader.PropertyToID("Distance_Fade_Start");
		public const string Distance_Fade_End_Float = "Distance_Fade_End";
		public static readonly int Distance_Fade_End_FloatID = Shader.PropertyToID("Distance_Fade_End");
		public const string Fade_Color_Color = "Fade_Color";
		public static readonly int Fade_Color_ColorID = Shader.PropertyToID("Fade_Color");
		public const string Animation_Cutoff_Float = "Animation_Cutoff";
		public static readonly int Animation_Cutoff_FloatID = Shader.PropertyToID("Animation_Cutoff");
		public const string Wind_Speed_Float = "Wind_Speed";
		public static readonly int Wind_Speed_FloatID = Shader.PropertyToID("Wind_Speed");
		public const string Wind_Intensity_Float = "Wind_Intensity";
		public static readonly int Wind_Intensity_FloatID = Shader.PropertyToID("Wind_Intensity");
		public const string Wind_Turbulence_Float = "Wind_Turbulence";
		public static readonly int Wind_Turbulence_FloatID = Shader.PropertyToID("Wind_Turbulence");
		public const string Wind_Wavelength_Float = "Wind_Wavelength";
		public static readonly int Wind_Wavelength_FloatID = Shader.PropertyToID("Wind_Wavelength");
		public const string Wind_Blast_Float = "Wind_Blast";
		public static readonly int Wind_Blast_FloatID = Shader.PropertyToID("Wind_Blast");
		public const string Wind_Ripples_Float = "Wind_Ripples";
		public static readonly int Wind_Ripples_FloatID = Shader.PropertyToID("Wind_Ripples");
		public const string Wind_Yaw_Float = "Wind_Yaw";
		public static readonly int Wind_Yaw_FloatID = Shader.PropertyToID("Wind_Yaw");
		public const string Texture2D_8713F080_Texture = "Texture2D_8713F080";
		public static readonly int Texture2D_8713F080_TextureID = Shader.PropertyToID("Texture2D_8713F080");
		public const string Thickness_Remap_Vector = "_Thickness_Remap";
		public static readonly int Thickness_Remap_VectorID = Shader.PropertyToID("_Thickness_Remap");
		public const string Subsurface_Scattering_Color_Color = "_Subsurface_Scattering_Color";
		public static readonly int Subsurface_Scattering_Color_ColorID = Shader.PropertyToID("_Subsurface_Scattering_Color");
		public const string WorkflowMode_Float = "_WorkflowMode";
		public static readonly int WorkflowMode_FloatID = Shader.PropertyToID("_WorkflowMode");
		public const string CastShadows_Float = "_CastShadows";
		public static readonly int CastShadows_FloatID = Shader.PropertyToID("_CastShadows");
		public const string ReceiveShadows_Float = "_ReceiveShadows";
		public static readonly int ReceiveShadows_FloatID = Shader.PropertyToID("_ReceiveShadows");
		public const string Surface_Float = "_Surface";
		public static readonly int Surface_FloatID = Shader.PropertyToID("_Surface");
		public const string Blend_Float = "_Blend";
		public static readonly int Blend_FloatID = Shader.PropertyToID("_Blend");
		public const string AlphaClip_Float = "_AlphaClip";
		public static readonly int AlphaClip_FloatID = Shader.PropertyToID("_AlphaClip");
		public const string SrcBlend_Float = "_SrcBlend";
		public static readonly int SrcBlend_FloatID = Shader.PropertyToID("_SrcBlend");
		public const string DstBlend_Float = "_DstBlend";
		public static readonly int DstBlend_FloatID = Shader.PropertyToID("_DstBlend");
		public const string ZWrite_Float = "_ZWrite";
		public static readonly int ZWrite_FloatID = Shader.PropertyToID("_ZWrite");
		public const string ZWriteControl_Float = "_ZWriteControl";
		public static readonly int ZWriteControl_FloatID = Shader.PropertyToID("_ZWriteControl");
		public const string ZTest_Float = "_ZTest";
		public static readonly int ZTest_FloatID = Shader.PropertyToID("_ZTest");
		public const string Cull_Float = "_Cull";
		public static readonly int Cull_FloatID = Shader.PropertyToID("_Cull");
		public const string QueueOffset_Float = "_QueueOffset";
		public static readonly int QueueOffset_FloatID = Shader.PropertyToID("_QueueOffset");
		public const string QueueControl_Float = "_QueueControl";
		public static readonly int QueueControl_FloatID = Shader.PropertyToID("_QueueControl");
		public const string unity_Lightmaps_Texture = "unity_Lightmaps";
		public static readonly int unity_Lightmaps_TextureID = Shader.PropertyToID("unity_Lightmaps");
		public const string unity_LightmapsInd_Texture = "unity_LightmapsInd";
		public static readonly int unity_LightmapsInd_TextureID = Shader.PropertyToID("unity_LightmapsInd");
		public const string unity_ShadowMasks_Texture = "unity_ShadowMasks";
		public static readonly int unity_ShadowMasks_TextureID = Shader.PropertyToID("unity_ShadowMasks");
		public const string BUILTIN_Surface_Float = "_BUILTIN_Surface";
		public static readonly int BUILTIN_Surface_FloatID = Shader.PropertyToID("_BUILTIN_Surface");
		public const string BUILTIN_Blend_Float = "_BUILTIN_Blend";
		public static readonly int BUILTIN_Blend_FloatID = Shader.PropertyToID("_BUILTIN_Blend");
		public const string BUILTIN_AlphaClip_Float = "_BUILTIN_AlphaClip";
		public static readonly int BUILTIN_AlphaClip_FloatID = Shader.PropertyToID("_BUILTIN_AlphaClip");
		public const string BUILTIN_SrcBlend_Float = "_BUILTIN_SrcBlend";
		public static readonly int BUILTIN_SrcBlend_FloatID = Shader.PropertyToID("_BUILTIN_SrcBlend");
		public const string BUILTIN_DstBlend_Float = "_BUILTIN_DstBlend";
		public static readonly int BUILTIN_DstBlend_FloatID = Shader.PropertyToID("_BUILTIN_DstBlend");
		public const string BUILTIN_ZWrite_Float = "_BUILTIN_ZWrite";
		public static readonly int BUILTIN_ZWrite_FloatID = Shader.PropertyToID("_BUILTIN_ZWrite");
		public const string BUILTIN_ZWriteControl_Float = "_BUILTIN_ZWriteControl";
		public static readonly int BUILTIN_ZWriteControl_FloatID = Shader.PropertyToID("_BUILTIN_ZWriteControl");
		public const string BUILTIN_ZTest_Float = "_BUILTIN_ZTest";
		public static readonly int BUILTIN_ZTest_FloatID = Shader.PropertyToID("_BUILTIN_ZTest");
		public const string BUILTIN_CullMode_Float = "_BUILTIN_CullMode";
		public static readonly int BUILTIN_CullMode_FloatID = Shader.PropertyToID("_BUILTIN_CullMode");
		public const string BUILTIN_QueueOffset_Float = "_BUILTIN_QueueOffset";
		public static readonly int BUILTIN_QueueOffset_FloatID = Shader.PropertyToID("_BUILTIN_QueueOffset");
		public const string BUILTIN_QueueControl_Float = "_BUILTIN_QueueControl";
		public static readonly int BUILTIN_QueueControl_FloatID = Shader.PropertyToID("_BUILTIN_QueueControl");
		
	} // class ShaderGraphs_TerrainGrass
	
	public static class TextMeshPro_BitmapCustomAtlas
	{
		// Members
		public const string MainTex_Texture = "_MainTex";
		public static readonly int MainTex_TextureID = Shader.PropertyToID("_MainTex");
		public const string FaceTex_Texture = "_FaceTex";
		public static readonly int FaceTex_TextureID = Shader.PropertyToID("_FaceTex");
		public const string FaceColor_Color = "_FaceColor";
		public static readonly int FaceColor_ColorID = Shader.PropertyToID("_FaceColor");
		public const string VertexOffsetX_Float = "_VertexOffsetX";
		public static readonly int VertexOffsetX_FloatID = Shader.PropertyToID("_VertexOffsetX");
		public const string VertexOffsetY_Float = "_VertexOffsetY";
		public static readonly int VertexOffsetY_FloatID = Shader.PropertyToID("_VertexOffsetY");
		public const string MaskSoftnessX_Float = "_MaskSoftnessX";
		public static readonly int MaskSoftnessX_FloatID = Shader.PropertyToID("_MaskSoftnessX");
		public const string MaskSoftnessY_Float = "_MaskSoftnessY";
		public static readonly int MaskSoftnessY_FloatID = Shader.PropertyToID("_MaskSoftnessY");
		public const string ClipRect_Vector = "_ClipRect";
		public static readonly int ClipRect_VectorID = Shader.PropertyToID("_ClipRect");
		public const string Padding_Float = "_Padding";
		public static readonly int Padding_FloatID = Shader.PropertyToID("_Padding");
		public const string StencilComp_Float = "_StencilComp";
		public static readonly int StencilComp_FloatID = Shader.PropertyToID("_StencilComp");
		public const string Stencil_Float = "_Stencil";
		public static readonly int Stencil_FloatID = Shader.PropertyToID("_Stencil");
		public const string StencilOp_Float = "_StencilOp";
		public static readonly int StencilOp_FloatID = Shader.PropertyToID("_StencilOp");
		public const string StencilWriteMask_Float = "_StencilWriteMask";
		public static readonly int StencilWriteMask_FloatID = Shader.PropertyToID("_StencilWriteMask");
		public const string StencilReadMask_Float = "_StencilReadMask";
		public static readonly int StencilReadMask_FloatID = Shader.PropertyToID("_StencilReadMask");
		public const string CullMode_Float = "_CullMode";
		public static readonly int CullMode_FloatID = Shader.PropertyToID("_CullMode");
		public const string ColorMask_Float = "_ColorMask";
		public static readonly int ColorMask_FloatID = Shader.PropertyToID("_ColorMask");
		
	} // class TextMeshPro_BitmapCustomAtlas
	
	public static class TextMeshPro_Mobile_Bitmap
	{
		// Members
		public const string MainTex_Texture = "_MainTex";
		public static readonly int MainTex_TextureID = Shader.PropertyToID("_MainTex");
		public const string Color_Color = "_Color";
		public static readonly int Color_ColorID = Shader.PropertyToID("_Color");
		public const string DiffusePower_Range = "_DiffusePower";
		public static readonly int DiffusePower_RangeID = Shader.PropertyToID("_DiffusePower");
		public const string VertexOffsetX_Float = "_VertexOffsetX";
		public static readonly int VertexOffsetX_FloatID = Shader.PropertyToID("_VertexOffsetX");
		public const string VertexOffsetY_Float = "_VertexOffsetY";
		public static readonly int VertexOffsetY_FloatID = Shader.PropertyToID("_VertexOffsetY");
		public const string MaskSoftnessX_Float = "_MaskSoftnessX";
		public static readonly int MaskSoftnessX_FloatID = Shader.PropertyToID("_MaskSoftnessX");
		public const string MaskSoftnessY_Float = "_MaskSoftnessY";
		public static readonly int MaskSoftnessY_FloatID = Shader.PropertyToID("_MaskSoftnessY");
		public const string ClipRect_Vector = "_ClipRect";
		public static readonly int ClipRect_VectorID = Shader.PropertyToID("_ClipRect");
		public const string StencilComp_Float = "_StencilComp";
		public static readonly int StencilComp_FloatID = Shader.PropertyToID("_StencilComp");
		public const string Stencil_Float = "_Stencil";
		public static readonly int Stencil_FloatID = Shader.PropertyToID("_Stencil");
		public const string StencilOp_Float = "_StencilOp";
		public static readonly int StencilOp_FloatID = Shader.PropertyToID("_StencilOp");
		public const string StencilWriteMask_Float = "_StencilWriteMask";
		public static readonly int StencilWriteMask_FloatID = Shader.PropertyToID("_StencilWriteMask");
		public const string StencilReadMask_Float = "_StencilReadMask";
		public static readonly int StencilReadMask_FloatID = Shader.PropertyToID("_StencilReadMask");
		public const string CullMode_Float = "_CullMode";
		public static readonly int CullMode_FloatID = Shader.PropertyToID("_CullMode");
		public const string ColorMask_Float = "_ColorMask";
		public static readonly int ColorMask_FloatID = Shader.PropertyToID("_ColorMask");
		
	} // class TextMeshPro_Mobile_Bitmap
	
	public static class TextMeshPro_Bitmap
	{
		// Members
		public const string MainTex_Texture = "_MainTex";
		public static readonly int MainTex_TextureID = Shader.PropertyToID("_MainTex");
		public const string FaceTex_Texture = "_FaceTex";
		public static readonly int FaceTex_TextureID = Shader.PropertyToID("_FaceTex");
		public const string FaceColor_Color = "_FaceColor";
		public static readonly int FaceColor_ColorID = Shader.PropertyToID("_FaceColor");
		public const string VertexOffsetX_Float = "_VertexOffsetX";
		public static readonly int VertexOffsetX_FloatID = Shader.PropertyToID("_VertexOffsetX");
		public const string VertexOffsetY_Float = "_VertexOffsetY";
		public static readonly int VertexOffsetY_FloatID = Shader.PropertyToID("_VertexOffsetY");
		public const string MaskSoftnessX_Float = "_MaskSoftnessX";
		public static readonly int MaskSoftnessX_FloatID = Shader.PropertyToID("_MaskSoftnessX");
		public const string MaskSoftnessY_Float = "_MaskSoftnessY";
		public static readonly int MaskSoftnessY_FloatID = Shader.PropertyToID("_MaskSoftnessY");
		public const string ClipRect_Vector = "_ClipRect";
		public static readonly int ClipRect_VectorID = Shader.PropertyToID("_ClipRect");
		public const string StencilComp_Float = "_StencilComp";
		public static readonly int StencilComp_FloatID = Shader.PropertyToID("_StencilComp");
		public const string Stencil_Float = "_Stencil";
		public static readonly int Stencil_FloatID = Shader.PropertyToID("_Stencil");
		public const string StencilOp_Float = "_StencilOp";
		public static readonly int StencilOp_FloatID = Shader.PropertyToID("_StencilOp");
		public const string StencilWriteMask_Float = "_StencilWriteMask";
		public static readonly int StencilWriteMask_FloatID = Shader.PropertyToID("_StencilWriteMask");
		public const string StencilReadMask_Float = "_StencilReadMask";
		public static readonly int StencilReadMask_FloatID = Shader.PropertyToID("_StencilReadMask");
		public const string CullMode_Float = "_CullMode";
		public static readonly int CullMode_FloatID = Shader.PropertyToID("_CullMode");
		public const string ColorMask_Float = "_ColorMask";
		public static readonly int ColorMask_FloatID = Shader.PropertyToID("_ColorMask");
		
	} // class TextMeshPro_Bitmap
	
	public static class TextMeshPro_DistanceFieldOverlay
	{
		// Members
		public const string FaceTex_Texture = "_FaceTex";
		public static readonly int FaceTex_TextureID = Shader.PropertyToID("_FaceTex");
		public const string FaceUVSpeedX_Range = "_FaceUVSpeedX";
		public static readonly int FaceUVSpeedX_RangeID = Shader.PropertyToID("_FaceUVSpeedX");
		public const string FaceUVSpeedY_Range = "_FaceUVSpeedY";
		public static readonly int FaceUVSpeedY_RangeID = Shader.PropertyToID("_FaceUVSpeedY");
		public const string FaceColor_Color = "_FaceColor";
		public static readonly int FaceColor_ColorID = Shader.PropertyToID("_FaceColor");
		public const string FaceDilate_Range = "_FaceDilate";
		public static readonly int FaceDilate_RangeID = Shader.PropertyToID("_FaceDilate");
		public const string OutlineColor_Color = "_OutlineColor";
		public static readonly int OutlineColor_ColorID = Shader.PropertyToID("_OutlineColor");
		public const string OutlineTex_Texture = "_OutlineTex";
		public static readonly int OutlineTex_TextureID = Shader.PropertyToID("_OutlineTex");
		public const string OutlineUVSpeedX_Range = "_OutlineUVSpeedX";
		public static readonly int OutlineUVSpeedX_RangeID = Shader.PropertyToID("_OutlineUVSpeedX");
		public const string OutlineUVSpeedY_Range = "_OutlineUVSpeedY";
		public static readonly int OutlineUVSpeedY_RangeID = Shader.PropertyToID("_OutlineUVSpeedY");
		public const string OutlineWidth_Range = "_OutlineWidth";
		public static readonly int OutlineWidth_RangeID = Shader.PropertyToID("_OutlineWidth");
		public const string OutlineSoftness_Range = "_OutlineSoftness";
		public static readonly int OutlineSoftness_RangeID = Shader.PropertyToID("_OutlineSoftness");
		public const string Bevel_Range = "_Bevel";
		public static readonly int Bevel_RangeID = Shader.PropertyToID("_Bevel");
		public const string BevelOffset_Range = "_BevelOffset";
		public static readonly int BevelOffset_RangeID = Shader.PropertyToID("_BevelOffset");
		public const string BevelWidth_Range = "_BevelWidth";
		public static readonly int BevelWidth_RangeID = Shader.PropertyToID("_BevelWidth");
		public const string BevelClamp_Range = "_BevelClamp";
		public static readonly int BevelClamp_RangeID = Shader.PropertyToID("_BevelClamp");
		public const string BevelRoundness_Range = "_BevelRoundness";
		public static readonly int BevelRoundness_RangeID = Shader.PropertyToID("_BevelRoundness");
		public const string LightAngle_Range = "_LightAngle";
		public static readonly int LightAngle_RangeID = Shader.PropertyToID("_LightAngle");
		public const string SpecularColor_Color = "_SpecularColor";
		public static readonly int SpecularColor_ColorID = Shader.PropertyToID("_SpecularColor");
		public const string SpecularPower_Range = "_SpecularPower";
		public static readonly int SpecularPower_RangeID = Shader.PropertyToID("_SpecularPower");
		public const string Reflectivity_Range = "_Reflectivity";
		public static readonly int Reflectivity_RangeID = Shader.PropertyToID("_Reflectivity");
		public const string Diffuse_Range = "_Diffuse";
		public static readonly int Diffuse_RangeID = Shader.PropertyToID("_Diffuse");
		public const string Ambient_Range = "_Ambient";
		public static readonly int Ambient_RangeID = Shader.PropertyToID("_Ambient");
		public const string BumpMap_Texture = "_BumpMap";
		public static readonly int BumpMap_TextureID = Shader.PropertyToID("_BumpMap");
		public const string BumpOutline_Range = "_BumpOutline";
		public static readonly int BumpOutline_RangeID = Shader.PropertyToID("_BumpOutline");
		public const string BumpFace_Range = "_BumpFace";
		public static readonly int BumpFace_RangeID = Shader.PropertyToID("_BumpFace");
		public const string ReflectFaceColor_Color = "_ReflectFaceColor";
		public static readonly int ReflectFaceColor_ColorID = Shader.PropertyToID("_ReflectFaceColor");
		public const string ReflectOutlineColor_Color = "_ReflectOutlineColor";
		public static readonly int ReflectOutlineColor_ColorID = Shader.PropertyToID("_ReflectOutlineColor");
		public const string Cube_Texture = "_Cube";
		public static readonly int Cube_TextureID = Shader.PropertyToID("_Cube");
		public const string EnvMatrixRotation_Vector = "_EnvMatrixRotation";
		public static readonly int EnvMatrixRotation_VectorID = Shader.PropertyToID("_EnvMatrixRotation");
		public const string UnderlayColor_Color = "_UnderlayColor";
		public static readonly int UnderlayColor_ColorID = Shader.PropertyToID("_UnderlayColor");
		public const string UnderlayOffsetX_Range = "_UnderlayOffsetX";
		public static readonly int UnderlayOffsetX_RangeID = Shader.PropertyToID("_UnderlayOffsetX");
		public const string UnderlayOffsetY_Range = "_UnderlayOffsetY";
		public static readonly int UnderlayOffsetY_RangeID = Shader.PropertyToID("_UnderlayOffsetY");
		public const string UnderlayDilate_Range = "_UnderlayDilate";
		public static readonly int UnderlayDilate_RangeID = Shader.PropertyToID("_UnderlayDilate");
		public const string UnderlaySoftness_Range = "_UnderlaySoftness";
		public static readonly int UnderlaySoftness_RangeID = Shader.PropertyToID("_UnderlaySoftness");
		public const string GlowColor_Color = "_GlowColor";
		public static readonly int GlowColor_ColorID = Shader.PropertyToID("_GlowColor");
		public const string GlowOffset_Range = "_GlowOffset";
		public static readonly int GlowOffset_RangeID = Shader.PropertyToID("_GlowOffset");
		public const string GlowInner_Range = "_GlowInner";
		public static readonly int GlowInner_RangeID = Shader.PropertyToID("_GlowInner");
		public const string GlowOuter_Range = "_GlowOuter";
		public static readonly int GlowOuter_RangeID = Shader.PropertyToID("_GlowOuter");
		public const string GlowPower_Range = "_GlowPower";
		public static readonly int GlowPower_RangeID = Shader.PropertyToID("_GlowPower");
		public const string WeightNormal_Float = "_WeightNormal";
		public static readonly int WeightNormal_FloatID = Shader.PropertyToID("_WeightNormal");
		public const string WeightBold_Float = "_WeightBold";
		public static readonly int WeightBold_FloatID = Shader.PropertyToID("_WeightBold");
		public const string ShaderFlags_Float = "_ShaderFlags";
		public static readonly int ShaderFlags_FloatID = Shader.PropertyToID("_ShaderFlags");
		public const string ScaleRatioA_Float = "_ScaleRatioA";
		public static readonly int ScaleRatioA_FloatID = Shader.PropertyToID("_ScaleRatioA");
		public const string ScaleRatioB_Float = "_ScaleRatioB";
		public static readonly int ScaleRatioB_FloatID = Shader.PropertyToID("_ScaleRatioB");
		public const string ScaleRatioC_Float = "_ScaleRatioC";
		public static readonly int ScaleRatioC_FloatID = Shader.PropertyToID("_ScaleRatioC");
		public const string MainTex_Texture = "_MainTex";
		public static readonly int MainTex_TextureID = Shader.PropertyToID("_MainTex");
		public const string TextureWidth_Float = "_TextureWidth";
		public static readonly int TextureWidth_FloatID = Shader.PropertyToID("_TextureWidth");
		public const string TextureHeight_Float = "_TextureHeight";
		public static readonly int TextureHeight_FloatID = Shader.PropertyToID("_TextureHeight");
		public const string GradientScale_Float = "_GradientScale";
		public static readonly int GradientScale_FloatID = Shader.PropertyToID("_GradientScale");
		public const string ScaleX_Float = "_ScaleX";
		public static readonly int ScaleX_FloatID = Shader.PropertyToID("_ScaleX");
		public const string ScaleY_Float = "_ScaleY";
		public static readonly int ScaleY_FloatID = Shader.PropertyToID("_ScaleY");
		public const string PerspectiveFilter_Range = "_PerspectiveFilter";
		public static readonly int PerspectiveFilter_RangeID = Shader.PropertyToID("_PerspectiveFilter");
		public const string Sharpness_Range = "_Sharpness";
		public static readonly int Sharpness_RangeID = Shader.PropertyToID("_Sharpness");
		public const string VertexOffsetX_Float = "_VertexOffsetX";
		public static readonly int VertexOffsetX_FloatID = Shader.PropertyToID("_VertexOffsetX");
		public const string VertexOffsetY_Float = "_VertexOffsetY";
		public static readonly int VertexOffsetY_FloatID = Shader.PropertyToID("_VertexOffsetY");
		public const string MaskCoord_Vector = "_MaskCoord";
		public static readonly int MaskCoord_VectorID = Shader.PropertyToID("_MaskCoord");
		public const string ClipRect_Vector = "_ClipRect";
		public static readonly int ClipRect_VectorID = Shader.PropertyToID("_ClipRect");
		public const string MaskSoftnessX_Float = "_MaskSoftnessX";
		public static readonly int MaskSoftnessX_FloatID = Shader.PropertyToID("_MaskSoftnessX");
		public const string MaskSoftnessY_Float = "_MaskSoftnessY";
		public static readonly int MaskSoftnessY_FloatID = Shader.PropertyToID("_MaskSoftnessY");
		public const string StencilComp_Float = "_StencilComp";
		public static readonly int StencilComp_FloatID = Shader.PropertyToID("_StencilComp");
		public const string Stencil_Float = "_Stencil";
		public static readonly int Stencil_FloatID = Shader.PropertyToID("_Stencil");
		public const string StencilOp_Float = "_StencilOp";
		public static readonly int StencilOp_FloatID = Shader.PropertyToID("_StencilOp");
		public const string StencilWriteMask_Float = "_StencilWriteMask";
		public static readonly int StencilWriteMask_FloatID = Shader.PropertyToID("_StencilWriteMask");
		public const string StencilReadMask_Float = "_StencilReadMask";
		public static readonly int StencilReadMask_FloatID = Shader.PropertyToID("_StencilReadMask");
		public const string CullMode_Float = "_CullMode";
		public static readonly int CullMode_FloatID = Shader.PropertyToID("_CullMode");
		public const string ColorMask_Float = "_ColorMask";
		public static readonly int ColorMask_FloatID = Shader.PropertyToID("_ColorMask");
		
	} // class TextMeshPro_DistanceFieldOverlay
	
	public static class TextMeshPro_DistanceFieldSSD
	{
		// Members
		public const string FaceTex_Texture = "_FaceTex";
		public static readonly int FaceTex_TextureID = Shader.PropertyToID("_FaceTex");
		public const string FaceUVSpeedX_Range = "_FaceUVSpeedX";
		public static readonly int FaceUVSpeedX_RangeID = Shader.PropertyToID("_FaceUVSpeedX");
		public const string FaceUVSpeedY_Range = "_FaceUVSpeedY";
		public static readonly int FaceUVSpeedY_RangeID = Shader.PropertyToID("_FaceUVSpeedY");
		public const string FaceColor_Color = "_FaceColor";
		public static readonly int FaceColor_ColorID = Shader.PropertyToID("_FaceColor");
		public const string FaceDilate_Range = "_FaceDilate";
		public static readonly int FaceDilate_RangeID = Shader.PropertyToID("_FaceDilate");
		public const string OutlineColor_Color = "_OutlineColor";
		public static readonly int OutlineColor_ColorID = Shader.PropertyToID("_OutlineColor");
		public const string OutlineTex_Texture = "_OutlineTex";
		public static readonly int OutlineTex_TextureID = Shader.PropertyToID("_OutlineTex");
		public const string OutlineUVSpeedX_Range = "_OutlineUVSpeedX";
		public static readonly int OutlineUVSpeedX_RangeID = Shader.PropertyToID("_OutlineUVSpeedX");
		public const string OutlineUVSpeedY_Range = "_OutlineUVSpeedY";
		public static readonly int OutlineUVSpeedY_RangeID = Shader.PropertyToID("_OutlineUVSpeedY");
		public const string OutlineWidth_Range = "_OutlineWidth";
		public static readonly int OutlineWidth_RangeID = Shader.PropertyToID("_OutlineWidth");
		public const string OutlineSoftness_Range = "_OutlineSoftness";
		public static readonly int OutlineSoftness_RangeID = Shader.PropertyToID("_OutlineSoftness");
		public const string Bevel_Range = "_Bevel";
		public static readonly int Bevel_RangeID = Shader.PropertyToID("_Bevel");
		public const string BevelOffset_Range = "_BevelOffset";
		public static readonly int BevelOffset_RangeID = Shader.PropertyToID("_BevelOffset");
		public const string BevelWidth_Range = "_BevelWidth";
		public static readonly int BevelWidth_RangeID = Shader.PropertyToID("_BevelWidth");
		public const string BevelClamp_Range = "_BevelClamp";
		public static readonly int BevelClamp_RangeID = Shader.PropertyToID("_BevelClamp");
		public const string BevelRoundness_Range = "_BevelRoundness";
		public static readonly int BevelRoundness_RangeID = Shader.PropertyToID("_BevelRoundness");
		public const string LightAngle_Range = "_LightAngle";
		public static readonly int LightAngle_RangeID = Shader.PropertyToID("_LightAngle");
		public const string SpecularColor_Color = "_SpecularColor";
		public static readonly int SpecularColor_ColorID = Shader.PropertyToID("_SpecularColor");
		public const string SpecularPower_Range = "_SpecularPower";
		public static readonly int SpecularPower_RangeID = Shader.PropertyToID("_SpecularPower");
		public const string Reflectivity_Range = "_Reflectivity";
		public static readonly int Reflectivity_RangeID = Shader.PropertyToID("_Reflectivity");
		public const string Diffuse_Range = "_Diffuse";
		public static readonly int Diffuse_RangeID = Shader.PropertyToID("_Diffuse");
		public const string Ambient_Range = "_Ambient";
		public static readonly int Ambient_RangeID = Shader.PropertyToID("_Ambient");
		public const string BumpMap_Texture = "_BumpMap";
		public static readonly int BumpMap_TextureID = Shader.PropertyToID("_BumpMap");
		public const string BumpOutline_Range = "_BumpOutline";
		public static readonly int BumpOutline_RangeID = Shader.PropertyToID("_BumpOutline");
		public const string BumpFace_Range = "_BumpFace";
		public static readonly int BumpFace_RangeID = Shader.PropertyToID("_BumpFace");
		public const string ReflectFaceColor_Color = "_ReflectFaceColor";
		public static readonly int ReflectFaceColor_ColorID = Shader.PropertyToID("_ReflectFaceColor");
		public const string ReflectOutlineColor_Color = "_ReflectOutlineColor";
		public static readonly int ReflectOutlineColor_ColorID = Shader.PropertyToID("_ReflectOutlineColor");
		public const string Cube_Texture = "_Cube";
		public static readonly int Cube_TextureID = Shader.PropertyToID("_Cube");
		public const string EnvMatrixRotation_Vector = "_EnvMatrixRotation";
		public static readonly int EnvMatrixRotation_VectorID = Shader.PropertyToID("_EnvMatrixRotation");
		public const string UnderlayColor_Color = "_UnderlayColor";
		public static readonly int UnderlayColor_ColorID = Shader.PropertyToID("_UnderlayColor");
		public const string UnderlayOffsetX_Range = "_UnderlayOffsetX";
		public static readonly int UnderlayOffsetX_RangeID = Shader.PropertyToID("_UnderlayOffsetX");
		public const string UnderlayOffsetY_Range = "_UnderlayOffsetY";
		public static readonly int UnderlayOffsetY_RangeID = Shader.PropertyToID("_UnderlayOffsetY");
		public const string UnderlayDilate_Range = "_UnderlayDilate";
		public static readonly int UnderlayDilate_RangeID = Shader.PropertyToID("_UnderlayDilate");
		public const string UnderlaySoftness_Range = "_UnderlaySoftness";
		public static readonly int UnderlaySoftness_RangeID = Shader.PropertyToID("_UnderlaySoftness");
		public const string GlowColor_Color = "_GlowColor";
		public static readonly int GlowColor_ColorID = Shader.PropertyToID("_GlowColor");
		public const string GlowOffset_Range = "_GlowOffset";
		public static readonly int GlowOffset_RangeID = Shader.PropertyToID("_GlowOffset");
		public const string GlowInner_Range = "_GlowInner";
		public static readonly int GlowInner_RangeID = Shader.PropertyToID("_GlowInner");
		public const string GlowOuter_Range = "_GlowOuter";
		public static readonly int GlowOuter_RangeID = Shader.PropertyToID("_GlowOuter");
		public const string GlowPower_Range = "_GlowPower";
		public static readonly int GlowPower_RangeID = Shader.PropertyToID("_GlowPower");
		public const string WeightNormal_Float = "_WeightNormal";
		public static readonly int WeightNormal_FloatID = Shader.PropertyToID("_WeightNormal");
		public const string WeightBold_Float = "_WeightBold";
		public static readonly int WeightBold_FloatID = Shader.PropertyToID("_WeightBold");
		public const string ShaderFlags_Float = "_ShaderFlags";
		public static readonly int ShaderFlags_FloatID = Shader.PropertyToID("_ShaderFlags");
		public const string ScaleRatioA_Float = "_ScaleRatioA";
		public static readonly int ScaleRatioA_FloatID = Shader.PropertyToID("_ScaleRatioA");
		public const string ScaleRatioB_Float = "_ScaleRatioB";
		public static readonly int ScaleRatioB_FloatID = Shader.PropertyToID("_ScaleRatioB");
		public const string ScaleRatioC_Float = "_ScaleRatioC";
		public static readonly int ScaleRatioC_FloatID = Shader.PropertyToID("_ScaleRatioC");
		public const string MainTex_Texture = "_MainTex";
		public static readonly int MainTex_TextureID = Shader.PropertyToID("_MainTex");
		public const string TextureWidth_Float = "_TextureWidth";
		public static readonly int TextureWidth_FloatID = Shader.PropertyToID("_TextureWidth");
		public const string TextureHeight_Float = "_TextureHeight";
		public static readonly int TextureHeight_FloatID = Shader.PropertyToID("_TextureHeight");
		public const string GradientScale_Float = "_GradientScale";
		public static readonly int GradientScale_FloatID = Shader.PropertyToID("_GradientScale");
		public const string ScaleX_Float = "_ScaleX";
		public static readonly int ScaleX_FloatID = Shader.PropertyToID("_ScaleX");
		public const string ScaleY_Float = "_ScaleY";
		public static readonly int ScaleY_FloatID = Shader.PropertyToID("_ScaleY");
		public const string PerspectiveFilter_Range = "_PerspectiveFilter";
		public static readonly int PerspectiveFilter_RangeID = Shader.PropertyToID("_PerspectiveFilter");
		public const string Sharpness_Range = "_Sharpness";
		public static readonly int Sharpness_RangeID = Shader.PropertyToID("_Sharpness");
		public const string VertexOffsetX_Float = "_VertexOffsetX";
		public static readonly int VertexOffsetX_FloatID = Shader.PropertyToID("_VertexOffsetX");
		public const string VertexOffsetY_Float = "_VertexOffsetY";
		public static readonly int VertexOffsetY_FloatID = Shader.PropertyToID("_VertexOffsetY");
		public const string MaskCoord_Vector = "_MaskCoord";
		public static readonly int MaskCoord_VectorID = Shader.PropertyToID("_MaskCoord");
		public const string ClipRect_Vector = "_ClipRect";
		public static readonly int ClipRect_VectorID = Shader.PropertyToID("_ClipRect");
		public const string MaskSoftnessX_Float = "_MaskSoftnessX";
		public static readonly int MaskSoftnessX_FloatID = Shader.PropertyToID("_MaskSoftnessX");
		public const string MaskSoftnessY_Float = "_MaskSoftnessY";
		public static readonly int MaskSoftnessY_FloatID = Shader.PropertyToID("_MaskSoftnessY");
		public const string StencilComp_Float = "_StencilComp";
		public static readonly int StencilComp_FloatID = Shader.PropertyToID("_StencilComp");
		public const string Stencil_Float = "_Stencil";
		public static readonly int Stencil_FloatID = Shader.PropertyToID("_Stencil");
		public const string StencilOp_Float = "_StencilOp";
		public static readonly int StencilOp_FloatID = Shader.PropertyToID("_StencilOp");
		public const string StencilWriteMask_Float = "_StencilWriteMask";
		public static readonly int StencilWriteMask_FloatID = Shader.PropertyToID("_StencilWriteMask");
		public const string StencilReadMask_Float = "_StencilReadMask";
		public static readonly int StencilReadMask_FloatID = Shader.PropertyToID("_StencilReadMask");
		public const string CullMode_Float = "_CullMode";
		public static readonly int CullMode_FloatID = Shader.PropertyToID("_CullMode");
		public const string ColorMask_Float = "_ColorMask";
		public static readonly int ColorMask_FloatID = Shader.PropertyToID("_ColorMask");
		
	} // class TextMeshPro_DistanceFieldSSD
	
	public static class TextMeshPro_Mobile_DistanceField_Masking
	{
		// Members
		public const string FaceColor_Color = "_FaceColor";
		public static readonly int FaceColor_ColorID = Shader.PropertyToID("_FaceColor");
		public const string FaceDilate_Range = "_FaceDilate";
		public static readonly int FaceDilate_RangeID = Shader.PropertyToID("_FaceDilate");
		public const string OutlineColor_Color = "_OutlineColor";
		public static readonly int OutlineColor_ColorID = Shader.PropertyToID("_OutlineColor");
		public const string OutlineWidth_Range = "_OutlineWidth";
		public static readonly int OutlineWidth_RangeID = Shader.PropertyToID("_OutlineWidth");
		public const string OutlineSoftness_Range = "_OutlineSoftness";
		public static readonly int OutlineSoftness_RangeID = Shader.PropertyToID("_OutlineSoftness");
		public const string UnderlayColor_Color = "_UnderlayColor";
		public static readonly int UnderlayColor_ColorID = Shader.PropertyToID("_UnderlayColor");
		public const string UnderlayOffsetX_Range = "_UnderlayOffsetX";
		public static readonly int UnderlayOffsetX_RangeID = Shader.PropertyToID("_UnderlayOffsetX");
		public const string UnderlayOffsetY_Range = "_UnderlayOffsetY";
		public static readonly int UnderlayOffsetY_RangeID = Shader.PropertyToID("_UnderlayOffsetY");
		public const string UnderlayDilate_Range = "_UnderlayDilate";
		public static readonly int UnderlayDilate_RangeID = Shader.PropertyToID("_UnderlayDilate");
		public const string UnderlaySoftness_Range = "_UnderlaySoftness";
		public static readonly int UnderlaySoftness_RangeID = Shader.PropertyToID("_UnderlaySoftness");
		public const string WeightNormal_Float = "_WeightNormal";
		public static readonly int WeightNormal_FloatID = Shader.PropertyToID("_WeightNormal");
		public const string WeightBold_Float = "_WeightBold";
		public static readonly int WeightBold_FloatID = Shader.PropertyToID("_WeightBold");
		public const string ShaderFlags_Float = "_ShaderFlags";
		public static readonly int ShaderFlags_FloatID = Shader.PropertyToID("_ShaderFlags");
		public const string ScaleRatioA_Float = "_ScaleRatioA";
		public static readonly int ScaleRatioA_FloatID = Shader.PropertyToID("_ScaleRatioA");
		public const string ScaleRatioB_Float = "_ScaleRatioB";
		public static readonly int ScaleRatioB_FloatID = Shader.PropertyToID("_ScaleRatioB");
		public const string ScaleRatioC_Float = "_ScaleRatioC";
		public static readonly int ScaleRatioC_FloatID = Shader.PropertyToID("_ScaleRatioC");
		public const string MainTex_Texture = "_MainTex";
		public static readonly int MainTex_TextureID = Shader.PropertyToID("_MainTex");
		public const string TextureWidth_Float = "_TextureWidth";
		public static readonly int TextureWidth_FloatID = Shader.PropertyToID("_TextureWidth");
		public const string TextureHeight_Float = "_TextureHeight";
		public static readonly int TextureHeight_FloatID = Shader.PropertyToID("_TextureHeight");
		public const string GradientScale_Float = "_GradientScale";
		public static readonly int GradientScale_FloatID = Shader.PropertyToID("_GradientScale");
		public const string ScaleX_Float = "_ScaleX";
		public static readonly int ScaleX_FloatID = Shader.PropertyToID("_ScaleX");
		public const string ScaleY_Float = "_ScaleY";
		public static readonly int ScaleY_FloatID = Shader.PropertyToID("_ScaleY");
		public const string PerspectiveFilter_Range = "_PerspectiveFilter";
		public static readonly int PerspectiveFilter_RangeID = Shader.PropertyToID("_PerspectiveFilter");
		public const string Sharpness_Range = "_Sharpness";
		public static readonly int Sharpness_RangeID = Shader.PropertyToID("_Sharpness");
		public const string VertexOffsetX_Float = "_VertexOffsetX";
		public static readonly int VertexOffsetX_FloatID = Shader.PropertyToID("_VertexOffsetX");
		public const string VertexOffsetY_Float = "_VertexOffsetY";
		public static readonly int VertexOffsetY_FloatID = Shader.PropertyToID("_VertexOffsetY");
		public const string ClipRect_Vector = "_ClipRect";
		public static readonly int ClipRect_VectorID = Shader.PropertyToID("_ClipRect");
		public const string MaskSoftnessX_Float = "_MaskSoftnessX";
		public static readonly int MaskSoftnessX_FloatID = Shader.PropertyToID("_MaskSoftnessX");
		public const string MaskSoftnessY_Float = "_MaskSoftnessY";
		public static readonly int MaskSoftnessY_FloatID = Shader.PropertyToID("_MaskSoftnessY");
		public const string MaskTex_Texture = "_MaskTex";
		public static readonly int MaskTex_TextureID = Shader.PropertyToID("_MaskTex");
		public const string MaskInverse_Float = "_MaskInverse";
		public static readonly int MaskInverse_FloatID = Shader.PropertyToID("_MaskInverse");
		public const string MaskEdgeColor_Color = "_MaskEdgeColor";
		public static readonly int MaskEdgeColor_ColorID = Shader.PropertyToID("_MaskEdgeColor");
		public const string MaskEdgeSoftness_Range = "_MaskEdgeSoftness";
		public static readonly int MaskEdgeSoftness_RangeID = Shader.PropertyToID("_MaskEdgeSoftness");
		public const string MaskWipeControl_Range = "_MaskWipeControl";
		public static readonly int MaskWipeControl_RangeID = Shader.PropertyToID("_MaskWipeControl");
		public const string StencilComp_Float = "_StencilComp";
		public static readonly int StencilComp_FloatID = Shader.PropertyToID("_StencilComp");
		public const string Stencil_Float = "_Stencil";
		public static readonly int Stencil_FloatID = Shader.PropertyToID("_Stencil");
		public const string StencilOp_Float = "_StencilOp";
		public static readonly int StencilOp_FloatID = Shader.PropertyToID("_StencilOp");
		public const string StencilWriteMask_Float = "_StencilWriteMask";
		public static readonly int StencilWriteMask_FloatID = Shader.PropertyToID("_StencilWriteMask");
		public const string StencilReadMask_Float = "_StencilReadMask";
		public static readonly int StencilReadMask_FloatID = Shader.PropertyToID("_StencilReadMask");
		public const string CullMode_Float = "_CullMode";
		public static readonly int CullMode_FloatID = Shader.PropertyToID("_CullMode");
		public const string ColorMask_Float = "_ColorMask";
		public static readonly int ColorMask_FloatID = Shader.PropertyToID("_ColorMask");
		
	} // class TextMeshPro_Mobile_DistanceField_Masking
	
	public static class TextMeshPro_Mobile_DistanceFieldOverlay
	{
		// Members
		public const string FaceColor_Color = "_FaceColor";
		public static readonly int FaceColor_ColorID = Shader.PropertyToID("_FaceColor");
		public const string FaceDilate_Range = "_FaceDilate";
		public static readonly int FaceDilate_RangeID = Shader.PropertyToID("_FaceDilate");
		public const string OutlineColor_Color = "_OutlineColor";
		public static readonly int OutlineColor_ColorID = Shader.PropertyToID("_OutlineColor");
		public const string OutlineWidth_Range = "_OutlineWidth";
		public static readonly int OutlineWidth_RangeID = Shader.PropertyToID("_OutlineWidth");
		public const string OutlineSoftness_Range = "_OutlineSoftness";
		public static readonly int OutlineSoftness_RangeID = Shader.PropertyToID("_OutlineSoftness");
		public const string UnderlayColor_Color = "_UnderlayColor";
		public static readonly int UnderlayColor_ColorID = Shader.PropertyToID("_UnderlayColor");
		public const string UnderlayOffsetX_Range = "_UnderlayOffsetX";
		public static readonly int UnderlayOffsetX_RangeID = Shader.PropertyToID("_UnderlayOffsetX");
		public const string UnderlayOffsetY_Range = "_UnderlayOffsetY";
		public static readonly int UnderlayOffsetY_RangeID = Shader.PropertyToID("_UnderlayOffsetY");
		public const string UnderlayDilate_Range = "_UnderlayDilate";
		public static readonly int UnderlayDilate_RangeID = Shader.PropertyToID("_UnderlayDilate");
		public const string UnderlaySoftness_Range = "_UnderlaySoftness";
		public static readonly int UnderlaySoftness_RangeID = Shader.PropertyToID("_UnderlaySoftness");
		public const string WeightNormal_Float = "_WeightNormal";
		public static readonly int WeightNormal_FloatID = Shader.PropertyToID("_WeightNormal");
		public const string WeightBold_Float = "_WeightBold";
		public static readonly int WeightBold_FloatID = Shader.PropertyToID("_WeightBold");
		public const string ShaderFlags_Float = "_ShaderFlags";
		public static readonly int ShaderFlags_FloatID = Shader.PropertyToID("_ShaderFlags");
		public const string ScaleRatioA_Float = "_ScaleRatioA";
		public static readonly int ScaleRatioA_FloatID = Shader.PropertyToID("_ScaleRatioA");
		public const string ScaleRatioB_Float = "_ScaleRatioB";
		public static readonly int ScaleRatioB_FloatID = Shader.PropertyToID("_ScaleRatioB");
		public const string ScaleRatioC_Float = "_ScaleRatioC";
		public static readonly int ScaleRatioC_FloatID = Shader.PropertyToID("_ScaleRatioC");
		public const string MainTex_Texture = "_MainTex";
		public static readonly int MainTex_TextureID = Shader.PropertyToID("_MainTex");
		public const string TextureWidth_Float = "_TextureWidth";
		public static readonly int TextureWidth_FloatID = Shader.PropertyToID("_TextureWidth");
		public const string TextureHeight_Float = "_TextureHeight";
		public static readonly int TextureHeight_FloatID = Shader.PropertyToID("_TextureHeight");
		public const string GradientScale_Float = "_GradientScale";
		public static readonly int GradientScale_FloatID = Shader.PropertyToID("_GradientScale");
		public const string ScaleX_Float = "_ScaleX";
		public static readonly int ScaleX_FloatID = Shader.PropertyToID("_ScaleX");
		public const string ScaleY_Float = "_ScaleY";
		public static readonly int ScaleY_FloatID = Shader.PropertyToID("_ScaleY");
		public const string PerspectiveFilter_Range = "_PerspectiveFilter";
		public static readonly int PerspectiveFilter_RangeID = Shader.PropertyToID("_PerspectiveFilter");
		public const string Sharpness_Range = "_Sharpness";
		public static readonly int Sharpness_RangeID = Shader.PropertyToID("_Sharpness");
		public const string VertexOffsetX_Float = "_VertexOffsetX";
		public static readonly int VertexOffsetX_FloatID = Shader.PropertyToID("_VertexOffsetX");
		public const string VertexOffsetY_Float = "_VertexOffsetY";
		public static readonly int VertexOffsetY_FloatID = Shader.PropertyToID("_VertexOffsetY");
		public const string ClipRect_Vector = "_ClipRect";
		public static readonly int ClipRect_VectorID = Shader.PropertyToID("_ClipRect");
		public const string MaskSoftnessX_Float = "_MaskSoftnessX";
		public static readonly int MaskSoftnessX_FloatID = Shader.PropertyToID("_MaskSoftnessX");
		public const string MaskSoftnessY_Float = "_MaskSoftnessY";
		public static readonly int MaskSoftnessY_FloatID = Shader.PropertyToID("_MaskSoftnessY");
		public const string StencilComp_Float = "_StencilComp";
		public static readonly int StencilComp_FloatID = Shader.PropertyToID("_StencilComp");
		public const string Stencil_Float = "_Stencil";
		public static readonly int Stencil_FloatID = Shader.PropertyToID("_Stencil");
		public const string StencilOp_Float = "_StencilOp";
		public static readonly int StencilOp_FloatID = Shader.PropertyToID("_StencilOp");
		public const string StencilWriteMask_Float = "_StencilWriteMask";
		public static readonly int StencilWriteMask_FloatID = Shader.PropertyToID("_StencilWriteMask");
		public const string StencilReadMask_Float = "_StencilReadMask";
		public static readonly int StencilReadMask_FloatID = Shader.PropertyToID("_StencilReadMask");
		public const string CullMode_Float = "_CullMode";
		public static readonly int CullMode_FloatID = Shader.PropertyToID("_CullMode");
		public const string ColorMask_Float = "_ColorMask";
		public static readonly int ColorMask_FloatID = Shader.PropertyToID("_ColorMask");
		
	} // class TextMeshPro_Mobile_DistanceFieldOverlay
	
	public static class TextMeshPro_Mobile_DistanceFieldSSD
	{
		// Members
		public const string FaceColor_Color = "_FaceColor";
		public static readonly int FaceColor_ColorID = Shader.PropertyToID("_FaceColor");
		public const string FaceDilate_Range = "_FaceDilate";
		public static readonly int FaceDilate_RangeID = Shader.PropertyToID("_FaceDilate");
		public const string OutlineColor_Color = "_OutlineColor";
		public static readonly int OutlineColor_ColorID = Shader.PropertyToID("_OutlineColor");
		public const string OutlineWidth_Range = "_OutlineWidth";
		public static readonly int OutlineWidth_RangeID = Shader.PropertyToID("_OutlineWidth");
		public const string OutlineSoftness_Range = "_OutlineSoftness";
		public static readonly int OutlineSoftness_RangeID = Shader.PropertyToID("_OutlineSoftness");
		public const string UnderlayColor_Color = "_UnderlayColor";
		public static readonly int UnderlayColor_ColorID = Shader.PropertyToID("_UnderlayColor");
		public const string UnderlayOffsetX_Range = "_UnderlayOffsetX";
		public static readonly int UnderlayOffsetX_RangeID = Shader.PropertyToID("_UnderlayOffsetX");
		public const string UnderlayOffsetY_Range = "_UnderlayOffsetY";
		public static readonly int UnderlayOffsetY_RangeID = Shader.PropertyToID("_UnderlayOffsetY");
		public const string UnderlayDilate_Range = "_UnderlayDilate";
		public static readonly int UnderlayDilate_RangeID = Shader.PropertyToID("_UnderlayDilate");
		public const string UnderlaySoftness_Range = "_UnderlaySoftness";
		public static readonly int UnderlaySoftness_RangeID = Shader.PropertyToID("_UnderlaySoftness");
		public const string WeightNormal_Float = "_WeightNormal";
		public static readonly int WeightNormal_FloatID = Shader.PropertyToID("_WeightNormal");
		public const string WeightBold_Float = "_WeightBold";
		public static readonly int WeightBold_FloatID = Shader.PropertyToID("_WeightBold");
		public const string ShaderFlags_Float = "_ShaderFlags";
		public static readonly int ShaderFlags_FloatID = Shader.PropertyToID("_ShaderFlags");
		public const string ScaleRatioA_Float = "_ScaleRatioA";
		public static readonly int ScaleRatioA_FloatID = Shader.PropertyToID("_ScaleRatioA");
		public const string ScaleRatioB_Float = "_ScaleRatioB";
		public static readonly int ScaleRatioB_FloatID = Shader.PropertyToID("_ScaleRatioB");
		public const string ScaleRatioC_Float = "_ScaleRatioC";
		public static readonly int ScaleRatioC_FloatID = Shader.PropertyToID("_ScaleRatioC");
		public const string MainTex_Texture = "_MainTex";
		public static readonly int MainTex_TextureID = Shader.PropertyToID("_MainTex");
		public const string TextureWidth_Float = "_TextureWidth";
		public static readonly int TextureWidth_FloatID = Shader.PropertyToID("_TextureWidth");
		public const string TextureHeight_Float = "_TextureHeight";
		public static readonly int TextureHeight_FloatID = Shader.PropertyToID("_TextureHeight");
		public const string GradientScale_Float = "_GradientScale";
		public static readonly int GradientScale_FloatID = Shader.PropertyToID("_GradientScale");
		public const string ScaleX_Float = "_ScaleX";
		public static readonly int ScaleX_FloatID = Shader.PropertyToID("_ScaleX");
		public const string ScaleY_Float = "_ScaleY";
		public static readonly int ScaleY_FloatID = Shader.PropertyToID("_ScaleY");
		public const string PerspectiveFilter_Range = "_PerspectiveFilter";
		public static readonly int PerspectiveFilter_RangeID = Shader.PropertyToID("_PerspectiveFilter");
		public const string Sharpness_Range = "_Sharpness";
		public static readonly int Sharpness_RangeID = Shader.PropertyToID("_Sharpness");
		public const string VertexOffsetX_Float = "_VertexOffsetX";
		public static readonly int VertexOffsetX_FloatID = Shader.PropertyToID("_VertexOffsetX");
		public const string VertexOffsetY_Float = "_VertexOffsetY";
		public static readonly int VertexOffsetY_FloatID = Shader.PropertyToID("_VertexOffsetY");
		public const string ClipRect_Vector = "_ClipRect";
		public static readonly int ClipRect_VectorID = Shader.PropertyToID("_ClipRect");
		public const string MaskSoftnessX_Float = "_MaskSoftnessX";
		public static readonly int MaskSoftnessX_FloatID = Shader.PropertyToID("_MaskSoftnessX");
		public const string MaskSoftnessY_Float = "_MaskSoftnessY";
		public static readonly int MaskSoftnessY_FloatID = Shader.PropertyToID("_MaskSoftnessY");
		public const string MaskTex_Texture = "_MaskTex";
		public static readonly int MaskTex_TextureID = Shader.PropertyToID("_MaskTex");
		public const string MaskInverse_Float = "_MaskInverse";
		public static readonly int MaskInverse_FloatID = Shader.PropertyToID("_MaskInverse");
		public const string MaskEdgeColor_Color = "_MaskEdgeColor";
		public static readonly int MaskEdgeColor_ColorID = Shader.PropertyToID("_MaskEdgeColor");
		public const string MaskEdgeSoftness_Range = "_MaskEdgeSoftness";
		public static readonly int MaskEdgeSoftness_RangeID = Shader.PropertyToID("_MaskEdgeSoftness");
		public const string MaskWipeControl_Range = "_MaskWipeControl";
		public static readonly int MaskWipeControl_RangeID = Shader.PropertyToID("_MaskWipeControl");
		public const string StencilComp_Float = "_StencilComp";
		public static readonly int StencilComp_FloatID = Shader.PropertyToID("_StencilComp");
		public const string Stencil_Float = "_Stencil";
		public static readonly int Stencil_FloatID = Shader.PropertyToID("_Stencil");
		public const string StencilOp_Float = "_StencilOp";
		public static readonly int StencilOp_FloatID = Shader.PropertyToID("_StencilOp");
		public const string StencilWriteMask_Float = "_StencilWriteMask";
		public static readonly int StencilWriteMask_FloatID = Shader.PropertyToID("_StencilWriteMask");
		public const string StencilReadMask_Float = "_StencilReadMask";
		public static readonly int StencilReadMask_FloatID = Shader.PropertyToID("_StencilReadMask");
		public const string CullMode_Float = "_CullMode";
		public static readonly int CullMode_FloatID = Shader.PropertyToID("_CullMode");
		public const string ColorMask_Float = "_ColorMask";
		public static readonly int ColorMask_FloatID = Shader.PropertyToID("_ColorMask");
		
	} // class TextMeshPro_Mobile_DistanceFieldSSD
	
	public static class TextMeshPro_Mobile_DistanceField
	{
		// Members
		public const string FaceColor_Color = "_FaceColor";
		public static readonly int FaceColor_ColorID = Shader.PropertyToID("_FaceColor");
		public const string FaceDilate_Range = "_FaceDilate";
		public static readonly int FaceDilate_RangeID = Shader.PropertyToID("_FaceDilate");
		public const string OutlineColor_Color = "_OutlineColor";
		public static readonly int OutlineColor_ColorID = Shader.PropertyToID("_OutlineColor");
		public const string OutlineWidth_Range = "_OutlineWidth";
		public static readonly int OutlineWidth_RangeID = Shader.PropertyToID("_OutlineWidth");
		public const string OutlineSoftness_Range = "_OutlineSoftness";
		public static readonly int OutlineSoftness_RangeID = Shader.PropertyToID("_OutlineSoftness");
		public const string UnderlayColor_Color = "_UnderlayColor";
		public static readonly int UnderlayColor_ColorID = Shader.PropertyToID("_UnderlayColor");
		public const string UnderlayOffsetX_Range = "_UnderlayOffsetX";
		public static readonly int UnderlayOffsetX_RangeID = Shader.PropertyToID("_UnderlayOffsetX");
		public const string UnderlayOffsetY_Range = "_UnderlayOffsetY";
		public static readonly int UnderlayOffsetY_RangeID = Shader.PropertyToID("_UnderlayOffsetY");
		public const string UnderlayDilate_Range = "_UnderlayDilate";
		public static readonly int UnderlayDilate_RangeID = Shader.PropertyToID("_UnderlayDilate");
		public const string UnderlaySoftness_Range = "_UnderlaySoftness";
		public static readonly int UnderlaySoftness_RangeID = Shader.PropertyToID("_UnderlaySoftness");
		public const string WeightNormal_Float = "_WeightNormal";
		public static readonly int WeightNormal_FloatID = Shader.PropertyToID("_WeightNormal");
		public const string WeightBold_Float = "_WeightBold";
		public static readonly int WeightBold_FloatID = Shader.PropertyToID("_WeightBold");
		public const string ShaderFlags_Float = "_ShaderFlags";
		public static readonly int ShaderFlags_FloatID = Shader.PropertyToID("_ShaderFlags");
		public const string ScaleRatioA_Float = "_ScaleRatioA";
		public static readonly int ScaleRatioA_FloatID = Shader.PropertyToID("_ScaleRatioA");
		public const string ScaleRatioB_Float = "_ScaleRatioB";
		public static readonly int ScaleRatioB_FloatID = Shader.PropertyToID("_ScaleRatioB");
		public const string ScaleRatioC_Float = "_ScaleRatioC";
		public static readonly int ScaleRatioC_FloatID = Shader.PropertyToID("_ScaleRatioC");
		public const string MainTex_Texture = "_MainTex";
		public static readonly int MainTex_TextureID = Shader.PropertyToID("_MainTex");
		public const string TextureWidth_Float = "_TextureWidth";
		public static readonly int TextureWidth_FloatID = Shader.PropertyToID("_TextureWidth");
		public const string TextureHeight_Float = "_TextureHeight";
		public static readonly int TextureHeight_FloatID = Shader.PropertyToID("_TextureHeight");
		public const string GradientScale_Float = "_GradientScale";
		public static readonly int GradientScale_FloatID = Shader.PropertyToID("_GradientScale");
		public const string ScaleX_Float = "_ScaleX";
		public static readonly int ScaleX_FloatID = Shader.PropertyToID("_ScaleX");
		public const string ScaleY_Float = "_ScaleY";
		public static readonly int ScaleY_FloatID = Shader.PropertyToID("_ScaleY");
		public const string PerspectiveFilter_Range = "_PerspectiveFilter";
		public static readonly int PerspectiveFilter_RangeID = Shader.PropertyToID("_PerspectiveFilter");
		public const string Sharpness_Range = "_Sharpness";
		public static readonly int Sharpness_RangeID = Shader.PropertyToID("_Sharpness");
		public const string VertexOffsetX_Float = "_VertexOffsetX";
		public static readonly int VertexOffsetX_FloatID = Shader.PropertyToID("_VertexOffsetX");
		public const string VertexOffsetY_Float = "_VertexOffsetY";
		public static readonly int VertexOffsetY_FloatID = Shader.PropertyToID("_VertexOffsetY");
		public const string ClipRect_Vector = "_ClipRect";
		public static readonly int ClipRect_VectorID = Shader.PropertyToID("_ClipRect");
		public const string MaskSoftnessX_Float = "_MaskSoftnessX";
		public static readonly int MaskSoftnessX_FloatID = Shader.PropertyToID("_MaskSoftnessX");
		public const string MaskSoftnessY_Float = "_MaskSoftnessY";
		public static readonly int MaskSoftnessY_FloatID = Shader.PropertyToID("_MaskSoftnessY");
		public const string StencilComp_Float = "_StencilComp";
		public static readonly int StencilComp_FloatID = Shader.PropertyToID("_StencilComp");
		public const string Stencil_Float = "_Stencil";
		public static readonly int Stencil_FloatID = Shader.PropertyToID("_Stencil");
		public const string StencilOp_Float = "_StencilOp";
		public static readonly int StencilOp_FloatID = Shader.PropertyToID("_StencilOp");
		public const string StencilWriteMask_Float = "_StencilWriteMask";
		public static readonly int StencilWriteMask_FloatID = Shader.PropertyToID("_StencilWriteMask");
		public const string StencilReadMask_Float = "_StencilReadMask";
		public static readonly int StencilReadMask_FloatID = Shader.PropertyToID("_StencilReadMask");
		public const string CullMode_Float = "_CullMode";
		public static readonly int CullMode_FloatID = Shader.PropertyToID("_CullMode");
		public const string ColorMask_Float = "_ColorMask";
		public static readonly int ColorMask_FloatID = Shader.PropertyToID("_ColorMask");
		
	} // class TextMeshPro_Mobile_DistanceField
	
	public static class TextMeshPro_Mobile_DistanceFieldSurface
	{
		// Members
		public const string FaceTex_Texture = "_FaceTex";
		public static readonly int FaceTex_TextureID = Shader.PropertyToID("_FaceTex");
		public const string FaceColor_Color = "_FaceColor";
		public static readonly int FaceColor_ColorID = Shader.PropertyToID("_FaceColor");
		public const string FaceDilate_Range = "_FaceDilate";
		public static readonly int FaceDilate_RangeID = Shader.PropertyToID("_FaceDilate");
		public const string OutlineColor_Color = "_OutlineColor";
		public static readonly int OutlineColor_ColorID = Shader.PropertyToID("_OutlineColor");
		public const string OutlineTex_Texture = "_OutlineTex";
		public static readonly int OutlineTex_TextureID = Shader.PropertyToID("_OutlineTex");
		public const string OutlineWidth_Range = "_OutlineWidth";
		public static readonly int OutlineWidth_RangeID = Shader.PropertyToID("_OutlineWidth");
		public const string OutlineSoftness_Range = "_OutlineSoftness";
		public static readonly int OutlineSoftness_RangeID = Shader.PropertyToID("_OutlineSoftness");
		public const string GlowColor_Color = "_GlowColor";
		public static readonly int GlowColor_ColorID = Shader.PropertyToID("_GlowColor");
		public const string GlowOffset_Range = "_GlowOffset";
		public static readonly int GlowOffset_RangeID = Shader.PropertyToID("_GlowOffset");
		public const string GlowInner_Range = "_GlowInner";
		public static readonly int GlowInner_RangeID = Shader.PropertyToID("_GlowInner");
		public const string GlowOuter_Range = "_GlowOuter";
		public static readonly int GlowOuter_RangeID = Shader.PropertyToID("_GlowOuter");
		public const string GlowPower_Range = "_GlowPower";
		public static readonly int GlowPower_RangeID = Shader.PropertyToID("_GlowPower");
		public const string WeightNormal_Float = "_WeightNormal";
		public static readonly int WeightNormal_FloatID = Shader.PropertyToID("_WeightNormal");
		public const string WeightBold_Float = "_WeightBold";
		public static readonly int WeightBold_FloatID = Shader.PropertyToID("_WeightBold");
		public const string ShaderFlags_Float = "_ShaderFlags";
		public static readonly int ShaderFlags_FloatID = Shader.PropertyToID("_ShaderFlags");
		public const string ScaleRatioA_Float = "_ScaleRatioA";
		public static readonly int ScaleRatioA_FloatID = Shader.PropertyToID("_ScaleRatioA");
		public const string ScaleRatioB_Float = "_ScaleRatioB";
		public static readonly int ScaleRatioB_FloatID = Shader.PropertyToID("_ScaleRatioB");
		public const string ScaleRatioC_Float = "_ScaleRatioC";
		public static readonly int ScaleRatioC_FloatID = Shader.PropertyToID("_ScaleRatioC");
		public const string MainTex_Texture = "_MainTex";
		public static readonly int MainTex_TextureID = Shader.PropertyToID("_MainTex");
		public const string TextureWidth_Float = "_TextureWidth";
		public static readonly int TextureWidth_FloatID = Shader.PropertyToID("_TextureWidth");
		public const string TextureHeight_Float = "_TextureHeight";
		public static readonly int TextureHeight_FloatID = Shader.PropertyToID("_TextureHeight");
		public const string GradientScale_Float = "_GradientScale";
		public static readonly int GradientScale_FloatID = Shader.PropertyToID("_GradientScale");
		public const string ScaleX_Float = "_ScaleX";
		public static readonly int ScaleX_FloatID = Shader.PropertyToID("_ScaleX");
		public const string ScaleY_Float = "_ScaleY";
		public static readonly int ScaleY_FloatID = Shader.PropertyToID("_ScaleY");
		public const string PerspectiveFilter_Range = "_PerspectiveFilter";
		public static readonly int PerspectiveFilter_RangeID = Shader.PropertyToID("_PerspectiveFilter");
		public const string Sharpness_Range = "_Sharpness";
		public static readonly int Sharpness_RangeID = Shader.PropertyToID("_Sharpness");
		public const string VertexOffsetX_Float = "_VertexOffsetX";
		public static readonly int VertexOffsetX_FloatID = Shader.PropertyToID("_VertexOffsetX");
		public const string VertexOffsetY_Float = "_VertexOffsetY";
		public static readonly int VertexOffsetY_FloatID = Shader.PropertyToID("_VertexOffsetY");
		public const string CullMode_Float = "_CullMode";
		public static readonly int CullMode_FloatID = Shader.PropertyToID("_CullMode");
		
	} // class TextMeshPro_Mobile_DistanceFieldSurface
	
	public static class TextMeshPro_DistanceFieldSurface
	{
		// Members
		public const string FaceTex_Texture = "_FaceTex";
		public static readonly int FaceTex_TextureID = Shader.PropertyToID("_FaceTex");
		public const string FaceUVSpeedX_Range = "_FaceUVSpeedX";
		public static readonly int FaceUVSpeedX_RangeID = Shader.PropertyToID("_FaceUVSpeedX");
		public const string FaceUVSpeedY_Range = "_FaceUVSpeedY";
		public static readonly int FaceUVSpeedY_RangeID = Shader.PropertyToID("_FaceUVSpeedY");
		public const string FaceColor_Color = "_FaceColor";
		public static readonly int FaceColor_ColorID = Shader.PropertyToID("_FaceColor");
		public const string FaceDilate_Range = "_FaceDilate";
		public static readonly int FaceDilate_RangeID = Shader.PropertyToID("_FaceDilate");
		public const string OutlineColor_Color = "_OutlineColor";
		public static readonly int OutlineColor_ColorID = Shader.PropertyToID("_OutlineColor");
		public const string OutlineTex_Texture = "_OutlineTex";
		public static readonly int OutlineTex_TextureID = Shader.PropertyToID("_OutlineTex");
		public const string OutlineUVSpeedX_Range = "_OutlineUVSpeedX";
		public static readonly int OutlineUVSpeedX_RangeID = Shader.PropertyToID("_OutlineUVSpeedX");
		public const string OutlineUVSpeedY_Range = "_OutlineUVSpeedY";
		public static readonly int OutlineUVSpeedY_RangeID = Shader.PropertyToID("_OutlineUVSpeedY");
		public const string OutlineWidth_Range = "_OutlineWidth";
		public static readonly int OutlineWidth_RangeID = Shader.PropertyToID("_OutlineWidth");
		public const string OutlineSoftness_Range = "_OutlineSoftness";
		public static readonly int OutlineSoftness_RangeID = Shader.PropertyToID("_OutlineSoftness");
		public const string Bevel_Range = "_Bevel";
		public static readonly int Bevel_RangeID = Shader.PropertyToID("_Bevel");
		public const string BevelOffset_Range = "_BevelOffset";
		public static readonly int BevelOffset_RangeID = Shader.PropertyToID("_BevelOffset");
		public const string BevelWidth_Range = "_BevelWidth";
		public static readonly int BevelWidth_RangeID = Shader.PropertyToID("_BevelWidth");
		public const string BevelClamp_Range = "_BevelClamp";
		public static readonly int BevelClamp_RangeID = Shader.PropertyToID("_BevelClamp");
		public const string BevelRoundness_Range = "_BevelRoundness";
		public static readonly int BevelRoundness_RangeID = Shader.PropertyToID("_BevelRoundness");
		public const string BumpMap_Texture = "_BumpMap";
		public static readonly int BumpMap_TextureID = Shader.PropertyToID("_BumpMap");
		public const string BumpOutline_Range = "_BumpOutline";
		public static readonly int BumpOutline_RangeID = Shader.PropertyToID("_BumpOutline");
		public const string BumpFace_Range = "_BumpFace";
		public static readonly int BumpFace_RangeID = Shader.PropertyToID("_BumpFace");
		public const string ReflectFaceColor_Color = "_ReflectFaceColor";
		public static readonly int ReflectFaceColor_ColorID = Shader.PropertyToID("_ReflectFaceColor");
		public const string ReflectOutlineColor_Color = "_ReflectOutlineColor";
		public static readonly int ReflectOutlineColor_ColorID = Shader.PropertyToID("_ReflectOutlineColor");
		public const string Cube_Texture = "_Cube";
		public static readonly int Cube_TextureID = Shader.PropertyToID("_Cube");
		public const string EnvMatrixRotation_Vector = "_EnvMatrixRotation";
		public static readonly int EnvMatrixRotation_VectorID = Shader.PropertyToID("_EnvMatrixRotation");
		public const string SpecColor_Color = "_SpecColor";
		public static readonly int SpecColor_ColorID = Shader.PropertyToID("_SpecColor");
		public const string FaceShininess_Range = "_FaceShininess";
		public static readonly int FaceShininess_RangeID = Shader.PropertyToID("_FaceShininess");
		public const string OutlineShininess_Range = "_OutlineShininess";
		public static readonly int OutlineShininess_RangeID = Shader.PropertyToID("_OutlineShininess");
		public const string GlowColor_Color = "_GlowColor";
		public static readonly int GlowColor_ColorID = Shader.PropertyToID("_GlowColor");
		public const string GlowOffset_Range = "_GlowOffset";
		public static readonly int GlowOffset_RangeID = Shader.PropertyToID("_GlowOffset");
		public const string GlowInner_Range = "_GlowInner";
		public static readonly int GlowInner_RangeID = Shader.PropertyToID("_GlowInner");
		public const string GlowOuter_Range = "_GlowOuter";
		public static readonly int GlowOuter_RangeID = Shader.PropertyToID("_GlowOuter");
		public const string GlowPower_Range = "_GlowPower";
		public static readonly int GlowPower_RangeID = Shader.PropertyToID("_GlowPower");
		public const string WeightNormal_Float = "_WeightNormal";
		public static readonly int WeightNormal_FloatID = Shader.PropertyToID("_WeightNormal");
		public const string WeightBold_Float = "_WeightBold";
		public static readonly int WeightBold_FloatID = Shader.PropertyToID("_WeightBold");
		public const string ShaderFlags_Float = "_ShaderFlags";
		public static readonly int ShaderFlags_FloatID = Shader.PropertyToID("_ShaderFlags");
		public const string ScaleRatioA_Float = "_ScaleRatioA";
		public static readonly int ScaleRatioA_FloatID = Shader.PropertyToID("_ScaleRatioA");
		public const string ScaleRatioB_Float = "_ScaleRatioB";
		public static readonly int ScaleRatioB_FloatID = Shader.PropertyToID("_ScaleRatioB");
		public const string ScaleRatioC_Float = "_ScaleRatioC";
		public static readonly int ScaleRatioC_FloatID = Shader.PropertyToID("_ScaleRatioC");
		public const string MainTex_Texture = "_MainTex";
		public static readonly int MainTex_TextureID = Shader.PropertyToID("_MainTex");
		public const string TextureWidth_Float = "_TextureWidth";
		public static readonly int TextureWidth_FloatID = Shader.PropertyToID("_TextureWidth");
		public const string TextureHeight_Float = "_TextureHeight";
		public static readonly int TextureHeight_FloatID = Shader.PropertyToID("_TextureHeight");
		public const string GradientScale_Float = "_GradientScale";
		public static readonly int GradientScale_FloatID = Shader.PropertyToID("_GradientScale");
		public const string ScaleX_Float = "_ScaleX";
		public static readonly int ScaleX_FloatID = Shader.PropertyToID("_ScaleX");
		public const string ScaleY_Float = "_ScaleY";
		public static readonly int ScaleY_FloatID = Shader.PropertyToID("_ScaleY");
		public const string PerspectiveFilter_Range = "_PerspectiveFilter";
		public static readonly int PerspectiveFilter_RangeID = Shader.PropertyToID("_PerspectiveFilter");
		public const string Sharpness_Range = "_Sharpness";
		public static readonly int Sharpness_RangeID = Shader.PropertyToID("_Sharpness");
		public const string VertexOffsetX_Float = "_VertexOffsetX";
		public static readonly int VertexOffsetX_FloatID = Shader.PropertyToID("_VertexOffsetX");
		public const string VertexOffsetY_Float = "_VertexOffsetY";
		public static readonly int VertexOffsetY_FloatID = Shader.PropertyToID("_VertexOffsetY");
		public const string CullMode_Float = "_CullMode";
		public static readonly int CullMode_FloatID = Shader.PropertyToID("_CullMode");
		
	} // class TextMeshPro_DistanceFieldSurface
	
	public static class TextMeshPro_DistanceField
	{
		// Members
		public const string FaceTex_Texture = "_FaceTex";
		public static readonly int FaceTex_TextureID = Shader.PropertyToID("_FaceTex");
		public const string FaceUVSpeedX_Range = "_FaceUVSpeedX";
		public static readonly int FaceUVSpeedX_RangeID = Shader.PropertyToID("_FaceUVSpeedX");
		public const string FaceUVSpeedY_Range = "_FaceUVSpeedY";
		public static readonly int FaceUVSpeedY_RangeID = Shader.PropertyToID("_FaceUVSpeedY");
		public const string FaceColor_Color = "_FaceColor";
		public static readonly int FaceColor_ColorID = Shader.PropertyToID("_FaceColor");
		public const string FaceDilate_Range = "_FaceDilate";
		public static readonly int FaceDilate_RangeID = Shader.PropertyToID("_FaceDilate");
		public const string OutlineColor_Color = "_OutlineColor";
		public static readonly int OutlineColor_ColorID = Shader.PropertyToID("_OutlineColor");
		public const string OutlineTex_Texture = "_OutlineTex";
		public static readonly int OutlineTex_TextureID = Shader.PropertyToID("_OutlineTex");
		public const string OutlineUVSpeedX_Range = "_OutlineUVSpeedX";
		public static readonly int OutlineUVSpeedX_RangeID = Shader.PropertyToID("_OutlineUVSpeedX");
		public const string OutlineUVSpeedY_Range = "_OutlineUVSpeedY";
		public static readonly int OutlineUVSpeedY_RangeID = Shader.PropertyToID("_OutlineUVSpeedY");
		public const string OutlineWidth_Range = "_OutlineWidth";
		public static readonly int OutlineWidth_RangeID = Shader.PropertyToID("_OutlineWidth");
		public const string OutlineSoftness_Range = "_OutlineSoftness";
		public static readonly int OutlineSoftness_RangeID = Shader.PropertyToID("_OutlineSoftness");
		public const string Bevel_Range = "_Bevel";
		public static readonly int Bevel_RangeID = Shader.PropertyToID("_Bevel");
		public const string BevelOffset_Range = "_BevelOffset";
		public static readonly int BevelOffset_RangeID = Shader.PropertyToID("_BevelOffset");
		public const string BevelWidth_Range = "_BevelWidth";
		public static readonly int BevelWidth_RangeID = Shader.PropertyToID("_BevelWidth");
		public const string BevelClamp_Range = "_BevelClamp";
		public static readonly int BevelClamp_RangeID = Shader.PropertyToID("_BevelClamp");
		public const string BevelRoundness_Range = "_BevelRoundness";
		public static readonly int BevelRoundness_RangeID = Shader.PropertyToID("_BevelRoundness");
		public const string LightAngle_Range = "_LightAngle";
		public static readonly int LightAngle_RangeID = Shader.PropertyToID("_LightAngle");
		public const string SpecularColor_Color = "_SpecularColor";
		public static readonly int SpecularColor_ColorID = Shader.PropertyToID("_SpecularColor");
		public const string SpecularPower_Range = "_SpecularPower";
		public static readonly int SpecularPower_RangeID = Shader.PropertyToID("_SpecularPower");
		public const string Reflectivity_Range = "_Reflectivity";
		public static readonly int Reflectivity_RangeID = Shader.PropertyToID("_Reflectivity");
		public const string Diffuse_Range = "_Diffuse";
		public static readonly int Diffuse_RangeID = Shader.PropertyToID("_Diffuse");
		public const string Ambient_Range = "_Ambient";
		public static readonly int Ambient_RangeID = Shader.PropertyToID("_Ambient");
		public const string BumpMap_Texture = "_BumpMap";
		public static readonly int BumpMap_TextureID = Shader.PropertyToID("_BumpMap");
		public const string BumpOutline_Range = "_BumpOutline";
		public static readonly int BumpOutline_RangeID = Shader.PropertyToID("_BumpOutline");
		public const string BumpFace_Range = "_BumpFace";
		public static readonly int BumpFace_RangeID = Shader.PropertyToID("_BumpFace");
		public const string ReflectFaceColor_Color = "_ReflectFaceColor";
		public static readonly int ReflectFaceColor_ColorID = Shader.PropertyToID("_ReflectFaceColor");
		public const string ReflectOutlineColor_Color = "_ReflectOutlineColor";
		public static readonly int ReflectOutlineColor_ColorID = Shader.PropertyToID("_ReflectOutlineColor");
		public const string Cube_Texture = "_Cube";
		public static readonly int Cube_TextureID = Shader.PropertyToID("_Cube");
		public const string EnvMatrixRotation_Vector = "_EnvMatrixRotation";
		public static readonly int EnvMatrixRotation_VectorID = Shader.PropertyToID("_EnvMatrixRotation");
		public const string UnderlayColor_Color = "_UnderlayColor";
		public static readonly int UnderlayColor_ColorID = Shader.PropertyToID("_UnderlayColor");
		public const string UnderlayOffsetX_Range = "_UnderlayOffsetX";
		public static readonly int UnderlayOffsetX_RangeID = Shader.PropertyToID("_UnderlayOffsetX");
		public const string UnderlayOffsetY_Range = "_UnderlayOffsetY";
		public static readonly int UnderlayOffsetY_RangeID = Shader.PropertyToID("_UnderlayOffsetY");
		public const string UnderlayDilate_Range = "_UnderlayDilate";
		public static readonly int UnderlayDilate_RangeID = Shader.PropertyToID("_UnderlayDilate");
		public const string UnderlaySoftness_Range = "_UnderlaySoftness";
		public static readonly int UnderlaySoftness_RangeID = Shader.PropertyToID("_UnderlaySoftness");
		public const string GlowColor_Color = "_GlowColor";
		public static readonly int GlowColor_ColorID = Shader.PropertyToID("_GlowColor");
		public const string GlowOffset_Range = "_GlowOffset";
		public static readonly int GlowOffset_RangeID = Shader.PropertyToID("_GlowOffset");
		public const string GlowInner_Range = "_GlowInner";
		public static readonly int GlowInner_RangeID = Shader.PropertyToID("_GlowInner");
		public const string GlowOuter_Range = "_GlowOuter";
		public static readonly int GlowOuter_RangeID = Shader.PropertyToID("_GlowOuter");
		public const string GlowPower_Range = "_GlowPower";
		public static readonly int GlowPower_RangeID = Shader.PropertyToID("_GlowPower");
		public const string WeightNormal_Float = "_WeightNormal";
		public static readonly int WeightNormal_FloatID = Shader.PropertyToID("_WeightNormal");
		public const string WeightBold_Float = "_WeightBold";
		public static readonly int WeightBold_FloatID = Shader.PropertyToID("_WeightBold");
		public const string ShaderFlags_Float = "_ShaderFlags";
		public static readonly int ShaderFlags_FloatID = Shader.PropertyToID("_ShaderFlags");
		public const string ScaleRatioA_Float = "_ScaleRatioA";
		public static readonly int ScaleRatioA_FloatID = Shader.PropertyToID("_ScaleRatioA");
		public const string ScaleRatioB_Float = "_ScaleRatioB";
		public static readonly int ScaleRatioB_FloatID = Shader.PropertyToID("_ScaleRatioB");
		public const string ScaleRatioC_Float = "_ScaleRatioC";
		public static readonly int ScaleRatioC_FloatID = Shader.PropertyToID("_ScaleRatioC");
		public const string MainTex_Texture = "_MainTex";
		public static readonly int MainTex_TextureID = Shader.PropertyToID("_MainTex");
		public const string TextureWidth_Float = "_TextureWidth";
		public static readonly int TextureWidth_FloatID = Shader.PropertyToID("_TextureWidth");
		public const string TextureHeight_Float = "_TextureHeight";
		public static readonly int TextureHeight_FloatID = Shader.PropertyToID("_TextureHeight");
		public const string GradientScale_Float = "_GradientScale";
		public static readonly int GradientScale_FloatID = Shader.PropertyToID("_GradientScale");
		public const string ScaleX_Float = "_ScaleX";
		public static readonly int ScaleX_FloatID = Shader.PropertyToID("_ScaleX");
		public const string ScaleY_Float = "_ScaleY";
		public static readonly int ScaleY_FloatID = Shader.PropertyToID("_ScaleY");
		public const string PerspectiveFilter_Range = "_PerspectiveFilter";
		public static readonly int PerspectiveFilter_RangeID = Shader.PropertyToID("_PerspectiveFilter");
		public const string Sharpness_Range = "_Sharpness";
		public static readonly int Sharpness_RangeID = Shader.PropertyToID("_Sharpness");
		public const string VertexOffsetX_Float = "_VertexOffsetX";
		public static readonly int VertexOffsetX_FloatID = Shader.PropertyToID("_VertexOffsetX");
		public const string VertexOffsetY_Float = "_VertexOffsetY";
		public static readonly int VertexOffsetY_FloatID = Shader.PropertyToID("_VertexOffsetY");
		public const string MaskCoord_Vector = "_MaskCoord";
		public static readonly int MaskCoord_VectorID = Shader.PropertyToID("_MaskCoord");
		public const string ClipRect_Vector = "_ClipRect";
		public static readonly int ClipRect_VectorID = Shader.PropertyToID("_ClipRect");
		public const string MaskSoftnessX_Float = "_MaskSoftnessX";
		public static readonly int MaskSoftnessX_FloatID = Shader.PropertyToID("_MaskSoftnessX");
		public const string MaskSoftnessY_Float = "_MaskSoftnessY";
		public static readonly int MaskSoftnessY_FloatID = Shader.PropertyToID("_MaskSoftnessY");
		public const string StencilComp_Float = "_StencilComp";
		public static readonly int StencilComp_FloatID = Shader.PropertyToID("_StencilComp");
		public const string Stencil_Float = "_Stencil";
		public static readonly int Stencil_FloatID = Shader.PropertyToID("_Stencil");
		public const string StencilOp_Float = "_StencilOp";
		public static readonly int StencilOp_FloatID = Shader.PropertyToID("_StencilOp");
		public const string StencilWriteMask_Float = "_StencilWriteMask";
		public static readonly int StencilWriteMask_FloatID = Shader.PropertyToID("_StencilWriteMask");
		public const string StencilReadMask_Float = "_StencilReadMask";
		public static readonly int StencilReadMask_FloatID = Shader.PropertyToID("_StencilReadMask");
		public const string CullMode_Float = "_CullMode";
		public static readonly int CullMode_FloatID = Shader.PropertyToID("_CullMode");
		public const string ColorMask_Float = "_ColorMask";
		public static readonly int ColorMask_FloatID = Shader.PropertyToID("_ColorMask");
		
	} // class TextMeshPro_DistanceField
	
	public static class TextMeshPro_Sprite
	{
		// Members
		public const string MainTex_Texture = "_MainTex";
		public static readonly int MainTex_TextureID = Shader.PropertyToID("_MainTex");
		public const string Color_Color = "_Color";
		public static readonly int Color_ColorID = Shader.PropertyToID("_Color");
		public const string StencilComp_Float = "_StencilComp";
		public static readonly int StencilComp_FloatID = Shader.PropertyToID("_StencilComp");
		public const string Stencil_Float = "_Stencil";
		public static readonly int Stencil_FloatID = Shader.PropertyToID("_Stencil");
		public const string StencilOp_Float = "_StencilOp";
		public static readonly int StencilOp_FloatID = Shader.PropertyToID("_StencilOp");
		public const string StencilWriteMask_Float = "_StencilWriteMask";
		public static readonly int StencilWriteMask_FloatID = Shader.PropertyToID("_StencilWriteMask");
		public const string StencilReadMask_Float = "_StencilReadMask";
		public static readonly int StencilReadMask_FloatID = Shader.PropertyToID("_StencilReadMask");
		public const string CullMode_Float = "_CullMode";
		public static readonly int CullMode_FloatID = Shader.PropertyToID("_CullMode");
		public const string ColorMask_Float = "_ColorMask";
		public static readonly int ColorMask_FloatID = Shader.PropertyToID("_ColorMask");
		public const string ClipRect_Vector = "_ClipRect";
		public static readonly int ClipRect_VectorID = Shader.PropertyToID("_ClipRect");
		public const string UseUIAlphaClip_Float = "_UseUIAlphaClip";
		public static readonly int UseUIAlphaClip_FloatID = Shader.PropertyToID("_UseUIAlphaClip");
		
	} // class TextMeshPro_Sprite
	
	public static class Custom_NewSurfaceShader
	{
		// Members
		public const string Color_Color = "_Color";
		public static readonly int Color_ColorID = Shader.PropertyToID("_Color");
		public const string MainTex_Texture = "_MainTex";
		public static readonly int MainTex_TextureID = Shader.PropertyToID("_MainTex");
		public const string Glossiness_Range = "_Glossiness";
		public static readonly int Glossiness_RangeID = Shader.PropertyToID("_Glossiness");
		public const string Metallic_Range = "_Metallic";
		public static readonly int Metallic_RangeID = Shader.PropertyToID("_Metallic");
		
	} // class Custom_NewSurfaceShader
	
	public static class Custom_test
	{
		// Members
		public const string WorkflowMode_Float = "_WorkflowMode";
		public static readonly int WorkflowMode_FloatID = Shader.PropertyToID("_WorkflowMode");
		public const string BaseMap_Texture = "_BaseMap";
		public static readonly int BaseMap_TextureID = Shader.PropertyToID("_BaseMap");
		public const string BaseColor_Color = "_BaseColor";
		public static readonly int BaseColor_ColorID = Shader.PropertyToID("_BaseColor");
		public const string Cutoff_Range = "_Cutoff";
		public static readonly int Cutoff_RangeID = Shader.PropertyToID("_Cutoff");
		public const string Smoothness_Range = "_Smoothness";
		public static readonly int Smoothness_RangeID = Shader.PropertyToID("_Smoothness");
		public const string SmoothnessTextureChannel_Float = "_SmoothnessTextureChannel";
		public static readonly int SmoothnessTextureChannel_FloatID = Shader.PropertyToID("_SmoothnessTextureChannel");
		public const string Metallic_Range = "_Metallic";
		public static readonly int Metallic_RangeID = Shader.PropertyToID("_Metallic");
		public const string MetallicGlossMap_Texture = "_MetallicGlossMap";
		public static readonly int MetallicGlossMap_TextureID = Shader.PropertyToID("_MetallicGlossMap");
		public const string SpecColor_Color = "_SpecColor";
		public static readonly int SpecColor_ColorID = Shader.PropertyToID("_SpecColor");
		public const string SpecGlossMap_Texture = "_SpecGlossMap";
		public static readonly int SpecGlossMap_TextureID = Shader.PropertyToID("_SpecGlossMap");
		public const string SpecularHighlights_Float = "_SpecularHighlights";
		public static readonly int SpecularHighlights_FloatID = Shader.PropertyToID("_SpecularHighlights");
		public const string EnvironmentReflections_Float = "_EnvironmentReflections";
		public static readonly int EnvironmentReflections_FloatID = Shader.PropertyToID("_EnvironmentReflections");
		public const string BumpScale_Float = "_BumpScale";
		public static readonly int BumpScale_FloatID = Shader.PropertyToID("_BumpScale");
		public const string BumpMap_Texture = "_BumpMap";
		public static readonly int BumpMap_TextureID = Shader.PropertyToID("_BumpMap");
		public const string Parallax_Range = "_Parallax";
		public static readonly int Parallax_RangeID = Shader.PropertyToID("_Parallax");
		public const string ParallaxMap_Texture = "_ParallaxMap";
		public static readonly int ParallaxMap_TextureID = Shader.PropertyToID("_ParallaxMap");
		public const string OcclusionStrength_Range = "_OcclusionStrength";
		public static readonly int OcclusionStrength_RangeID = Shader.PropertyToID("_OcclusionStrength");
		public const string OcclusionMap_Texture = "_OcclusionMap";
		public static readonly int OcclusionMap_TextureID = Shader.PropertyToID("_OcclusionMap");
		public const string EmissionColor_Color = "_EmissionColor";
		public static readonly int EmissionColor_ColorID = Shader.PropertyToID("_EmissionColor");
		public const string EmissionMap_Texture = "_EmissionMap";
		public static readonly int EmissionMap_TextureID = Shader.PropertyToID("_EmissionMap");
		public const string DetailMask_Texture = "_DetailMask";
		public static readonly int DetailMask_TextureID = Shader.PropertyToID("_DetailMask");
		public const string DetailAlbedoMapScale_Range = "_DetailAlbedoMapScale";
		public static readonly int DetailAlbedoMapScale_RangeID = Shader.PropertyToID("_DetailAlbedoMapScale");
		public const string DetailAlbedoMap_Texture = "_DetailAlbedoMap";
		public static readonly int DetailAlbedoMap_TextureID = Shader.PropertyToID("_DetailAlbedoMap");
		public const string DetailNormalMapScale_Range = "_DetailNormalMapScale";
		public static readonly int DetailNormalMapScale_RangeID = Shader.PropertyToID("_DetailNormalMapScale");
		public const string DetailNormalMap_Texture = "_DetailNormalMap";
		public static readonly int DetailNormalMap_TextureID = Shader.PropertyToID("_DetailNormalMap");
		public const string ClearCoatMask_Float = "_ClearCoatMask";
		public static readonly int ClearCoatMask_FloatID = Shader.PropertyToID("_ClearCoatMask");
		public const string ClearCoatSmoothness_Float = "_ClearCoatSmoothness";
		public static readonly int ClearCoatSmoothness_FloatID = Shader.PropertyToID("_ClearCoatSmoothness");
		public const string Surface_Float = "_Surface";
		public static readonly int Surface_FloatID = Shader.PropertyToID("_Surface");
		public const string Blend_Float = "_Blend";
		public static readonly int Blend_FloatID = Shader.PropertyToID("_Blend");
		public const string Cull_Float = "_Cull";
		public static readonly int Cull_FloatID = Shader.PropertyToID("_Cull");
		public const string AlphaClip_Float = "_AlphaClip";
		public static readonly int AlphaClip_FloatID = Shader.PropertyToID("_AlphaClip");
		public const string SrcBlend_Float = "_SrcBlend";
		public static readonly int SrcBlend_FloatID = Shader.PropertyToID("_SrcBlend");
		public const string DstBlend_Float = "_DstBlend";
		public static readonly int DstBlend_FloatID = Shader.PropertyToID("_DstBlend");
		public const string ZWrite_Float = "_ZWrite";
		public static readonly int ZWrite_FloatID = Shader.PropertyToID("_ZWrite");
		public const string ReceiveShadows_Float = "_ReceiveShadows";
		public static readonly int ReceiveShadows_FloatID = Shader.PropertyToID("_ReceiveShadows");
		public const string QueueOffset_Float = "_QueueOffset";
		public static readonly int QueueOffset_FloatID = Shader.PropertyToID("_QueueOffset");
		public const string MainTex_Texture = "_MainTex";
		public static readonly int MainTex_TextureID = Shader.PropertyToID("_MainTex");
		public const string Color_Color = "_Color";
		public static readonly int Color_ColorID = Shader.PropertyToID("_Color");
		public const string GlossMapScale_Float = "_GlossMapScale";
		public static readonly int GlossMapScale_FloatID = Shader.PropertyToID("_GlossMapScale");
		public const string Glossiness_Float = "_Glossiness";
		public static readonly int Glossiness_FloatID = Shader.PropertyToID("_Glossiness");
		public const string GlossyReflections_Float = "_GlossyReflections";
		public static readonly int GlossyReflections_FloatID = Shader.PropertyToID("_GlossyReflections");
		public const string unity_Lightmaps_Texture = "unity_Lightmaps";
		public static readonly int unity_Lightmaps_TextureID = Shader.PropertyToID("unity_Lightmaps");
		public const string unity_LightmapsInd_Texture = "unity_LightmapsInd";
		public static readonly int unity_LightmapsInd_TextureID = Shader.PropertyToID("unity_LightmapsInd");
		public const string unity_ShadowMasks_Texture = "unity_ShadowMasks";
		public static readonly int unity_ShadowMasks_TextureID = Shader.PropertyToID("unity_ShadowMasks");
		
	} // class Custom_test
	
	public static class Custom_Portal
	{
		// Members
		public const string InactiveColour_Color = "_InactiveColour";
		public static readonly int InactiveColour_ColorID = Shader.PropertyToID("_InactiveColour");
		
	} // class Custom_Portal
	
	public static class Custom_Slice
	{
		// Members
		public const string Color_Color = "_Color";
		public static readonly int Color_ColorID = Shader.PropertyToID("_Color");
		public const string MainTex_Texture = "_MainTex";
		public static readonly int MainTex_TextureID = Shader.PropertyToID("_MainTex");
		public const string Glossiness_Range = "_Glossiness";
		public static readonly int Glossiness_RangeID = Shader.PropertyToID("_Glossiness");
		public const string Metallic_Range = "_Metallic";
		public static readonly int Metallic_RangeID = Shader.PropertyToID("_Metallic");
		public const string sliceNormal_Vector = "sliceNormal";
		public static readonly int sliceNormal_VectorID = Shader.PropertyToID("sliceNormal");
		public const string sliceCentre_Vector = "sliceCentre";
		public static readonly int sliceCentre_VectorID = Shader.PropertyToID("sliceCentre");
		public const string sliceOffsetDst_Float = "sliceOffsetDst";
		public static readonly int sliceOffsetDst_FloatID = Shader.PropertyToID("sliceOffsetDst");
		
	} // class Custom_Slice
	
	public static class Hidden_VFX_Portal1_System1_OutputParticleQuad
	{
	} // class Hidden_VFX_Portal1_System1_OutputParticleQuad
	
	
} // class ShaderConstants
